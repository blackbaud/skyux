name: E2E

on:
  push:
    branches:
      - main
  pull_request_target:
  workflow_dispatch:

env:
  CYPRESS_VERIFY_TIMEOUT: 120000
  GH_PAGES_OWNER: blackbaud
  PERCY_BROWSER_EXECUTABLE: /usr/bin/chromium
  PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
  SB_CHROMIUM_PATH: /usr/bin/chromium

jobs:
  install-deps:
    name: Install and cache dependencies
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name || github.event.ref }}
      cancel-in-progress: true
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}
      parameters: ${{ steps.parameters.outputs.parameters }}
      workflow_dispatch_pr_number: ${{ steps.parameters.outputs.workflow_dispatch_pr_number }}
      workflow_dispatch_pr_head_sha: ${{ steps.parameters.outputs.workflow_dispatch_pr_head_sha }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name || github.event.ref }}
      - uses: actions/setup-node@v3
        id: setup-node
        with:
          node-version-file: '.nvmrc'
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: npm install
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
      - name: Set workflow parameters
        id: parameters
        shell: bash
        run: |
          set -exo pipefail
          echo -n parameters= >> $GITHUB_OUTPUT
          if [ "${GITHUB_EVENT_NAME}" == "pull_request_target" ]; then
            npx skyux-dev e2e-workflow --workflowTrigger pull_request --pr ${{ github.event.number }} >> $GITHUB_OUTPUT
          elif [ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]; then
            # If the workflow was triggered manually, find the PR number and head SHA.
            gh pr list -H "${GITHUB_REF_NAME}" --json number,headRefOid > ${{ runner.temp }}/pr-list.json

            # If there are multiple PRs, use the first one. If there are no PRs, return an empty string.
            PR_NUMBER=$(jq -r 'if (.[] | length) > 0 then (.[0].number | tonumber) else "" end' ${{ runner.temp }}/pr-list.json)

            if [ -n "${PR_NUMBER}" ]; then
              npx skyux-dev e2e-workflow --workflowTrigger pull_request --pr $PR_NUMBER >> $GITHUB_OUTPUT
              echo workflow_dispatch_pr_number=${PR_NUMBER} >> $GITHUB_OUTPUT
              echo workflow_dispatch_pr_head_sha=$(jq -r '.[0].headRefOid' ${{ runner.temp }}/pr-list.json) >> $GITHUB_OUTPUT
            else
              echo "Unable to find an open PR for branch ${GITHUB_REF_NAME}"
              exit 1
            fi
          else
            npx skyux-dev e2e-workflow >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{secrets.GH_PERSONAL_ACCESS_TOKEN}}
      - name: Show workflow parameters
        run: |
          echo 'Using workflow parameters:'
          echo ''
          echo '${{ steps.parameters.outputs.parameters }}' | jq

  build-storybook:
    name: Build Project Storybook
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}--${{ matrix.project }}-${{ github.head_ref || github.ref_name || github.event.ref }}
      cancel-in-progress: true
    needs: install-deps
    strategy:
      # If one build fails, do not cancel other builds.
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.install-deps.outputs.parameters).projects }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name || github.event.ref }}
        if: ${{ matrix.project != 'skip' }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
        if: ${{ matrix.project != 'skip' }}
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
        if: ${{ matrix.project != 'skip' }}
      - name: Retrieve dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
        if: ${{ matrix.project != 'skip' }}
      - name: Build ${{ matrix.project }}
        run: npx nx run ${{ matrix.project }}:build-storybook:ci
        if: ${{ matrix.project != 'skip' }}
      - name: Upload storybook artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}
          path: ./dist/storybook/${{ matrix.project }}
          retention-days: 1
          if-no-files-found: error
        if: ${{ matrix.project != 'skip' }}
      - name: Skip
        run: |
          echo 'No storybook to build'
        if: ${{ matrix.project == 'skip' }}

  build-apps:
    name: Build Apps
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}--${{ matrix.app }}-${{ github.head_ref || github.ref_name || github.event.ref }}
      cancel-in-progress: true
    needs: install-deps
    strategy:
      # If one build fails, do not cancel other builds.
      fail-fast: false
      matrix:
        app:
          - code-examples
          - dep-graph
          - integration
          - playground
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name || github.event.ref }}
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' }}
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' }}
      - name: Retrieve dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' }}
      - name: Build ${{ matrix.app }}
        run: |
          npx nx build ${{ matrix.app }} --baseHref="https://blackbaud.github.io/skyux-pr-preview/${{ github.event.number }}/${{ matrix.app }}/"
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' && matrix.app != 'dep-graph' }}
      - name: Build ${{ matrix.app }}
        run: npx nx dep-graph --file=dist/apps/dep-graph/index.html
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' && matrix.app == 'dep-graph' }}
      - name: Upload app artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}
          path: ./dist/apps/${{ matrix.app }}
          retention-days: 1
          if-no-files-found: error
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' }}
      - name: Skip
        run: echo "Skip building ${{ matrix.app }} app. Only Storybook is published on branch builds."
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo != 'skyux-pr-preview' }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name || github.event.ref }}
      cancel-in-progress: true
    needs:
      - install-deps
      - build-storybook
      - build-apps
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name || github.event.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Retrieve dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./dist/${{ fromJson(needs.install-deps.outputs.parameters).storybooksPath }}
      - name: Move apps
        # All the artifacts are downloaded into one folder, so we need to move them into the correct folders.
        if: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo == 'skyux-pr-preview' }}
        # Setting the shell so this step can run as-is on Windows or Linux.
        shell: bash
        run: |
          mkdir -p ./dist/apps
          for app in code-examples dep-graph integration playground
          do
            mv ./dist/${{ fromJson(needs.install-deps.outputs.parameters).storybooksPath }}${app} ./dist/apps/$app
          done
      - name: Generate Storybook Composition
        shell: bash
        run: |
          npx nx g @skyux-sdk/e2e-schematics:storybook-composition \
            --projectsJson='${{ fromJson(needs.install-deps.outputs.parameters).projectsJson }}' \
            --baseUrl='../${{ fromJson(needs.install-deps.outputs.parameters).storybooksPath }}'
      - name: Build Storybook Composition
        run: npx nx run storybook:build-storybook:ci --outputDir=dist/storybook
      - name: Checkout ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo }}
        uses: actions/checkout@v3
        with:
          repository: ${{ env.GH_PAGES_OWNER }}/${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo }}
          ref: 'main'
          fetch-depth: 1
          path: ${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo }}
          token: ${{secrets.GH_PERSONAL_ACCESS_TOKEN}}
      - name: Publish preview and comment on PR
        run: |
          npx skyux-dev publish-storybook \
            --workingDirectory=${{ fromJson(needs.install-deps.outputs.parameters).ghPagesRepo }} \
            --pr=${{ needs.install-deps.outputs.workflow_dispatch_pr_number || github.event.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  e2e:
    name: End to end tests
    runs-on: ubuntu-latest
    # Baseline branches should complete the E2E jobs so Percy does not get stuck https://www.browserstack.com/question/61332
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}--${{ matrix.project }}-${{ github.head_ref || format('{0}-{1}', github.run_id, github.run_attempt) }}
      cancel-in-progress: true
    needs: install-deps
    if: ${{ fromJSON(needs.install-deps.outputs.parameters).e2eTargets }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.install-deps.outputs.parameters).e2eTargets }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name || github.event.ref }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Retrieve dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Verify Cypress
        run: npx cypress verify
      - name: Percy ${{ matrix.project }}
        uses: actions/github-script@v6
        with:
          script: |
            // Timing setting recommended by https://docs.percy.io/docs/cypress#missing-assets
            const percyCommand = 'npx percy exec -t 350 -- nx e2e ${{ matrix.project }} --skip-nx-cache';
            await exec.getExecOutput('bash', ['-c', percyCommand], { ignoreReturnCode: true })
              .then((result) => {
                if (result.exitCode !== 0) {
                  if (
                    result.stderr.includes('This is likely a client error') ||
                    result.stderr.includes('Error: Can only finalize pending builds')
                  ) {
                    console.info('Percy client error. Retrying...');
                    return exec.exec('bash', ['-c', percyCommand]);
                  } else {
                    core.setFailed(`Percy failed with exit code ${result.exitCode}`);
                  }
                }
              });
        env:
          PERCY_TOKEN: ${{ secrets[matrix.token] }}
          TERM: 'xterm-256color'
      - name: Upload error screenshots
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: cypress-screenshots-${{ matrix.project }}
          path: ./dist/cypress/${{ matrix.root }}/screenshots
          retention-days: 4
      - name: Notify Slack (failure)
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'fail'
          SLACK_MESSAGE: 'E2E job `${{ matrix.project }}` failed on `${{ github.head_ref || github.ref_name }}` branch, details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          SLACK_ICON_EMOJI: ':github:'
          SLACK_USERNAME: GitHub
          #cor-skyux-notifications
          SLACK_CHANNEL: C01GY7ZP4HM
          SLACK_FOOTER: 'Blackbaud Sky Build User'

  verify:
    name: E2E Visual Review
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name || github.event.ref }}
      cancel-in-progress: true
    needs:
      - install-deps
      - e2e
      - publish
    steps:
      - uses: actions/github-script@v6
        name: Verify E2E Visual Review
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |

            const e2eProjects = ${{ needs.install-deps.outputs.parameters }}.e2eTargets.map(project => project.project);

            if (e2eProjects.length > 0) {

              // Verify that Percy has finished processing the E2E Visual Review and that all snapshots have passed.
              const params = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "${{ needs.install-deps.outputs.workflow_dispatch_pr_head_sha }}" || context.payload.after || context.payload.pull_request.head.sha,
                per_page: 100
              };
              const { data: statuses } = await github.rest.repos.listCommitStatusesForRef(params);
              const percyStatuses = statuses.filter((status, idx) => status.context.toLowerCase().startsWith('percy/'));
              const percyStatusContexts = percyStatuses.map(status => status.context.toLowerCase());

              // Only use the latest status for each E2E Visual Review.
              const latestPercyStatuses = percyStatuses.filter((status, index) => percyStatusContexts.indexOf(status.context.toLowerCase()) === index);

              // Log the status of each E2E Visual Review.
              latestPercyStatuses
                .forEach(status => {
                  let icon;
                  switch (status.state) {
                    case 'success':
                      icon = '✅';
                      break;
                    case 'pending':
                      icon = '⏳';
                      break;
                    case 'failure':
                      icon = '❌';
                      break;
                    default:
                      icon = '❓';
                  }
                  console.log(`${icon} ${status.context}`);
                });

              if (latestPercyStatuses.length === e2eProjects.length) {

                // We have a check from Percy for all E2E Visual Reviews.
                if (latestPercyStatuses.some(status => status.state !== 'success')) {
                  core.setFailed(`E2E Visual Review not complete.`);
                } else {
                  console.log('E2E Visual Review passed!');
                }

              } else {

                // We don't have a check from Percy for all E2E projects.
                const percyProjects = latestPercyStatuses.map(status => status.context.replace(/^percy\/skyux-/, ''));
                const missingProjects = e2eProjects.filter(project => !percyProjects.includes(project));
                core.setFailed(`E2E Visual Review not complete. Missing results for: ${missingProjects.join(', ')}`);

              }
            } else {
              core.info('No E2E Visual Review to verify.');
            }
