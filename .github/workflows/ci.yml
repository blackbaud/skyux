name: CI

on:
  merge_group:
    types: [checks_requested]
  pull_request:
  push:
    branches:
      - main

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

jobs:
  install-deps:
    name: Install and cache dependencies
    if: ${{ !startsWith( github.head_ref || github.ref_name, 'release-please--' ) }}
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}
      npm-projects: ${{ steps.projects.outputs.npm-projects }}
      non-npm-projects: ${{ steps.projects.outputs.npm-projects }}
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v4
        id: setup-node
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: npm install
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Capture projects
        id: projects
        run: |
          echo "npm-projects=$(npx nx show projects --affected --exclude='*,!tag:npm' --json) >> $GITHUB_OUTPUT"
          echo "non-npm-projects=$(npx nx show projects --affected --exclude='tag:npm' --json) >> $GITHUB_OUTPUT"
      - name: NPM projects
        run: |
          npx nx show projects --affected --exclude='*,!tag:npm' --json | jq .
      - name: Non-NPM projects
        run: |
          npx nx show projects --affected --exclude='tag:npm' --json | jq .

  npm-packages:
    name: NPM packages
    needs: install-deps
    runs-on: ubuntu-latest
    strategy:
      # If one build fails, do not cancel other builds.
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.install-deps.outputs.npm-projects) }}
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
      - name: Retrieve node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Run build, lint, test, and posttest
        run: npx nx run-many --target build lint test posttest --configuration ci --projects ${{ matrix.project }}

  non-npm-projects:
    name: Non-NPM packages
    needs: install-deps
    runs-on: ubuntu-latest
    strategy:
      # If one build fails, do not cancel other builds.
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.install-deps.outputs.non-npm-projects) }}
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
      - name: Retrieve node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Run lint, test, and posttest
        run: npx nx run-many --target lint test posttest --configuration ci --projects ${{ matrix.project }}

  build:
    name: Build
    needs: [non-npm-projects, npm-packages]
    runs-on: ubuntu-latest
    steps:
      - name: Run build
        run: echo Built.

  coverage:
    name: Code coverage
    needs: [non-npm-projects, npm-packages]
    runs-on: ubuntu-latest
    steps:
      - name: Run code coverage
        run: echo Code coverage.

  lint:
    name: Lint
    needs: [non-npm-projects, npm-packages]
    runs-on: ubuntu-latest
    steps:
      - name: Run lint
        run: echo Linted.

  check-workspace:
    name: Check dependencies and resources
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Retrieve node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Check library dependencies
        run: npx skyux-dev check-lib-dependencies
      - name: Check library missing peers
        run: npx skyux-dev check-lib-missing-peers
      - name: Check library resources
        run: npx skyux-dev check-lib-resources

  format:
    name: Check formatting
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
      - name: Retrieve node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Check code formatting
        run: npx nx format:check

  build-dist:
    name: Build packages distribution
    needs: install-deps
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Retrieve node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Build packages dist
        run: npx skyux-dev create-packages-dist --skipNxCache
      - name: Notify Slack (failure)
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'Build packages distribution step failed on branch `${{ github.ref_name }}`.'
          SLACK_ICON_EMOJI: ':github:'
          SLACK_USERNAME: GitHub
          #cor-skyux-notifications
          SLACK_CHANNEL: C01GY7ZP4HM
          SLACK_FOOTER: 'Blackbaud Sky Build User'
