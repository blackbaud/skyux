name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true

jobs:
  install-deps:
    name: Install and cache dependencies
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v3
        id: setup-node
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Cache node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ steps.setup-node.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: npm install
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Start Nx Cloud CI run
        run: npx nx-cloud start-ci-run

  agents:
    name: Bootup Nx Cloud agent
    runs-on: ubuntu-latest
    needs: install-deps
    strategy:
      matrix:
        agent:
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
          ]
    steps:
      - uses: actions/checkout@v3
      - name: Retrieve node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      # Running ngcc after each agent is created to address the "ngcc is already running error".
      # Since we're running multiple builds in parallel, we need to pre-process our node_modules before starting the builds.
      - name: Run NGCC
        run: npx ngcc
      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent

  lint:
    name: Lint
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
      - name: Retrieve node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Check library dependencies
        run: npx skyux-dev check-lib-dependencies
      - name: Check library missing peers
        run: npx skyux-dev check-lib-missing-peers
      - name: Check library resources
        run: npx skyux-dev check-lib-resources
      - name: Check code formatting
        run: npx prettier --check .
      - name: Run lint
        run: npx nx affected:lint --quiet --silent --parallel=3

  build:
    name: Build
    needs: install-deps
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
      - name: Retrieve node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Run NGCC
        run: npx ngcc
      - name: Build
        run: npx nx affected --target=build --parallel=3

  build-dist:
    name: Build packages distribution
    needs: install-deps
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Retrieve node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Build packages dist
        run: npx skyux-dev create-packages-dist

  coverage:
    name: Code coverage
    needs: install-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      # Rebase must happen before installing dependencies.
      - name: Rebase current branch
        run: node ./scripts/rebase-pr.js
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v3
      - name: Retrieve node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Run NGCC
        run: npx ngcc
      - name: Code coverage
        run: |
          npx nx affected --target=test --browsers=ChromeHeadlessNoSandbox --code-coverage --parallel=3 --progress=false --source-map --watch=false
          npx nx affected --target=posttest --browsers=ChromeHeadlessNoSandbox --parallel=3 --watch=false

  stop-agents:
    name: Stop Nx Cloud agents
    runs-on: ubuntu-latest
    if: always()
    needs: [install-deps, lint, build, build-dist, coverage]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Retrieve node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ needs.install-deps.outputs.node-version }}-modules-${{ hashFiles('package-lock.json') }}
      - name: Stop Nx Cloud agents
        run: npx nx-cloud stop-all-agents
