name: Release Please
on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
      - '[0-9]+.x.x'
env:
  # Set to 'alpha', 'beta', or 'rc' to create a prerelease.
  PRERELEASE: 'beta'
  MAJOR_VERSION: 13
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Next release
        if: ${{ env.PRERELEASE != 'false' }}
        id: next-release
        shell: pwsh
        run: |
          $validOptions = @("alpha", "beta", "rc")
          if (-not $validOptions.Contains("${{ env.PRERELEASE }}")) {
              Write-Error "Invalid PRERELEASE value. Must be 'alpha', 'beta', or 'rc'."
              exit 1
          }

          # Get the current prerelease version.
          $ACC="Accept: application/vnd.github+json"
          $VER="X-GitHub-Api-Version: 2022-11-28"
          $JSON='map(.tag_name) | [.[] | select(startswith("${{ env.MAJOR_VERSION }}.")) ] | .[0] // empty'
          $CURRENT_RELEASE=$(gh api -H "${ACC}" -H "${VER}" /repos/${{ github.repository }}/releases | jq -r "${JSON}")

          # Bump the prerelease version.
          if ( -not "$CURRENT_RELEASE" -or "$CURRENT_RELEASE" -notlike "${{ env.MAJOR_VERSION }}.0.0-${{ env.PRERELEASE }}.*" ) {
            NEXT_VERSION="${{ env.MAJOR_VERSION }}.0.0-${{ env.PRERELEASE }}.0"
          } else {
            NEXT_VERSION=$(npx --yes semver -i prerelease $CURRENT_RELEASE)
          }

          # If version is empty, exit.
          if ( -not "$NEXT_VERSION" ) {
            echo "Not able to determine prerelease version."
            exit 1
          }

          echo "Next release version: $NEXT_VERSION"

          $configFilePath = "release-please-config.json"
          $configFile = Get-Content $configFilePath -Raw | ConvertFrom-Json
          $configFile["release-as"] = "$NEXT_VERSION"
          $configFile.prerelease = $True
          $configFile | ConvertTo-Json -Depth 10 | Set-Content $configFilePath
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: node
          target-branch: '${{ github.ref_name }}'
          token: '${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}'
      - uses: actions/checkout@v4
        with:
          token: '${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}'
      - uses: actions/setup-node@v4
        id: setup-node
        with:
          cache: 'npm'
          node-version-file: '.nvmrc'
      # Workaround to avoid "Post Run actions/setup-node" failures.
      # See: https://github.com/actions/setup-node/issues/317
      - name: Ensure cache directory exists
        if: ${{ !steps.release.outputs.release_created }}
        run: mkdir -p /home/runner/.npm
        continue-on-error: true
      - name: npm install
        if: ${{ steps.release.outputs.release_created }}
        run: npm ci
      - name: Build
        if: ${{ steps.release.outputs.release_created }}
        run: npx skyux-dev create-packages-dist --skipNxCache
      - name: Publish
        if: ${{ steps.release.outputs.release_created }}
        run: npx skyux-dev publish-packages-dist
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Capture logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: npm-logs
          path: /home/runner/.npm/_logs
          retention-days: 3
      - name: Notify Slack (success)
        if: ${{ steps.release.outputs.release_created }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Successfully published SKY UX ${{ steps.release.outputs.tag_name }} to NPM. http://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md
          SLACK_ICON: https://github.com/blackbaud.png?size=48
          SLACK_USERNAME: SKY UX
      - name: Notify Slack (failure)
        if: ${{ failure() && steps.release.outputs.release_created }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Failed to publish SKY UX ${{ steps.release.outputs.tag_name }} to NPM!
          SLACK_ICON: https://github.com/blackbaud.png?size=48
          SLACK_USERNAME: SKY UX
      - name: Notify Slack (failure, non-release)
        if: ${{ failure() && !steps.release.outputs.release_created }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Failed when preparing SKY UX release!
          SLACK_ICON: https://github.com/blackbaud.png?size=48
          SLACK_USERNAME: SKY UX
          #cor-skyux-notifications
          SLACK_CHANNEL: C01GY7ZP4HM
