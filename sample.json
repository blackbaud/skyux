{
  "packages": {
    "@skyux/list-builder-view-checklist": [
      {
        "anchorId": "class_sky-list-view-checklist-item-component",
        "children": [
          {
            "kind": "directive-input",
            "name": "item",
            "type": "ListViewChecklistItemModel"
          }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/list-view-checklist-item.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListViewChecklistItemComponent",
        "selector": "sky-list-view-checklist-item"
      },
      {
        "anchorId": "class_sky-list-view-checklist-component",
        "children": [
          {
            "description": "The name of the description field selector.",
            "defaultValue": "\"description\"",
            "kind": "directive-input",
            "name": "description",
            "type": "string"
          },
          {
            "description": "The name of the label field selector.",
            "defaultValue": "\"label\"",
            "kind": "directive-input",
            "name": "labelFieldSelector",
            "type": "string"
          },
          {
            "description": "The search function to apply on the view data. The default function searches view data on label, description, and category if field selectors are defined for the given field.",
            "defaultValue": "default search function",
            "kind": "directive-input",
            "name": "search",
            "type": "Function"
          },
          {
            "description": "The name of the view.",
            "kind": "directive-input",
            "name": "name",
            "type": "void",
            "isRequired": true
          },
          {
            "description": "How many items users can select. `\"single\"` allows users to select one item in the checklist, while `\"multiple\"` allows users to select multiple items in the checklist.",
            "defaultValue": "\"multiple\"",
            "kind": "directive-input",
            "name": "selectMode",
            "type": "string"
          },
          {
            "description": "Whether to display selected items only.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showOnlySelected",
            "type": "boolean"
          }
        ],
        "deprecationReason": "List builder view checklist and its features are deprecated. Use repeater instead. For more information, see https://developer.blackbaud.com/skyux/components/repeater.",
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/list-view-checklist.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListViewChecklistComponent",
        "selector": "sky-list-view-checklist"
      },
      {
        "anchorId": "class_sky-list-view-checklist-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListViewChecklistModule"
          }
        ],
        "deprecationReason": "List builder view checklist and its features are deprecated. Use repeater instead. For more information, see https://developer.blackbaud.com/skyux/components/repeater.",
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/list-view-checklist.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListViewChecklistModule"
      },
      {
        "anchorId": "type-alias_checklist-state-action",
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/checklist-state-action.type.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "ChecklistStateAction",
        "type": "ListViewChecklistItemsLoadAction"
      },
      {
        "anchorId": "class_checklist-state-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ChecklistStateModel"
          },
          {
            "kind": "class-property",
            "name": "items",
            "type": "AsyncList<ListViewChecklistItemModel>"
          }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/checklist-state.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ChecklistStateModel"
      },
      {
        "anchorId": "class_checklist-state-dispatcher",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ChecklistStateDispatcher"
          }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/checklist-state.rxstate.ts",
        "isDeprecated": true,
        "kind": "service",
        "name": "ChecklistStateDispatcher"
      },
      {
        "anchorId": "class_checklist-state-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ChecklistStateOrchestrator<T>"
          }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/checklist-state.rxstate.ts",
        "kind": "class",
        "name": "ChecklistStateOrchestrator",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "class_checklist-state",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ChecklistState"
          }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/checklist-state.state-node.ts",
        "isDeprecated": true,
        "kind": "service",
        "name": "ChecklistState"
      },
      {
        "anchorId": "class_list-view-checklist-item-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewChecklistItemModel"
          },
          { "kind": "class-property", "name": "description", "type": "string" },
          { "kind": "class-property", "name": "id", "type": "string" },
          { "kind": "class-property", "name": "label", "type": "string" }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/items/item.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListViewChecklistItemModel"
      },
      {
        "anchorId": "class_list-view-checklist-items-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewChecklistItemsOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/items/items.orchestrator.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListViewChecklistItemsOrchestrator"
      },
      {
        "anchorId": "class_list-view-checklist-items-load-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewChecklistItemsLoadAction"
          },
          {
            "defaultValue": "true",
            "kind": "class-property",
            "name": "dataChanged",
            "type": "boolean"
          },
          {
            "defaultValue": "items.length",
            "kind": "class-property",
            "name": "itemCount",
            "type": "number"
          },
          {
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "items",
            "type": "ListViewChecklistItemModel[]"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "refresh",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder-view-checklist/src/lib/modules/list-view-checklist/state/items/load.action.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListViewChecklistItemsLoadAction"
      }
    ],
    "@skyux/list-builder-view-checklist/testing": [
      {
        "anchorId": "class_sky-list-view-checklist-fixture",
        "children": [
          {
            "description": "Deselects the item at the specified index.",
            "kind": "class-method",
            "name": "deselectItem",
            "parameters": [
              {
                "description": "The item's index.",
                "name": "index",
                "type": "number"
              }
            ],
            "type": "void"
          },
          {
            "description": "Gets an item at the specified index.",
            "kind": "class-method",
            "name": "getItem",
            "parameters": [
              {
                "description": "The item's index.",
                "name": "index",
                "type": "number"
              }
            ],
            "type": "SkyListViewChecklistItem"
          },
          {
            "description": "Selects the item at the specified index.",
            "kind": "class-method",
            "name": "selectItem",
            "parameters": [
              {
                "description": "The item's index.",
                "name": "index",
                "type": "number"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListViewChecklistFixture"
          },
          {
            "description": "Deselects the item at the specified index.",
            "kind": "class-property",
            "name": "deselectItem",
            "type": "void"
          },
          {
            "description": "Gets an item at the specified index.",
            "kind": "class-property",
            "name": "getItem",
            "type": "SkyListViewChecklistItem"
          },
          {
            "description": "Selects the item at the specified index.",
            "kind": "class-property",
            "name": "selectItem",
            "type": "void"
          }
        ],
        "description": "Allows interaction with a SKY UX list view checklist component.",
        "filePath": "libs/components/list-builder-view-checklist/testing/src/legacy/list-view-checklist-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyListViewChecklistFixture"
      },
      {
        "anchorId": "interface_sky-list-view-checklist-item",
        "children": [
          {
            "description": "The item's description.",
            "kind": "interface-property",
            "name": "description",
            "type": "string"
          },
          {
            "description": "The item's label.",
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "A flag indicating whether the item is selected.",
            "kind": "interface-property",
            "name": "selected",
            "type": "boolean"
          }
        ],
        "description": "Properties of a list view checklist item.",
        "filePath": "libs/components/list-builder-view-checklist/testing/src/legacy/list-view-checklist-item.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyListViewChecklistItem"
      }
    ],
    "@skyux/list-builder-view-grids": [
      {
        "anchorId": "class_sky-column-selector-context",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColumnSelectorContext"
          },
          {
            "kind": "class-property",
            "name": "columns",
            "type": "SkyColumnSelectorModel[]"
          },
          {
            "kind": "class-property",
            "name": "selectedColumnIds",
            "type": "string[]"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/column-selector/column-selector-context.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "SkyColumnSelectorContext"
      },
      {
        "anchorId": "class_sky-column-selector-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColumnSelectorModel"
          },
          { "kind": "class-property", "name": "description", "type": "string" },
          { "kind": "class-property", "name": "heading", "type": "string" },
          { "kind": "class-property", "name": "id", "type": "string" }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/column-selector/column-selector-context.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "SkyColumnSelectorModel"
      },
      {
        "anchorId": "class_sky-column-selector-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColumnSelectorModule"
          }
        ],
        "deprecationReason": "List builder view grid and its features are deprecated. Use data entry grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-entry-grid.",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/column-selector/column-selector-modal.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyColumnSelectorModule"
      },
      {
        "anchorId": "class_sky-list-column-selector-action-component",
        "children": [
          {
            "description": "Enables the column selector in the list toolbar. Set this attribute to the instance of the `sky-grid-view` component using the component's template reference variable.",
            "kind": "directive-input",
            "name": "gridView",
            "type": "SkyListViewGridComponent"
          },
          {
            "description": "The `helpKey` string to associate with a help button in the grid header. When users select the button, the `helpOpened` event broadcasts the `helpKey` parameter.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "string"
          },
          {
            "description": "Fires when users click the help button and broadcasts the `helpKey`.",
            "kind": "directive-output",
            "name": "helpOpened",
            "type": "EventEmitter<string>"
          }
        ],
        "description": "Provides a column selector modal for a list grid view when placed in a [list toolbar](https://developer.blackbaud.com/skyux/components/list/toolbar).",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-column-selector-action/list-column-selector-action.component.ts",
        "kind": "component",
        "name": "SkyListColumnSelectorActionComponent",
        "selector": "sky-list-column-selector-action"
      },
      {
        "anchorId": "class_sky-list-column-selector-action-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListColumnSelectorActionModule"
          }
        ],
        "deprecationReason": "List builder view grid and its features are deprecated. Use data entry grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-entry-grid.",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-column-selector-action/list-column-selector-action.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListColumnSelectorActionModule"
      },
      {
        "anchorId": "class_sky-list-view-grid-component",
        "children": [
          {
            "description": "The columns to display by default based on the ID or field of the item.",
            "kind": "directive-input",
            "name": "displayedColumns",
            "type": "string[] | Observable<string[]>"
          },
          {
            "description": "Whether to enable the multiselect feature to display a column of checkboxes on the left side of the grid. Multiselect also displays an action bar with buttons to select and clear all checkboxes. Multiselect defaults to the `id` property on the list's `data` object.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "enableMultiselect",
            "type": "boolean"
          },
          {
            "description": "How the grid fits to its parent. `\"width\"` fits the grid to the parent's full width, and `\"scroll\"` allows the grid to exceed the parent's width. If the grid does not have enough columns to fill the parent's width, it always stretches to the parent's full width.",
            "defaultValue": "\"width\"",
            "kind": "directive-input",
            "name": "fit",
            "type": "string"
          },
          {
            "description": "The height of the grid.",
            "kind": "directive-input",
            "name": "height",
            "type": "number | Observable<number>"
          },
          {
            "description": "The columns to hide by default based on the ID or field of the item.",
            "kind": "directive-input",
            "name": "hiddenColumns",
            "type": "string[] | Observable<string[]>"
          },
          {
            "description": "Whether to highlight search text within the grid.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "highlightSearchText",
            "type": "boolean"
          },
          {
            "description": "The ID of the row to highlight. The ID matches the `id` property of the `data` object. Typically, this property is used in conjunction with the [flyout component](https://developer.blackbaud.com/skyux/components/flyout) to indicate the currently selected row.",
            "kind": "directive-input",
            "name": "rowHighlightedId",
            "type": "string"
          },
          {
            "description": "The search function to apply on the view data.",
            "kind": "directive-input",
            "name": "searchFunction",
            "type": "Function"
          },
          {
            "description": "The unique key for the UI Config Service that retrieves stored settings from a database. The service saves configuration settings for users and returns `selectedColumnIds` for the columns to display and the preferred column order. For more information, see the [sticky settings documentation](https://developer.blackbaud.com/skyux/learn/get-started/advanced/sticky-settings).",
            "kind": "directive-input",
            "name": "settingsKey",
            "type": "string"
          },
          {
            "description": "The width of the grid.",
            "kind": "directive-input",
            "name": "width",
            "type": "number | Observable<number>"
          },
          {
            "description": "The observable to send commands to the grid. The commands should respect the `SkyListViewGridMessage` type.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkyListViewGridMessage>"
          },
          {
            "description": "The name of the view.",
            "kind": "directive-input",
            "name": "name",
            "type": "void",
            "isRequired": true
          },
          {
            "description": "Fires when users cancel the deletion of a row.",
            "kind": "directive-output",
            "name": "rowDeleteCancel",
            "type": "EventEmitter<SkyListViewGridRowDeleteCancelArgs>"
          },
          {
            "description": "Fires when users confirm the deletion of a row.",
            "kind": "directive-output",
            "name": "rowDeleteConfirm",
            "type": "EventEmitter<SkyListViewGridRowDeleteConfirmArgs>"
          },
          {
            "description": "Fires when columns change. This includes changes to the displayed columns and changes to the order of columns. The event emits an array of IDs for the displayed columns that reflects the column order.",
            "kind": "directive-output",
            "name": "selectedColumnIdsChange",
            "type": "EventEmitter<string[]>"
          }
        ],
        "deprecationReason": "List builder view grid and its features are deprecated. Use data entry grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-entry-grid.",
        "description": "Displays a grid for a [SKY UX-themed list of data](https://developer.blackbaud.com/skyux/components/list/overview) using the [grid component](https://developer.blackbaud.com/skyux/components/grid). You must install `SkyListModule` as a dependency.",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/list-view-grid.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListViewGridComponent",
        "selector": "sky-list-view-grid"
      },
      {
        "anchorId": "class_sky-list-view-grid-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListViewGridModule"
          }
        ],
        "deprecationReason": "List builder view grid and its features are deprecated. Use data entry grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-entry-grid.",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/list-view-grid.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListViewGridModule"
      },
      {
        "anchorId": "class_list-view-grid-columns-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewGridColumnsOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/columns/columns.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewGridColumnsOrchestrator"
      },
      {
        "anchorId": "class_list-view-grid-columns-load-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewGridColumnsLoadAction"
          },
          {
            "kind": "class-property",
            "name": "columns",
            "type": "SkyGridColumnModel[]"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "refresh",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/columns/load.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewGridColumnsLoadAction"
      },
      {
        "anchorId": "class_list-view-displayed-grid-columns-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewDisplayedGridColumnsOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/displayed-columns/displayed-columns.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewDisplayedGridColumnsOrchestrator"
      },
      {
        "anchorId": "class_list-view-displayed-grid-columns-load-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewDisplayedGridColumnsLoadAction"
          },
          {
            "kind": "class-property",
            "name": "columns",
            "type": "SkyGridColumnModel[]"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "refresh",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/displayed-columns/load.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewDisplayedGridColumnsLoadAction"
      },
      {
        "anchorId": "type-alias_grid-state-action",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/grid-state-action.type.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "type-alias",
        "name": "GridStateAction",
        "type": "ListViewGridColumnsLoadAction"
      },
      {
        "anchorId": "class_grid-state-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "GridStateModel"
          },
          {
            "kind": "class-property",
            "name": "columns",
            "type": "AsyncList<SkyGridColumnModel>"
          },
          {
            "kind": "class-property",
            "name": "displayedColumns",
            "type": "AsyncList<SkyGridColumnModel>"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/grid-state.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "GridStateModel"
      },
      {
        "anchorId": "class_grid-state-dispatcher",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "GridStateDispatcher"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/grid-state.rxstate.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "GridStateDispatcher"
      },
      {
        "anchorId": "class_grid-state-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "GridStateOrchestrator<T>"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/grid-state.rxstate.ts",
        "isInternal": true,
        "kind": "class",
        "name": "GridStateOrchestrator",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "class_grid-state",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "GridState"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/state/grid-state.state-node.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "GridState"
      },
      {
        "anchorId": "enum_sky-list-view-grid-message-type",
        "description": "The command for the list view grid to respond to.",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/types/list-view-grid-message-type.ts",
        "isDeprecated": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "Cancels the deletion of a row in the list view grid.",
            "kind": "enum-member",
            "name": "AbortDeleteRow",
            "type": "1"
          },
          {
            "description": "Deletes of a row in the list view grid.",
            "kind": "enum-member",
            "name": "PromptDeleteRow",
            "type": "0"
          }
        ],
        "name": "SkyListViewGridMessageType"
      },
      {
        "anchorId": "interface_sky-list-view-grid-message",
        "children": [
          {
            "description": "The data required to carry out the command.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "Object"
          },
          {
            "description": "The type of message to send.",
            "kind": "interface-property",
            "name": "type",
            "type": "SkyListViewGridMessageType"
          }
        ],
        "description": "Communicates commands to the list view grid.",
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/types/list-view-grid-message.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyListViewGridMessage"
      },
      {
        "anchorId": "interface_sky-list-view-grid-row-delete-cancel-args",
        "children": [
          {
            "description": "The ID of the row where the Cancel button was clicked to cancel deleting the row.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/types/list-view-grid-row-delete-cancel-args.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyListViewGridRowDeleteCancelArgs"
      },
      {
        "anchorId": "interface_sky-list-view-grid-row-delete-confirm-args",
        "children": [
          {
            "description": "The ID of the row where the Confirm button was clicked to delete the row.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          }
        ],
        "filePath": "libs/components/list-builder-view-grids/src/lib/modules/list-view-grid/types/list-view-grid-row-delete-confirm-args.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyListViewGridRowDeleteConfirmArgs"
      }
    ],
    "@skyux/list-builder-view-grids/testing": [
      {
        "anchorId": "interface_sky-list-view-grid-fixture-cell",
        "children": [
          {
            "description": "The cell's DebugElement.  This is useful for validating HTML inside the cell when the grid column has a template associated with it.",
            "kind": "interface-property",
            "name": "el",
            "type": "DebugElement"
          },
          {
            "description": "The text content of the cell.  Use this to validate simple columns bound directly to a field without the use of a column template.",
            "kind": "interface-property",
            "name": "textContent",
            "type": "string"
          }
        ],
        "description": "Properties of a list view grid cell.",
        "filePath": "libs/components/list-builder-view-grids/testing/src/legacy/list-view-grid-fixture-cell.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyListViewGridFixtureCell"
      },
      {
        "anchorId": "interface_sky-list-view-grid-fixture-header",
        "children": [
          {
            "description": "A flag indicating whether the header is locked.",
            "kind": "interface-property",
            "name": "locked",
            "type": "boolean"
          },
          {
            "description": "The text content of the header.",
            "kind": "interface-property",
            "name": "textContent",
            "type": "string"
          }
        ],
        "description": "Properties of a list view grid header.",
        "filePath": "libs/components/list-builder-view-grids/testing/src/legacy/list-view-grid-fixture-header.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyListViewGridFixtureHeader"
      },
      {
        "anchorId": "interface_sky-list-view-grid-fixture-row",
        "children": [
          {
            "kind": "interface-property",
            "name": "cells",
            "type": "SkyListViewGridFixtureCell[]"
          }
        ],
        "description": "Properties of a list view grid row.",
        "filePath": "libs/components/list-builder-view-grids/testing/src/legacy/list-view-grid-fixture-row.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyListViewGridFixtureRow"
      },
      {
        "anchorId": "class_sky-list-view-grid-fixture",
        "children": [
          {
            "description": "Gets the header at the specified index.",
            "kind": "class-method",
            "name": "getHeader",
            "parameters": [
              {
                "description": "The index of the column to which the header belongs.",
                "name": "columnIndex",
                "type": "number"
              }
            ],
            "type": "SkyListViewGridFixtureHeader"
          },
          {
            "kind": "class-method",
            "name": "getHeaderCount",
            "parameters": [],
            "type": "number"
          },
          {
            "description": "Gets the row at the specified index.",
            "kind": "class-method",
            "name": "getRow",
            "parameters": [
              {
                "description": "The row's index.",
                "name": "index",
                "type": "number"
              }
            ],
            "type": "SkyListViewGridFixtureRow"
          },
          {
            "kind": "class-method",
            "name": "getRowCount",
            "parameters": [],
            "type": "number"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListViewGridFixture"
          },
          {
            "description": "Gets the header at the specified index.",
            "kind": "class-property",
            "name": "getHeader",
            "type": "SkyListViewGridFixtureHeader"
          },
          {
            "kind": "class-property",
            "name": "getHeaderCount",
            "type": "number"
          },
          {
            "description": "Gets the row at the specified index.",
            "kind": "class-property",
            "name": "getRow",
            "type": "SkyListViewGridFixtureRow"
          },
          { "kind": "class-property", "name": "getRowCount", "type": "number" }
        ],
        "description": "Allows interaction with a SKY UX list view grid component.",
        "filePath": "libs/components/list-builder-view-grids/testing/src/legacy/list-view-grid-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyListViewGridFixture"
      }
    ],
    "@skyux/angular-tree-component": [
      {
        "anchorId": "class_sky-angular-tree-node-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the tree node label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the tree node. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The `index` property from the parent `ng-template`.",
            "kind": "directive-input",
            "name": "index",
            "type": "undefined | number",
            "isRequired": true
          },
          {
            "description": "The `node` property from the parent `ng-template`. For information about the `TreeNode` object, see the [Angular tree component documentation](https://angular2-tree.readme.io/docs/api).",
            "kind": "directive-input",
            "name": "node",
            "type": "undefined | TreeNode",
            "isRequired": true
          },
          {
            "description": "The `templates` property from the parent `ng-template`.",
            "kind": "directive-input",
            "name": "templates",
            "type": "any"
          }
        ],
        "description": "Replaces the default tree node template with a SKY UX node as part of the `SkyAngularTreeModule` that provides SKY UX components and styles to complement the `angular-tree-component` library and apply SKY UX themes and functionality to hierarchical list views. You must wrap this component in an `ng-template` tag with the template reference variable `#treeNodeFullTemplate`. For information about tree node templates, see the [Angular tree component documentation](https://angular2-tree.readme.io/docs/templates). To display context menus with actions for individual items in hierarchical lists, place [dropdowns](https://developer.blackbaud.com/skyux-popovers/docs/dropdown?docs-active-tab=design) inside the Angular tree node component, which automatically handles styling and positioning for context menus.",
        "filePath": "lib/modules/angular-tree/angular-tree-node.component.ts",
        "kind": "component",
        "name": "SkyAngularTreeNodeComponent",
        "selector": "sky-angular-tree-node"
      },
      {
        "anchorId": "class_sky-angular-tree-wrapper-component",
        "children": [
          {
            "description": "Whether to render the tree view in read-only mode. This mode disables selected and active states on the tree view nodes.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "readOnly",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to use leaf-only selection mode. For tree views with [checkboxes](https://angular2-tree.readme.io/docs/tri-state-checkboxes), this mode limits user selections to leaf nodes and prevents users from selecting parent nodes.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "selectLeafNodesOnly",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to use single-select mode. For tree views with [checkboxes](https://angular2-tree.readme.io/docs/tri-state-checkboxes), this mode limits user selections to one node at a time.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "selectSingle",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to display a toolbar with buttons to expand and collapse all nodes and buttons to select and clear all checkboxes. The select and clear buttons only appear when you enable checkboxes. To enable [checkboxes](https://angular2-tree.readme.io/docs/tri-state-checkboxes).",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showToolbar",
            "type": "undefined | boolean"
          }
        ],
        "description": "Wraps the Angular `tree-root` component as part of the `SkyAngularTreeModule` that provides SKY UX components and styles to complement the `angular-tree-component` library and apply SKY UX themes and functionality to hierarchical list views. For information about the `tree-root` component, see the [Angular tree component documentation](https://angular2-tree.readme.io/docs).",
        "filePath": "lib/modules/angular-tree/angular-tree-wrapper.component.ts",
        "kind": "component",
        "name": "SkyAngularTreeWrapperComponent",
        "selector": "sky-angular-tree-wrapper"
      },
      {
        "anchorId": "class_sky-angular-tree-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAngularTreeModule"
          }
        ],
        "filePath": "lib/modules/angular-tree/angular-tree.module.ts",
        "kind": "module",
        "name": "SkyAngularTreeModule"
      }
    ],
    "@skyux/list-builder-common": [
      {
        "anchorId": "function_compare",
        "filePath": "libs/components/list-builder-common/src/lib/helpers.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "function",
        "name": "compare",
        "parameters": [
          { "name": "value1", "type": "any" },
          { "name": "value2", "type": "any" }
        ],
        "type": "-1 | 0 | 1"
      },
      {
        "anchorId": "function_get-data",
        "filePath": "libs/components/list-builder-common/src/lib/helpers.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "function",
        "name": "getData",
        "parameters": [
          { "name": "item", "type": "any" },
          { "name": "selector", "type": "string" }
        ],
        "type": "any"
      },
      {
        "anchorId": "function_is-observable",
        "filePath": "libs/components/list-builder-common/src/lib/helpers.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "function",
        "name": "isObservable",
        "parameters": [{ "name": "obj", "type": "any" }],
        "type": "obj is Observable<T>",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "class_async-item",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "AsyncItem<T>"
          },
          { "kind": "class-property", "name": "item", "type": "T" },
          {
            "defaultValue": "null",
            "kind": "class-property",
            "name": "lastUpdate",
            "type": "any"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "loading",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder-common/src/lib/rxstate/async-item.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "AsyncItem",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "class_async-list",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "AsyncList<T>"
          },
          {
            "defaultValue": "items.length",
            "kind": "class-property",
            "name": "count",
            "type": "number"
          },
          {
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "items",
            "type": "T[]"
          },
          {
            "defaultValue": "null",
            "kind": "class-property",
            "name": "lastUpdate",
            "type": "any"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "loading",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder-common/src/lib/rxstate/async-list.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "AsyncList",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "function_get-value",
        "filePath": "libs/components/list-builder-common/src/lib/rxstate/helpers.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "function",
        "name": "getValue",
        "parameters": [
          { "name": "property", "type": "any" },
          { "name": "callback", "type": "any" }
        ],
        "type": "Observable<any>"
      },
      {
        "anchorId": "class_state-dispatcher",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "StateDispatcher<TAction>"
          }
        ],
        "filePath": "libs/components/list-builder-common/src/lib/rxstate/state-dispatcher.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "StateDispatcher",
        "typeParameters": "<TAction>"
      },
      {
        "anchorId": "class_state-node",
        "children": [
          {
            "kind": "class-method",
            "name": "begin",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "register",
            "parameters": [
              { "name": "stateKey", "type": "string" },
              { "name": "orchestrator", "type": "any" }
            ],
            "type": "StateNode<T>"
          },
          {
            "kind": "class-method",
            "name": "reset",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "StateNode<T>"
          },
          { "kind": "class-property", "name": "begin", "type": "void" },
          {
            "kind": "class-property",
            "name": "register",
            "type": "StateNode<T>"
          },
          { "kind": "class-property", "name": "reset", "type": "void" }
        ],
        "filePath": "libs/components/list-builder-common/src/lib/rxstate/state-node.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "StateNode",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "class_state-orchestrator",
        "children": [
          {
            "kind": "class-method",
            "name": "register",
            "parameters": [
              { "name": "action", "type": "any" },
              { "name": "callback", "type": "Function" }
            ],
            "type": "StateOrchestrator<TStateNode, TAction>"
          },
          {
            "kind": "class-method",
            "name": "scan",
            "parameters": [
              { "name": "initialState", "type": "TStateNode" },
              { "name": "actions", "type": "Observable<TAction>" }
            ],
            "type": "Observable<any>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "StateOrchestrator<TStateNode, TAction>"
          },
          {
            "kind": "class-property",
            "name": "register",
            "type": "StateOrchestrator<TStateNode, TAction>"
          },
          {
            "kind": "class-property",
            "name": "scan",
            "type": "Observable<any>"
          }
        ],
        "filePath": "libs/components/list-builder-common/src/lib/rxstate/state-orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "StateOrchestrator",
        "typeParameters": "<TStateNode, TAction>"
      },
      {
        "anchorId": "class_list-item-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListItemModel"
          },
          {
            "description": "The data for the item in the list.",
            "kind": "class-property",
            "name": "data",
            "type": "any"
          },
          {
            "description": "The ID for the item in the list.",
            "kind": "class-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "Whether the item in the list is selected.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "isSelected",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder-common/src/lib/state/items/item.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListItemModel"
      },
      {
        "anchorId": "class_list-sort-field-selector-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSortFieldSelectorModel"
          },
          {
            "description": "Whether to sort in descending order.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "descending",
            "type": "boolean"
          },
          {
            "description": "The fields to sort.",
            "kind": "class-property",
            "name": "fieldSelector",
            "type": "string"
          }
        ],
        "filePath": "libs/components/list-builder-common/src/lib/state/sort/field-selector.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListSortFieldSelectorModel"
      }
    ],
    "@skyux/progress-indicator": [
      {
        "anchorId": "class_sky-progress-indicator-item-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified along with `title`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the progress indicator item label. Clicking the button invokes global help as configured by the application. This property only applies when `title` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `title`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the progress indicator item label. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `title` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The step label for the step in the progress indicator.",
            "kind": "directive-input",
            "name": "title",
            "type": "undefined | string",
            "isRequired": true
          }
        ],
        "description": "Specifies a step to include in the progress indicator. Each step requires a label, and you can also specify step details within the `sky-progress-indicator-item` element.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/progress-indicator-item/progress-indicator-item.component.ts",
        "kind": "component",
        "name": "SkyProgressIndicatorItemComponent",
        "selector": "sky-progress-indicator-item"
      },
      {
        "anchorId": "class_sky-progress-indicator-nav-button-component",
        "children": [
          {
            "description": "The label to display on the nav button.",
            "defaultValue": "\"Next\"",
            "kind": "directive-input",
            "name": "buttonText",
            "type": "undefined | string"
          },
          {
            "description": "The type of nav button to include.",
            "defaultValue": "\"next\"",
            "kind": "directive-input",
            "name": "buttonType",
            "type": "SkyProgressIndicatorNavButtonType"
          },
          {
            "description": "Whether to disable the nav button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "The progress indicator component to associate with the nav button.",
            "kind": "directive-input",
            "name": "progressIndicator",
            "type": "undefined | λ2",
            "isRequired": true
          },
          {
            "description": "Fires when users select the nav button and emits a `SkyProgressIndicatorActionClickArgs` object that is passed into the callback function to allow consumers to decide whether the button’s action should complete successfully.",
            "kind": "directive-output",
            "name": "actionClick",
            "type": "EventEmitter<SkyProgressIndicatorActionClickArgs>"
          }
        ],
        "description": "Displays a button to navigate the steps in modal wizards. We recommend against using it in passive progress indicators and waterfall progress indicators.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/progress-indicator-nav-button/progress-indicator-nav-button.component.ts",
        "kind": "component",
        "name": "SkyProgressIndicatorNavButtonComponent",
        "selector": "sky-progress-indicator-nav-button"
      },
      {
        "anchorId": "class_sky-progress-indicator-reset-button-component",
        "children": [
          {
            "description": "The progress indicator component to associate with the reset button.",
            "kind": "directive-input",
            "name": "progressIndicator",
            "type": "undefined | λ2",
            "isRequired": true
          },
          {
            "description": "Whether to disable the reset button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Fires when users select the reset button that marks all items as incomplete and sets the first item as the active item.",
            "kind": "directive-output",
            "name": "resetClick",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Displays a button to mark all items in the progress indicator as incomplete and set the first item as the active item. The steps after the active item remain incomplete until users reach them in their sequential order.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/progress-indicator-reset-button/progress-indicator-reset-button.component.ts",
        "kind": "component",
        "name": "SkyProgressIndicatorResetButtonComponent",
        "selector": "sky-progress-indicator-reset-button"
      },
      {
        "anchorId": "class_sky-progress-indicator-title-component",
        "description": "Specifies a header to display above the progress indicator.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/progress-indicator-title/progress-indicator-title.component.ts",
        "kind": "component",
        "name": "SkyProgressIndicatorTitleComponent",
        "selector": "sky-progress-indicator-title"
      },
      {
        "anchorId": "class_sky-progress-indicator-component",
        "children": [
          {
            "deprecationReason": "The property was designed to create wizards by setting `displayMode=\"horizontal\"` on progress indicators in modals,\nbut this wizard implementation was replaced by the\n[Wizard (Tabs) component](https://developer.blackbaud.com/skyux/components/progress-indicator).",
            "description": "The orientation of the progress indicator, which can be vertical or horizontal. For [passive progress indicators](https://developer.blackbaud.com/skyux-progress-indicator/docs/passive-indicator) and [waterfall progress indicators](https://developer.blackbaud.com/skyux/components/progress-indicator/waterfall-progress-indicator), use the vertical display mode. For [modal wizards](https://developer.blackbaud.com/skyux/components/wizard), use the horizontal display mode.",
            "defaultValue": "\"vertical\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "displayMode",
            "type": "SkyProgressIndicatorDisplayModeType"
          },
          {
            "description": "Whether the progress indicator is passive. Passive progress indicators inform users of progress that concerns them but that they are not responsible for, and they must use the vertical display mode.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "isPassive",
            "type": "undefined | boolean"
          },
          {
            "description": "The observable of `SkyProgressIndicatorMessage` that determines the status to display for items in the progress indicator. The message stream is a queue of commanding messages to change the state of the progress indicator based on the message type.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "void"
          },
          {
            "description": "The index for the item to make active when the progress indicator loads. All steps that precede the active item are marked as complete, and all steps that follow the active item are marked as incomplete.",
            "kind": "directive-input",
            "name": "startingIndex",
            "type": "number"
          },
          {
            "description": "Fires when the progress indicator changes the status of an item.",
            "kind": "directive-output",
            "name": "progressChanges",
            "type": "EventEmitter<SkyProgressIndicatorChange>"
          }
        ],
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/progress-indicator.component.ts",
        "kind": "component",
        "name": "SkyProgressIndicatorComponent",
        "selector": "sky-progress-indicator"
      },
      {
        "anchorId": "class_sky-progress-indicator-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyProgressIndicatorModule"
          }
        ],
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/progress-indicator.module.ts",
        "kind": "module",
        "name": "SkyProgressIndicatorModule"
      },
      {
        "anchorId": "interface_sky-progress-indicator-action-click-args",
        "children": [
          {
            "description": "The mouse event from the user click.",
            "kind": "interface-property",
            "name": "event",
            "type": "MouseEvent"
          },
          {
            "description": "The progress handler object that allows consumers to trigger step advancement manually.",
            "kind": "interface-property",
            "name": "progressHandler",
            "type": "SkyProgressIndicatorActionClickProgressHandler"
          }
        ],
        "description": "The arguments passed to the `actionClick` event handler.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-action-click-args.ts",
        "kind": "interface",
        "name": "SkyProgressIndicatorActionClickArgs"
      },
      {
        "anchorId": "class_sky-progress-indicator-action-click-progress-handler",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyProgressIndicatorActionClickProgressHandler"
          },
          {
            "description": "Advances the progress indicator to the next step.",
            "kind": "class-property",
            "name": "advance",
            "type": "Function"
          }
        ],
        "description": "Allows the consumer to decide whether the button's action should be completed successfully. The handler is provided with all nav button types.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-action-click-progress-handler.ts",
        "kind": "class",
        "name": "SkyProgressIndicatorActionClickProgressHandler"
      },
      {
        "anchorId": "interface_sky-progress-indicator-change",
        "children": [
          {
            "description": "The active item.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "activeIndex",
            "type": "number"
          },
          {
            "description": "Whether the progress indicator is complete.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "isComplete",
            "type": "boolean"
          },
          {
            "description": "The array with the status of each item.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "itemStatuses",
            "type": "SkyProgressIndicatorItemStatus[]"
          }
        ],
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-change.ts",
        "kind": "interface",
        "name": "SkyProgressIndicatorChange"
      },
      {
        "anchorId": "type-alias_sky-progress-indicator-display-mode-type",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-display-mode-type.ts",
        "kind": "type-alias",
        "name": "SkyProgressIndicatorDisplayModeType",
        "type": "0 | 1 | \"vertical\" | \"horizontal\""
      },
      {
        "anchorId": "enum_sky-progress-indicator-item-status",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-item-status.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "The item is active.",
            "kind": "enum-member",
            "name": "Active",
            "type": "0"
          },
          {
            "description": "The item is complete.",
            "kind": "enum-member",
            "name": "Complete",
            "type": "1"
          },
          {
            "description": "The item is incomplete.",
            "kind": "enum-member",
            "name": "Incomplete",
            "type": "2"
          },
          {
            "description": "The item is pending.",
            "kind": "enum-member",
            "name": "Pending",
            "type": "3"
          }
        ],
        "name": "SkyProgressIndicatorItemStatus"
      },
      {
        "anchorId": "enum_sky-progress-indicator-message-type",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-message-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Progress is complete. This marks all items as complete and sets the last item as the active item.",
            "kind": "enum-member",
            "name": "Finish",
            "type": "3"
          },
          {
            "description": "Moves progress to the item indicated by the `data.activeIndex` property.",
            "kind": "enum-member",
            "name": "GoTo",
            "type": "4"
          },
          {
            "description": "The current step is complete. This completes the active item and moves to the next item.",
            "kind": "enum-member",
            "name": "Progress",
            "type": "0"
          },
          {
            "description": "Returns progress to the previous step. This moves from the active item to the item that precedes it.",
            "kind": "enum-member",
            "name": "Regress",
            "type": "1"
          },
          {
            "description": "Progress is incomplete. This marks all items as incomplete and sets the first item as the active item.",
            "kind": "enum-member",
            "name": "Reset",
            "type": "2"
          }
        ],
        "name": "SkyProgressIndicatorMessageType"
      },
      {
        "anchorId": "interface_sky-progress-indicator-message",
        "children": [
          {
            "description": "Used in conjunction with SkyProgressIndicatorMessageType.GoTo to travel to a specific step by specifying an index number on the `data.activeIndex` property.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "Object"
          },
          {
            "description": "The type of state change for the progress indicator.",
            "kind": "interface-property",
            "name": "type",
            "type": "SkyProgressIndicatorMessageType"
          }
        ],
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-message.ts",
        "kind": "interface",
        "name": "SkyProgressIndicatorMessage"
      },
      {
        "anchorId": "enum_sky-progress-indicator-display-mode",
        "deprecationReason": "Use `SkyProgressIndicatorDisplayModeType` instead.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-mode.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "The horizontal layout for the progress indicator.",
            "kind": "enum-member",
            "name": "Horizontal",
            "type": "1"
          },
          {
            "description": "The vertical layout for the progress indicator.",
            "kind": "enum-member",
            "name": "Vertical",
            "type": "0"
          }
        ],
        "name": "SkyProgressIndicatorDisplayMode"
      },
      {
        "anchorId": "type-alias_sky-progress-indicator-nav-button-type",
        "description": "The nav button type.",
        "filePath": "libs/components/progress-indicator/src/lib/modules/progress-indicator/types/progress-indicator-nav-button-type.ts",
        "kind": "type-alias",
        "name": "SkyProgressIndicatorNavButtonType",
        "type": "\"finish\" | \"next\" | \"previous\" | \"reset\""
      }
    ],
    "@skyux/progress-indicator/testing": [
      {
        "anchorId": "interface_sky-progress-indicator-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyProgressIndicatorHarness` instances.",
        "filePath": "libs/components/progress-indicator/testing/src/modules/progress-indicator/progress-indicator-harness-filters.ts",
        "kind": "interface",
        "name": "SkyProgressIndicatorFilters"
      },
      {
        "anchorId": "class_sky-progress-indicator-harness",
        "children": [
          {
            "description": "Clicks the reset button.",
            "kind": "class-method",
            "name": "clickResetButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a specific progress indicator item that meets certain criteria.",
            "kind": "class-method",
            "name": "getItem",
            "parameters": [
              { "name": "filter", "type": "SkyProgressIndicatorItemFilters" }
            ],
            "type": "Promise<SkyProgressIndicatorItemHarness>"
          },
          {
            "description": "Gets an array of all progress indicator items.",
            "kind": "class-method",
            "name": "getItems",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyProgressIndicatorItemFilters"
              }
            ],
            "type": "Promise<SkyProgressIndicatorItemHarness[]>"
          },
          {
            "description": "Gets the progress indicator title.",
            "kind": "class-method",
            "name": "getTitle",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the progress indicator is passive.",
            "kind": "class-method",
            "name": "isPassive",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyProgressIndicatorHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyProgressIndicatorFilters" }
            ],
            "type": "HarnessPredicate<SkyProgressIndicatorHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyProgressIndicatorHarness"
          },
          {
            "defaultValue": "'sky-progress-indicator'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the reset button.",
            "kind": "class-property",
            "name": "clickResetButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a specific progress indicator item that meets certain criteria.",
            "kind": "class-property",
            "name": "getItem",
            "type": "Promise<SkyProgressIndicatorItemHarness>"
          },
          {
            "description": "Gets an array of all progress indicator items.",
            "kind": "class-property",
            "name": "getItems",
            "type": "Promise<SkyProgressIndicatorItemHarness[]>"
          },
          {
            "description": "Gets the progress indicator title.",
            "kind": "class-property",
            "name": "getTitle",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the progress indicator is passive.",
            "kind": "class-property",
            "name": "isPassive",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyProgressIndicatorHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyProgressIndicatorHarness>"
          }
        ],
        "description": "Harness for interacting with a progress indicator component in tests.",
        "filePath": "libs/components/progress-indicator/testing/src/modules/progress-indicator/progress-indicator-harness.ts",
        "kind": "class",
        "name": "SkyProgressIndicatorHarness"
      },
      {
        "anchorId": "interface_sky-progress-indicator-item-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyProgressIndicatorItemHarness` instances.",
        "filePath": "libs/components/progress-indicator/testing/src/modules/progress-indicator/progress-indicator-item-harness-filters.ts",
        "kind": "interface",
        "name": "SkyProgressIndicatorItemFilters"
      },
      {
        "anchorId": "class_sky-progress-indicator-item-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the help inline popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the progress indicator item's title text.",
            "kind": "class-method",
            "name": "getTitle",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the indicator item step is completed.",
            "kind": "class-method",
            "name": "isCompleted",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyProgressIndicatorItemHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyProgressIndicatorItemFilters" }
            ],
            "type": "HarnessPredicate<SkyProgressIndicatorItemHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyProgressIndicatorItemHarness"
          },
          {
            "defaultValue": "'sky-progress-indicator-item'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the help inline popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the progress indicator item's title text.",
            "kind": "class-property",
            "name": "getTitle",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the indicator item step is completed.",
            "kind": "class-property",
            "name": "isCompleted",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyProgressIndicatorItemHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyProgressIndicatorItemHarness>"
          }
        ],
        "description": "Harness for interacting with a progress indicator item component in tests.",
        "filePath": "libs/components/progress-indicator/testing/src/modules/progress-indicator/progress-indicator-item-harness.ts",
        "kind": "class",
        "name": "SkyProgressIndicatorItemHarness"
      }
    ],
    "@skyux/data-manager": [
      {
        "anchorId": "class_sky-data-manager-column-picker-component",
        "filePath": "lib/modules/data-manager/data-manager-column-picker/data-manager-column-picker.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyDataManagerColumnPickerComponent",
        "selector": "sky-data-manager-column-picker"
      },
      {
        "anchorId": "class_sky-data-manager-filter-modal-context",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDataManagerFilterModalContext"
          },
          {
            "description": "Sets the state of the filters.",
            "kind": "class-property",
            "name": "filterData",
            "type": "undefined | SkyDataManagerFilterData"
          }
        ],
        "description": "Sets the state of the filters.",
        "filePath": "lib/modules/data-manager/data-manager-filter-context.ts",
        "kind": "class",
        "name": "SkyDataManagerFilterModalContext"
      },
      {
        "anchorId": "class_sky-data-manager-toolbar-left-item-component",
        "description": "A wrapper for an item to be rendered in `SkyDataManagerToolbarComponent`. The contents are rendered after the standard toolbar actions and before the search box. Each item should be wrapped in its own `sky-data-manager-toolbar-left-item`. The items render in the order they are in in the template.",
        "filePath": "lib/modules/data-manager/data-manager-toolbar/data-manager-toolbar-left-item.component.ts",
        "kind": "component",
        "name": "SkyDataManagerToolbarLeftItemComponent",
        "selector": "sky-data-manager-toolbar-left-item"
      },
      {
        "anchorId": "class_sky-data-manager-toolbar-primary-item-component",
        "description": "A wrapper for an item to be rendered in `SkyDataManagerToolbarComponent`. The contents are rendered as the first items in the toolbar and should be standard actions. Each item should be wrapped in its own `sky-data-manager-toolbar-primary-item`. The items render in the order they are in in the template.",
        "filePath": "lib/modules/data-manager/data-manager-toolbar/data-manager-toolbar-primary-item.component.ts",
        "kind": "component",
        "name": "SkyDataManagerToolbarPrimaryItemComponent",
        "selector": "sky-data-manager-toolbar-primary-item"
      },
      {
        "anchorId": "class_sky-data-manager-toolbar-right-item-component",
        "description": "A wrapper for an item to be rendered in `SkyDataManagerToolbarComponent`. The contents are rendered in `sky-toolbar-view-actions` on the right side of the toolbar and before the view switcher icons (if present). Each item should be wrapped in its own `sky-data-manager-toolbar-right-item`. The items render in the order they are in in the template.",
        "filePath": "lib/modules/data-manager/data-manager-toolbar/data-manager-toolbar-right-item.component.ts",
        "kind": "component",
        "name": "SkyDataManagerToolbarRightItemComponent",
        "selector": "sky-data-manager-toolbar-right-item"
      },
      {
        "anchorId": "class_sky-data-manager-toolbar-section-component",
        "description": "A wrapper for items to be rendered in `SkyDataManagerToolbarComponent`. The contents are rendered in an additional toolbar row beneath the primary toolbar and above the multiselect toolbar (if present).",
        "filePath": "lib/modules/data-manager/data-manager-toolbar/data-manager-toolbar-section.component.ts",
        "kind": "component",
        "name": "SkyDataManagerToolbarSectionComponent",
        "selector": "sky-data-manager-toolbar-section"
      },
      {
        "anchorId": "class_sky-data-manager-toolbar-component",
        "description": "Renders a `sky-toolbar` with the contents specified by the active view's `SkyDataViewConfig` and the `SkyDataManagerToolbarLeftItemsComponent`, `SkyDataManagerToolbarRightItemsComponent`, and `SkyDataManagerToolbarSectionComponent` wrappers.",
        "filePath": "lib/modules/data-manager/data-manager-toolbar/data-manager-toolbar.component.ts",
        "kind": "component",
        "name": "SkyDataManagerToolbarComponent",
        "selector": "sky-data-manager-toolbar"
      },
      {
        "anchorId": "class_sky-data-manager-component",
        "description": "The top-level data manager component. Provide `SkyDataManagerService` at this level.",
        "filePath": "lib/modules/data-manager/data-manager.component.ts",
        "kind": "component",
        "name": "SkyDataManagerComponent",
        "selector": "sky-data-manager"
      },
      {
        "anchorId": "class_sky-data-manager-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDataManagerModule"
          }
        ],
        "filePath": "lib/modules/data-manager/data-manager.module.ts",
        "kind": "module",
        "name": "SkyDataManagerModule"
      },
      {
        "anchorId": "class_sky-data-manager-service",
        "children": [
          {
            "description": "Returns an observable of the active view ID that views and other data manager entities can subscribe to.",
            "kind": "class-method",
            "name": "getActiveViewIdUpdates",
            "parameters": [],
            "type": "Observable<string>"
          },
          {
            "description": "Returns the current `SkyDataManagerConfig`.",
            "kind": "class-method",
            "name": "getCurrentDataManagerConfig",
            "parameters": [],
            "type": "SkyDataManagerConfig"
          },
          {
            "description": "Returns an observable of data manager config changes that views and other data manager entities can subscribe to.",
            "kind": "class-method",
            "name": "getDataManagerConfigUpdates",
            "parameters": [],
            "type": "Observable<SkyDataManagerConfig>"
          },
          {
            "description": "Returns an observable of data state changes that views and other data manager entities can subscribe to. It excludes updates originating from the provided source. This allows subscribers to only respond to changes they did not create and helps prevent infinite loops of updates and responses.",
            "kind": "class-method",
            "name": "getDataStateUpdates",
            "parameters": [
              {
                "description": "The ID of the entity subscribing to data state updates. This can be any value you choose but should be unique within the data manager instance and should also be used when that entity updates the state.",
                "name": "sourceId",
                "type": "string"
              },
              {
                "isOptional": true,
                "name": "updateFilter",
                "type": "SkyDataManagerStateUpdateFilterArgs"
              }
            ],
            "type": "Observable<SkyDataManagerState>"
          },
          {
            "description": "Returns an observable of data summary changes that views and other data manager entities can subscribe to. It excludes updates originating from the provided source. This allows subscribers to only respond to changes they did not create and helps prevent infinite loops of updates and responses.",
            "kind": "class-method",
            "name": "getDataSummaryUpdates",
            "parameters": [
              {
                "description": "The ID of the entity subscribing to data summary updates. This can be any value you choose but should be unique within the data manager instance and should also be used when that entity updates the summary.",
                "name": "sourceId",
                "type": "string"
              }
            ],
            "type": "Observable<SkyDataManagerSummary>"
          },
          {
            "description": "Returns an observable of data view config changes that views and other data manager entities can subscribe to.",
            "kind": "class-method",
            "name": "getDataViewsUpdates",
            "parameters": [],
            "type": "Observable<SkyDataViewConfig[]>"
          },
          {
            "description": "Returns the `SkyDataViewConfig` for the given view ID.",
            "kind": "class-method",
            "name": "getViewById",
            "parameters": [
              {
                "description": "The ID of the view config to get.",
                "name": "viewId",
                "type": "string"
              }
            ],
            "type": "undefined | SkyDataViewConfig"
          },
          {
            "description": "Initializes the data manager with the given settings and sets `isInitialized` to `true`. This must be called for the data manager to render.",
            "kind": "class-method",
            "name": "initDataManager",
            "parameters": [
              {
                "description": "The initial active view ID, data manager config, and state to use for the data manager. If a settings key is provided, it checks for a saved data state in the SKY UI config service before using the default data state and saves any state changes to the service.",
                "name": "args",
                "type": "SkyDataManagerInitArgs"
              }
            ],
            "type": "void"
          },
          {
            "description": "Initializes a view within the data manager. This must be called for each view for the views to appear within the data manager.",
            "kind": "class-method",
            "name": "initDataView",
            "parameters": [
              {
                "description": "The SkyDataViewConfig settings for the view being registered.",
                "name": "viewConfig",
                "type": "SkyDataViewConfig"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "setViewkeeperClasses",
            "parameters": [
              { "name": "viewId", "type": "string" },
              { "name": "classes", "type": "string[]" }
            ],
            "type": "void"
          },
          {
            "description": "Updates the active view ID. The data manager changes the displayed view.",
            "kind": "class-method",
            "name": "updateActiveViewId",
            "parameters": [
              {
                "description": "The new active view ID.",
                "name": "id",
                "type": "string"
              }
            ],
            "type": "void"
          },
          {
            "description": "Updates the data manager config and emits a new value to entities subscribed to data config changes.",
            "kind": "class-method",
            "name": "updateDataManagerConfig",
            "parameters": [
              {
                "description": "The new `SkyDataManagerConfig` value.",
                "name": "value",
                "type": "SkyDataManagerConfig"
              }
            ],
            "type": "void"
          },
          {
            "description": "Updates the data state and emits a new value to entities subscribed to data state changes.",
            "kind": "class-method",
            "name": "updateDataState",
            "parameters": [
              {
                "description": "The new `SkyDataManagerState` value.",
                "name": "state",
                "type": "SkyDataManagerState"
              },
              {
                "description": "The ID of the entity updating the state. This can be any value you choose, but should be unique within the data manager instance and should also be used when that entity subscribes to state changes from `getDataStateUpdates`.",
                "name": "sourceId",
                "type": "string"
              }
            ],
            "type": "void"
          },
          {
            "description": "Updates the data summary and emits a new value to entities subscribed to data summary changes.",
            "kind": "class-method",
            "name": "updateDataSummary",
            "parameters": [
              {
                "description": "The new `SkyDataManagerSummary` value.",
                "name": "summary",
                "type": "SkyDataManagerSummary"
              },
              {
                "description": "The ID of the entity updating the summary. This can be any value you choose, but should be unique within the data manager instance and should also be used when that entity subscribes to summary changes from `getDataSummaryUpdates`.",
                "name": "sourceId",
                "type": "string"
              }
            ],
            "type": "void"
          },
          {
            "description": "Updates the given view config. The registered view with the same ID is updated to the provided config, so include all properties regardless of whether they changed. If the view was not initialized already, no update happens.",
            "kind": "class-method",
            "name": "updateViewConfig",
            "parameters": [
              {
                "description": "The new `SkyDataViewConfig` containing all properties.",
                "name": "view",
                "type": "SkyDataViewConfig"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDataManagerService"
          },
          {
            "kind": "class-property",
            "name": "viewkeeperClasses",
            "type": "BehaviorSubject<Record<string, string[]>>"
          },
          {
            "description": "Returns an observable of the active view ID that views and other data manager entities can subscribe to.",
            "kind": "class-property",
            "name": "getActiveViewIdUpdates",
            "type": "Observable<string>"
          },
          {
            "description": "Returns the current `SkyDataManagerConfig`.",
            "kind": "class-property",
            "name": "getCurrentDataManagerConfig",
            "type": "SkyDataManagerConfig"
          },
          {
            "description": "Returns an observable of data manager config changes that views and other data manager entities can subscribe to.",
            "kind": "class-property",
            "name": "getDataManagerConfigUpdates",
            "type": "Observable<SkyDataManagerConfig>"
          },
          {
            "description": "Returns an observable of data state changes that views and other data manager entities can subscribe to. It excludes updates originating from the provided source. This allows subscribers to only respond to changes they did not create and helps prevent infinite loops of updates and responses.",
            "kind": "class-property",
            "name": "getDataStateUpdates",
            "type": "Observable<SkyDataManagerState>"
          },
          {
            "description": "Returns an observable of data summary changes that views and other data manager entities can subscribe to. It excludes updates originating from the provided source. This allows subscribers to only respond to changes they did not create and helps prevent infinite loops of updates and responses.",
            "kind": "class-property",
            "name": "getDataSummaryUpdates",
            "type": "Observable<SkyDataManagerSummary>"
          },
          {
            "description": "Returns an observable of data view config changes that views and other data manager entities can subscribe to.",
            "kind": "class-property",
            "name": "getDataViewsUpdates",
            "type": "Observable<SkyDataViewConfig[]>"
          },
          {
            "description": "Returns the `SkyDataViewConfig` for the given view ID.",
            "kind": "class-property",
            "name": "getViewById",
            "type": "undefined | SkyDataViewConfig"
          },
          {
            "description": "Initializes the data manager with the given settings and sets `isInitialized` to `true`. This must be called for the data manager to render.",
            "kind": "class-property",
            "name": "initDataManager",
            "type": "void"
          },
          {
            "description": "Initializes a view within the data manager. This must be called for each view for the views to appear within the data manager.",
            "kind": "class-property",
            "name": "initDataView",
            "type": "void"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "setViewkeeperClasses",
            "type": "void"
          },
          {
            "description": "Updates the active view ID. The data manager changes the displayed view.",
            "kind": "class-property",
            "name": "updateActiveViewId",
            "type": "void"
          },
          {
            "description": "Updates the data manager config and emits a new value to entities subscribed to data config changes.",
            "kind": "class-property",
            "name": "updateDataManagerConfig",
            "type": "void"
          },
          {
            "description": "Updates the data state and emits a new value to entities subscribed to data state changes.",
            "kind": "class-property",
            "name": "updateDataState",
            "type": "void"
          },
          {
            "description": "Updates the data summary and emits a new value to entities subscribed to data summary changes.",
            "kind": "class-property",
            "name": "updateDataSummary",
            "type": "void"
          },
          {
            "description": "Updates the given view config. The registered view with the same ID is updated to the provided config, so include all properties regardless of whether they changed. If the view was not initialized already, no update happens.",
            "kind": "class-property",
            "name": "updateViewConfig",
            "type": "void"
          }
        ],
        "description": "The data manager service provides ways for data views, toolbar items, and more to stay up to date with the active view ID, data manager config, registered views and their configs, and data state. There are methods to get current values, update values, and get subscriptions to the changing values.<br/> <br/> Provide this service at the component level for each instance of a data manager. Do not provide it at the module level or in `app-extras`. This allows multiple data managers to be used and self-contained.",
        "filePath": "lib/modules/data-manager/data-manager.service.ts",
        "kind": "service",
        "name": "SkyDataManagerService"
      },
      {
        "anchorId": "class_sky-data-view-component",
        "children": [
          {
            "description": "The configuration for the view. See the `SkyDataViewConfig` interface.",
            "kind": "directive-input",
            "name": "viewId",
            "type": "undefined | string",
            "isRequired": true
          }
        ],
        "description": "A data view is rendered within a data manager component. It can subscribe to data state changes from `SkyDataManagerService` and apply the filters, search text, and more to the data it displays.",
        "filePath": "lib/modules/data-manager/data-view.component.ts",
        "kind": "component",
        "name": "SkyDataViewComponent",
        "selector": "sky-data-view"
      },
      {
        "anchorId": "interface_sky-data-manager-column-picker-option",
        "children": [
          {
            "description": "Whether a column is always visible and is not listed as an option in the column picker. For example, a context menu column may always be visible.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "alwaysDisplayed",
            "type": "boolean"
          },
          {
            "description": "The description text rendered beneath the column label in the column picker.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "description",
            "type": "string"
          },
          {
            "description": "The ID of the corresponding column.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "Initially hide the column when it is added to the grid unless given in the view state's `displayedColumnIds`. When enabled, this column will not be automatically added to a view's state when this column is recognized as being missing from an initial data state or a data state returned via the SKY UI config service.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "initialHide",
            "type": "boolean"
          },
          {
            "description": "The label to display in the column picker.",
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          }
        ],
        "description": "The options to display in a view's column picker.",
        "filePath": "lib/modules/data-manager/models/data-manager-column-picker-option.ts",
        "kind": "interface",
        "name": "SkyDataManagerColumnPickerOption"
      },
      {
        "anchorId": "enum_sky-data-manager-column-picker-sort-strategy",
        "description": "These options specify the sorting strategy applied to columns when `columnPickerEnabled` is enabled.",
        "filePath": "lib/modules/data-manager/models/data-manager-column-picker-sort-strategy.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "No sorting is applied to the columns.",
            "kind": "enum-member",
            "name": "None",
            "type": "\"none\""
          },
          {
            "description": "If `sortEnabled` is set to `true`, then the selected columns are displayed before the unselected columns. Unselected columns are sorted alphabetically. If `sortEnabled` is set to `false`, then the columns are displayed in the order specified by `columnOptions`.",
            "kind": "enum-member",
            "name": "SelectedThenAlphabetical",
            "type": "\"selectedThenAlphabetical\""
          }
        ],
        "name": "SkyDataManagerColumnPickerSortStrategy"
      },
      {
        "anchorId": "interface_sky-data-manager-config",
        "children": [
          {
            "description": "An untyped property that can track any config information relevant to a data manager that existing options do not include.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "additionalOptions",
            "type": "any"
          },
          {
            "description": "The modal component to launch when the filter button is selected. The same filter options are used for all views, but views can use `SkyDataViewConfig` to indicate whether to display the filter button. The modal receives the `filterData` in the data state as context.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "filterModalComponent",
            "type": "any"
          },
          {
            "description": "A descriptor for the data that the data manager manipulates. Use a plural term. The descriptor helps set the data manager's `aria-label` attributes for multiselect toolbars, search inputs, sort buttons, and filter buttons to provide text equivalents for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility). For example, when the descriptor is \"constituents,\" the search input's `aria-label` is \"Search constituents.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "listDescriptor",
            "type": "string"
          },
          {
            "description": "The sort options displayed in the sort dropdown. The same sort options are used for all views, but views can use `SkyDataViewConfig` to indicate whether to display the sort button.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "sortOptions",
            "type": "SkyDataManagerSortOption[]"
          }
        ],
        "description": "The data manager config contains settings that apply to the data manager across all views, such as the sort and filter settings.",
        "filePath": "lib/modules/data-manager/models/data-manager-config.ts",
        "kind": "interface",
        "name": "SkyDataManagerConfig"
      },
      {
        "anchorId": "interface_sky-data-manager-filter-data",
        "children": [
          {
            "description": "The filter data used in the data manager. You may use any filter model that works for your data set and models. See the demo for an example.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "filters",
            "type": "any"
          },
          {
            "description": "Whether any filters are applied.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "filtersApplied",
            "type": "boolean"
          }
        ],
        "filePath": "lib/modules/data-manager/models/data-manager-filter-data.ts",
        "kind": "interface",
        "name": "SkyDataManagerFilterData"
      },
      {
        "anchorId": "interface_sky-data-manager-init-args",
        "children": [
          {
            "description": "The initial active view's ID.",
            "kind": "interface-property",
            "name": "activeViewId",
            "type": "string"
          },
          {
            "description": "The initial configuration for the data manager. See the SkyDataManagerConfig interface.",
            "kind": "interface-property",
            "name": "dataManagerConfig",
            "type": "SkyDataManagerConfig"
          },
          {
            "description": "The data state used if no settings key is provided or if no data state is saved in the SKY UI config service for the user. See the SkyDataManagerState interface.",
            "kind": "interface-property",
            "name": "defaultDataState",
            "type": "SkyDataManagerState"
          },
          {
            "description": "The unique key for the UI Config Service to retrieve stored settings from a database. The UI Config Service saves configuration settings for users to preserve the current data state. For more information about the UI Config Service, see [the sticky settings documentation](https://developer.blackbaud.com/skyux/learn/develop/sticky-settings).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "settingsKey",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/data-manager/models/data-manager-init-args.ts",
        "kind": "interface",
        "name": "SkyDataManagerInitArgs"
      },
      {
        "anchorId": "interface_sky-data-manager-sort-option",
        "children": [
          {
            "description": "Whether to apply the sort in descending order.",
            "kind": "interface-property",
            "name": "descending",
            "type": "boolean"
          },
          {
            "description": "An ID for the sort option.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The label to display in the sort dropdown.",
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The data property to sort by.",
            "kind": "interface-property",
            "name": "propertyName",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/data-manager/models/data-manager-sort-option.ts",
        "kind": "interface",
        "name": "SkyDataManagerSortOption"
      },
      {
        "anchorId": "interface_sky-data-manager-state-options",
        "children": [
          {
            "description": "The selected SkyDataManagerSortOption to apply.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "activeSortOption",
            "type": "SkyDataManagerSortOption"
          },
          {
            "description": "An untyped property that tracks any state information that's relevant to a data manager but that the existing properties do not cover.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "additionalData",
            "type": "any"
          },
          {
            "description": "The state of the filters.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "filterData",
            "type": "SkyDataManagerFilterData"
          },
          {
            "description": "Whether to display only the selected rows or objects. The multiselect toolbar uses this property.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "onlyShowSelected",
            "type": "boolean"
          },
          {
            "description": "The search text to apply.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchText",
            "type": "string"
          },
          {
            "description": "The currently selected rows or objects.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectedIds",
            "type": "string[]"
          },
          {
            "description": "The states of the individual views.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "views",
            "type": "SkyDataViewStateOptions[]"
          }
        ],
        "filePath": "lib/modules/data-manager/models/data-manager-state-options.ts",
        "kind": "interface",
        "name": "SkyDataManagerStateOptions"
      },
      {
        "anchorId": "interface_sky-data-manager-state-update-filter-args",
        "children": [
          {
            "description": "A comparator function called to test if the new `SkyDataManagerState` is distinct from the previous.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "comparator",
            "type": "Function"
          },
          {
            "description": "A list of `SkyDataManagerState` properties to compare to test if the new `SkyDataManagerState` is distinct from the previous. This allows you to subscribe to changes for only the provided properties.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "properties",
            "type": "string[]"
          }
        ],
        "description": "Optional arguments to pass to `getDataStateUpdates`. Provide either a list of properties to filter on OR a custom comparator.",
        "filePath": "lib/modules/data-manager/models/data-manager-state-update-filter-args.ts",
        "kind": "interface",
        "name": "SkyDataManagerStateUpdateFilterArgs"
      },
      {
        "anchorId": "class_sky-data-manager-state",
        "children": [
          {
            "description": "Adds a `SkyDataViewState` to a view or updates an existing view.",
            "kind": "class-method",
            "name": "addOrUpdateView",
            "parameters": [
              {
                "description": "The ID for the view.",
                "name": "viewId",
                "type": "string"
              },
              {
                "description": "The `SkyDataViewState` option to add or update.",
                "name": "view",
                "type": "SkyDataViewState"
              }
            ],
            "type": "SkyDataManagerState"
          },
          {
            "description": "Returns the `SkyDataManagerStateOptions` for the data manager.",
            "kind": "class-method",
            "name": "getStateOptions",
            "parameters": [],
            "type": "SkyDataManagerStateOptions"
          },
          {
            "description": "Returns the `SkyDataViewState` for the specified view.",
            "kind": "class-method",
            "name": "getViewStateById",
            "parameters": [
              {
                "description": "The ID for the view.",
                "name": "viewId",
                "type": "string"
              }
            ],
            "type": "undefined | SkyDataViewState"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDataManagerState"
          },
          {
            "description": "The selected SkyDataManagerSortOption to apply.",
            "kind": "class-property",
            "name": "activeSortOption",
            "type": "undefined | SkyDataManagerSortOption"
          },
          {
            "description": "An untyped property that tracks any state information that's relevant to a data manager but that the existing properties do not cover.",
            "kind": "class-property",
            "name": "additionalData",
            "type": "any"
          },
          {
            "description": "The state of the filters.",
            "kind": "class-property",
            "name": "filterData",
            "type": "undefined | SkyDataManagerFilterData"
          },
          {
            "description": "Whether to display only the selected rows or objects. The multiselect toolbar uses this property.",
            "kind": "class-property",
            "name": "onlyShowSelected",
            "type": "undefined | boolean"
          },
          {
            "description": "The search text to apply.",
            "kind": "class-property",
            "name": "searchText",
            "type": "undefined | string"
          },
          {
            "description": "The currently selected rows or objects.",
            "kind": "class-property",
            "name": "selectedIds",
            "type": "undefined | string[]"
          },
          {
            "description": "The states of the individual views.",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "views",
            "type": "SkyDataViewState[]"
          },
          {
            "description": "Adds a `SkyDataViewState` to a view or updates an existing view.",
            "kind": "class-property",
            "name": "addOrUpdateView",
            "type": "SkyDataManagerState"
          },
          {
            "description": "Returns the `SkyDataManagerStateOptions` for the data manager.",
            "kind": "class-property",
            "name": "getStateOptions",
            "type": "SkyDataManagerStateOptions"
          },
          {
            "description": "Returns the `SkyDataViewState` for the specified view.",
            "kind": "class-property",
            "name": "getViewStateById",
            "type": "undefined | SkyDataViewState"
          }
        ],
        "description": "Provides options that control which data to display.",
        "filePath": "lib/modules/data-manager/models/data-manager-state.ts",
        "kind": "class",
        "name": "SkyDataManagerState"
      },
      {
        "anchorId": "interface_sky-data-view-column-widths",
        "children": [
          {
            "description": "A map of columnIds to column widths at the sm or larger breakpoint size.",
            "kind": "interface-property",
            "name": "sm",
            "type": "Object"
          },
          {
            "description": "A map of columnIds to column widths at the xs breakpoint size.",
            "kind": "interface-property",
            "name": "xs",
            "type": "Object"
          }
        ],
        "filePath": "lib/modules/data-manager/models/data-view-column-widths.ts",
        "kind": "interface",
        "name": "SkyDataViewColumnWidths"
      },
      {
        "anchorId": "interface_sky-data-view-config",
        "children": [
          {
            "description": "An untyped property that can track any view config information relevant to a data view that the existing options do not include.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "additionalOptions",
            "type": "Record<string, unknown>"
          },
          {
            "description": "The column data to pass to the column picker. Columns that are always displayed should be passed in addition to the optional columns. See SkyDataManagerColumnPickerOption.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "columnOptions",
            "type": "SkyDataManagerColumnPickerOption[]"
          },
          {
            "description": "Whether to display the column picker button for this view.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "columnPickerEnabled",
            "type": "boolean"
          },
          {
            "description": "The strategy used to sort the options in the column picker. If no strategy is provided the columns will be sorted by selected then alphabetical.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "columnPickerSortStrategy",
            "type": "SkyDataManagerColumnPickerSortStrategy"
          },
          {
            "description": "Whether to display the filter button for this view.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "filterButtonEnabled",
            "type": "boolean"
          },
          {
            "description": "The Font Awesome icon name to use for this view in the view switcher. Required if you have more than one view. Do not include the `fa-` prefix.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "icon",
            "type": "string"
          },
          {
            "description": "The unique ID for this view.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "Whether to display the multiselect toolbar for this view.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "multiselectToolbarEnabled",
            "type": "boolean"
          },
          {
            "description": "The name of the view. This is used in the ARIA label for the view switcher.",
            "kind": "interface-property",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The function called when a user selects the \"Clear all\" button on the multi-select toolbar. Update your displayed data to indicate it is not selected in this function.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "onClearAllClick",
            "type": "Function"
          },
          {
            "description": "The function called when a user selects the \"Select all\" button on the multi-select toolbar. Update your displayed data to indicate it is selected in this function.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "onSelectAllClick",
            "type": "Function"
          },
          {
            "description": "Whether to display the search box for this view.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchEnabled",
            "type": "boolean"
          },
          {
            "description": "Sets the `expandMode` property on the search box for this view. See the <a href=\"https://developer.blackbaud.com/skyux/components/search\">search component</a> for valid options and the default value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchExpandMode",
            "type": "string"
          },
          {
            "description": "Highlights text that matches the search text using the text highlight directive.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchHighlightEnabled",
            "type": "boolean"
          },
          {
            "description": "Placeholder text to display in the search input until users enter search criteria. See the <a href=\"https://developer.blackbaud.com/skyux/components/search\">search component</a> for the default value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchPlaceholderText",
            "type": "string"
          },
          {
            "description": "Whether to include the \"Filter\" text on the displayed filter button for this view. If it is not set, no text appears.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "showFilterButtonText",
            "type": "boolean"
          },
          {
            "description": "Whether to include the \"Sort\" text on the displayed sort button for this view. If it is not set, no text appears.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "showSortButtonText",
            "type": "boolean"
          },
          {
            "description": "Whether to display the sort button in this view.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "sortEnabled",
            "type": "boolean"
          }
        ],
        "description": "The data view config contains settings that apply to the specific view, such as column picker options and the buttons to display in the toolbar.",
        "filePath": "lib/modules/data-manager/models/data-view-config.ts",
        "kind": "interface",
        "name": "SkyDataViewConfig"
      },
      {
        "anchorId": "interface_sky-data-view-state-options",
        "children": [
          {
            "description": "An untyped property that tracks any view-specific state information that is relevant to a data manager but that existing properties do not cover.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "additionalData",
            "type": "any"
          },
          {
            "description": "The IDs of the columns able to be displayed for column-based views. This property is required when utilizing a grid-based view, a column picker, or both.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "columnIds",
            "type": "string[]"
          },
          {
            "description": "The widths of columns in column-based views for xs and sm+ breakpoints. If using sticky settings, the widths a user sets will be persisted.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "columnWidths",
            "type": "SkyDataViewColumnWidths"
          },
          {
            "description": "The IDs of the columns displayed for column-based views.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "displayedColumnIds",
            "type": "string[]"
          },
          {
            "description": "The ID of this view.",
            "kind": "interface-property",
            "name": "viewId",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/data-manager/models/data-view-state-options.ts",
        "kind": "interface",
        "name": "SkyDataViewStateOptions"
      },
      {
        "anchorId": "class_sky-data-view-state",
        "children": [
          {
            "description": "Returns the `SkyDataViewStateOptions` for the current view.",
            "kind": "class-method",
            "name": "getViewStateOptions",
            "parameters": [],
            "type": "SkyDataViewStateOptions"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDataViewState"
          },
          {
            "description": "An untyped property that tracks any view-specific state information that is relevant to a data manager but that existing properties do not cover.",
            "kind": "class-property",
            "name": "additionalData",
            "type": "any"
          },
          {
            "description": "The IDs of the columns able to be displayed for column-based views. This property is required when utilizing a grid-based view, a column picker, or both.",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "columnIds",
            "type": "string[]"
          },
          {
            "description": "The widths of columns in column-based views for xs and sm+ breakpoints. If using sticky settings, the widths a user sets will be persisted.",
            "kind": "class-property",
            "name": "columnWidths",
            "type": "SkyDataViewColumnWidths"
          },
          {
            "description": "The IDs of the columns displayed for column-based views.",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "displayedColumnIds",
            "type": "string[]"
          },
          {
            "description": "The ID of this view.",
            "kind": "class-property",
            "name": "viewId",
            "type": "string"
          },
          {
            "description": "Returns the `SkyDataViewStateOptions` for the current view.",
            "kind": "class-property",
            "name": "getViewStateOptions",
            "type": "SkyDataViewStateOptions"
          }
        ],
        "description": "Provides options for defining how data is displayed, such as which columns appear.",
        "filePath": "lib/modules/data-manager/models/data-view-state.ts",
        "kind": "class",
        "name": "SkyDataViewState"
      }
    ],
    "@skyux/list-builder": [
      {
        "anchorId": "class_sky-list-in-memory-data-provider",
        "children": [
          {
            "kind": "class-method",
            "name": "count",
            "parameters": [],
            "type": "Observable<number>"
          },
          {
            "kind": "class-method",
            "name": "get",
            "parameters": [
              { "name": "request", "type": "ListDataRequestModel" }
            ],
            "type": "Observable<ListDataResponseModel>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListInMemoryDataProvider"
          },
          {
            "kind": "class-property",
            "name": "data",
            "type": "Observable<any[]>"
          },
          {
            "kind": "class-property",
            "name": "items",
            "type": "BehaviorSubject<ListItemModel[]>"
          },
          {
            "kind": "class-property",
            "name": "count",
            "type": "Observable<number>"
          },
          {
            "kind": "class-property",
            "name": "get",
            "type": "Observable<ListDataResponseModel>"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list-data-provider-in-memory/list-data-in-memory.provider.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "SkyListInMemoryDataProvider"
      },
      {
        "anchorId": "class_list-filter-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListFilterModel"
          },
          {
            "description": "The default value of the filter. When a filter equals the default value, the filter does not affect the list.",
            "kind": "class-property",
            "name": "defaultValue",
            "type": "any"
          },
          {
            "description": "Whether users can dismiss the filter's summary item.",
            "defaultValue": "true",
            "kind": "class-property",
            "name": "dismissible",
            "type": "boolean"
          },
          {
            "description": "The function that determines whether items are filtered. This property is required when using an in-memory data provider. For information about `ListItemModel`, see the [shared classes for lists](https://developer.blackbaud.com/skyux-list-builder-common/docs/list-builder-common).",
            "kind": "class-property",
            "name": "filterFunction",
            "type": "Function"
          },
          {
            "description": "The label for the filter's summary item. The label defaults to the `value` of the filter.",
            "kind": "class-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The name of the filter.",
            "kind": "class-property",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The current value of the filter.",
            "kind": "class-property",
            "name": "value",
            "type": "any"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list-filters/filter.model.ts",
        "kind": "class",
        "name": "ListFilterModel"
      },
      {
        "anchorId": "class_sky-list-filter-button-component",
        "description": "Contains a filter button for the list toolbar. Place a [`sky-filter-button`](https://developer.blackbaud.com/skyux/components/filter) component inside this component to open a modal with filtering options. To apply filter options, use the [list component's](https://developer.blackbaud.com/skyux/components/list/overview#list-properties) `appliedFilters` property.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-filters/list-filter-button.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListFilterButtonComponent",
        "selector": "sky-list-filter-button"
      },
      {
        "anchorId": "class_sky-list-filter-inline-item-component",
        "children": [
          {
            "description": "The default value of the filter. If the value of the filter is set to the default value, then the filter is not applied.",
            "kind": "directive-input",
            "name": "defaultValue",
            "type": "any"
          },
          {
            "description": "The function that determines whether an item is filtered. This property is required when using an in-memory data provider. For information about `ListItemModel`, see the [shared classes for lists](https://developer.blackbaud.com/skyux-list-builder-common/docs/list-builder-common).",
            "kind": "directive-input",
            "name": "filterFunction",
            "type": "Function"
          },
          {
            "description": "The name of the filter.",
            "kind": "directive-input",
            "name": "name",
            "type": "string",
            "isRequired": true
          },
          {
            "description": "The template for the filter. The template can access the `filter` variable that contains the `value` of the filter control, which should be bound to `ngModel`, and the `changed` function, which should be called when the model changes.",
            "kind": "directive-input",
            "name": "templateInput",
            "type": "TemplateRef<unknown>",
            "isRequired": true
          },
          {
            "description": "The current value of the filter.",
            "kind": "directive-input",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Creates a filter in the list's inline filter area.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-filters/list-filter-inline-item.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListFilterInlineItemComponent",
        "selector": "sky-list-filter-inline-item"
      },
      {
        "anchorId": "class_sky-list-filter-inline-component",
        "description": "Creates an inline filter area for the list. Place each filter in a `sky-list-filter-inline-item` component.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-filters/list-filter-inline.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListFilterInlineComponent",
        "selector": "sky-list-filter-inline"
      },
      {
        "anchorId": "class_sky-list-filter-inline-model",
        "children": [
          {
            "kind": "class-method",
            "name": "changed",
            "parameters": [{ "name": "value", "type": "any" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListFilterInlineModel"
          },
          { "kind": "class-property", "name": "defaultValue", "type": "any" },
          {
            "kind": "class-property",
            "name": "filterFunction",
            "type": "Function"
          },
          { "kind": "class-property", "name": "name", "type": "string" },
          {
            "kind": "class-property",
            "name": "onChange",
            "type": "EventEmitter<any>"
          },
          {
            "kind": "class-property",
            "name": "template",
            "type": "TemplateRef<unknown>"
          },
          { "kind": "class-property", "name": "value", "type": "any" },
          { "kind": "class-property", "name": "changed", "type": "void" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list-filters/list-filter-inline.model.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyListFilterInlineModel"
      },
      {
        "anchorId": "class_sky-list-filter-summary-component",
        "children": [
          {
            "description": "Emits a `ListFilterModel` when users select a summary item. A common use case is to open a filter modal when this event is received.",
            "kind": "directive-output",
            "name": "summaryItemClick",
            "type": "EventEmitter<ListFilterModel>"
          }
        ],
        "description": "Creates a filter summary based on the [list component's](https://developer.blackbaud.com/skyux/components/list/overview#list-properties) `appliedFilters` property. Place this component within the [`sky-list-toolbar`](https://developer.blackbaud.com/skyux/components/list/toolbar) component.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-filters/list-filter-summary.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListFilterSummaryComponent",
        "selector": "sky-list-filter-summary"
      },
      {
        "anchorId": "class_sky-list-filters-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListFiltersModule"
          }
        ],
        "deprecationReason": "List builder and its features are deprecated. Use data manager instead. For more information, see https://developer.blackbaud.com/skyux/components/data-manager.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-filters/list-filters.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListFiltersModule"
      },
      {
        "anchorId": "class_sky-list-paging-component",
        "children": [
          {
            "description": "The maximum pages to display.",
            "defaultValue": "5",
            "kind": "directive-input",
            "name": "maxPages",
            "type": "number | Observable<number>"
          },
          {
            "description": "The current page number.",
            "defaultValue": "1",
            "kind": "directive-input",
            "name": "pageNumber",
            "type": "number | Observable<number>"
          },
          {
            "description": "The number of list items per page.",
            "defaultValue": "10",
            "kind": "directive-input",
            "name": "pageSize",
            "type": "number | Observable<number>"
          }
        ],
        "description": "Displays a pagination control for a SKY UX-themed list of data.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-paging/list-paging.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListPagingComponent",
        "selector": "sky-list-paging"
      },
      {
        "anchorId": "class_sky-list-paging-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListPagingModule"
          }
        ],
        "deprecationReason": "List builder and its features are deprecated. Use data manager instead. For more information, see https://developer.blackbaud.com/skyux/components/data-manager.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-paging/list-paging.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListPagingModule"
      },
      {
        "anchorId": "class_sky-list-secondary-action-component",
        "description": "Adds actions to the secondary actions dropdown in the list toolbar.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-secondary-actions/list-secondary-action.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListSecondaryActionComponent",
        "selector": "sky-list-secondary-action"
      },
      {
        "anchorId": "interface_sky-list-secondary-action",
        "children": [
          {
            "kind": "interface-property",
            "name": "template",
            "type": "TemplateRef<unknown>"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-secondary-actions/list-secondary-action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyListSecondaryAction"
      },
      {
        "anchorId": "class_sky-list-secondary-actions-component",
        "description": "Adds a dropdown to the list toolbar for secondary actions. If the dropdown does not include actions, the secondary actions dropdown is hidden.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-secondary-actions/list-secondary-actions.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListSecondaryActionsComponent",
        "selector": "sky-list-secondary-actions"
      },
      {
        "anchorId": "class_sky-list-secondary-actions-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListSecondaryActionsModule"
          }
        ],
        "deprecationReason": "List builder and its features are deprecated. Use data manager instead. For more information, see https://developer.blackbaud.com/skyux/components/data-manager.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-secondary-actions/list-secondary-actions.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListSecondaryActionsModule"
      },
      {
        "anchorId": "class_sky-list-toolbar-item-component",
        "children": [
          {
            "description": "The ID of the item.",
            "kind": "directive-input",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The index of the item at the given item location.",
            "defaultValue": "-1",
            "kind": "directive-input",
            "name": "index",
            "type": "number"
          },
          {
            "description": "The toolbar location of the item. The valid options are `\"left\"`, `\"center\"`, and `\"right\"`.",
            "defaultValue": "\"left\"",
            "kind": "directive-input",
            "name": "location",
            "type": "string"
          }
        ],
        "description": "Defines a toolbar item for the list toolbar.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-toolbar-item.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListToolbarItemComponent",
        "selector": "sky-list-toolbar-item"
      },
      {
        "anchorId": "class_sky-list-toolbar-search-actions-component",
        "description": "Displays custom actions in the toolbar beside to the search bar.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-toolbar-search-actions.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListToolbarSearchActionsComponent",
        "selector": "sky-list-toolbar-search-actions"
      },
      {
        "anchorId": "class_sky-list-toolbar-sort-component",
        "children": [
          {
            "description": "Whether to sort data in descending order.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "descending",
            "type": "boolean"
          },
          {
            "description": "The data field to sort the list on.",
            "kind": "directive-input",
            "name": "field",
            "type": "string",
            "isRequired": true
          },
          {
            "description": "The label for a sort option.",
            "kind": "directive-input",
            "name": "label",
            "type": "string",
            "isRequired": true
          },
          {
            "description": "The data type of the data field to sort the list on.",
            "kind": "directive-input",
            "name": "type",
            "type": "string",
            "isRequired": true
          }
        ],
        "description": "Adds a sort dropdown to the list toolbar.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-toolbar-sort.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListToolbarSortComponent",
        "selector": "sky-list-toolbar-sort"
      },
      {
        "anchorId": "class_sky-list-toolbar-view-actions-component",
        "description": "Adds a section on the right side of the toolbar for items that substantially change or affect the view of the list. This includes simple filters and view switchers. If the view section includes more than one item, simple filters appear on the left and view switchers appear on the right.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-toolbar-view-actions.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListToolbarViewActionsComponent",
        "selector": "sky-list-toolbar-view-actions"
      },
      {
        "anchorId": "class_sky-list-toolbar-component",
        "children": [
          {
            "description": "Placeholder text for the search bar that the list toolbar creates with a [search component](https://developer.blackbaud.com/skyux/components/search).",
            "defaultValue": "\"Find in this list\"",
            "kind": "directive-input",
            "name": "placeholder",
            "type": "string"
          },
          {
            "description": "Whether to enable the search bar.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "searchEnabled",
            "type": "boolean | Observable<boolean>"
          },
          {
            "description": "The text string to search with.",
            "kind": "directive-input",
            "name": "searchText",
            "type": "string | Observable<string>"
          },
          {
            "description": "Whether to enable the sort selector.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "sortSelectorEnabled",
            "type": "boolean | Observable<boolean>"
          },
          {
            "description": "Display the search bar in the standard position or in a separate section. To highlight the search bar in a section above all other toolbar items, set this property to `search`.",
            "defaultValue": "\"standard\"",
            "kind": "directive-input",
            "name": "toolbarType",
            "type": "string"
          },
          {
            "description": "Whether to use the in-memory search. Setting this to `false` will allow consumers to run their own searches remotely, and push new values to the list component by updating the `data` property.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "inMemorySearchEnabled",
            "type": "boolean"
          }
        ],
        "description": "Displays a toolbar for a SKY UX-themed list of data.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-toolbar.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListToolbarComponent",
        "selector": "sky-list-toolbar"
      },
      {
        "anchorId": "class_sky-list-toolbar-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListToolbarModule"
          }
        ],
        "deprecationReason": "List builder and its features are deprecated. Use data manager instead. For more information, see https://developer.blackbaud.com/skyux/components/data-manager.",
        "filePath": "libs/components/list-builder/src/lib/modules/list-toolbar/list-toolbar.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListToolbarModule"
      },
      {
        "anchorId": "class_list-data-request-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListDataRequestModel"
          },
          {
            "description": "The function that determines whether items are filtered. This property is required when using an in-memory data provider.",
            "kind": "class-property",
            "name": "filters",
            "type": "ListFilterModel[]"
          },
          {
            "description": "Whether to disable the search bar and filter button.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "isToolbarDisabled",
            "type": "boolean"
          },
          {
            "description": "The current page number.",
            "kind": "class-property",
            "name": "pageNumber",
            "type": "number"
          },
          {
            "description": "The number of items to display per page.",
            "kind": "class-property",
            "name": "pageSize",
            "type": "number"
          },
          {
            "description": "The function to dynamically manage the data source when users change the text in the list field. The search function must return an array or a promise of an array. The `search` property is particularly useful when the data source does not live in the source code.",
            "kind": "class-property",
            "name": "search",
            "type": "ListSearchModel"
          },
          {
            "description": "The set of fields to sort by.",
            "kind": "class-property",
            "name": "sort",
            "type": "ListSortModel"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/list-data-request.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListDataRequestModel"
      },
      {
        "anchorId": "class_list-data-response-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListDataResponseModel"
          },
          {
            "description": "The total number of records in the list.",
            "kind": "class-property",
            "name": "count",
            "type": "number"
          },
          {
            "description": "An array of the items returned. For information about `ListItemModel`, see the [shared classes for lists](https://developer.blackbaud.com/skyux-list-builder-common/docs/list-builder-common).",
            "kind": "class-property",
            "name": "items",
            "type": "ListItemModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/list-data-response.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListDataResponseModel"
      },
      {
        "anchorId": "class_list-data-provider",
        "children": [
          {
            "kind": "class-method",
            "name": "count",
            "parameters": [],
            "type": "Observable<number>"
          },
          {
            "kind": "class-method",
            "name": "get",
            "parameters": [
              { "name": "request", "type": "ListDataRequestModel" }
            ],
            "type": "Observable<ListDataResponseModel>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListDataProvider"
          },
          {
            "kind": "class-property",
            "name": "data",
            "type": "Observable<any[]>"
          },
          {
            "kind": "class-property",
            "name": "count",
            "type": "Observable<number>"
          },
          {
            "kind": "class-property",
            "name": "get",
            "type": "Observable<ListDataResponseModel>"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/list-data.provider.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListDataProvider"
      },
      {
        "anchorId": "class_list-view-component",
        "children": [
          {
            "kind": "class-method",
            "name": "onViewActive",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "onViewInactive",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewComponent"
          },
          {
            "kind": "class-property",
            "name": "active",
            "type": "Observable<boolean>"
          },
          { "kind": "class-property", "name": "id", "type": "string" },
          { "kind": "class-property", "name": "label", "type": "string" },
          { "kind": "class-property", "name": "onViewActive", "type": "void" },
          { "kind": "class-property", "name": "onViewInactive", "type": "void" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/list-view.component.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewComponent"
      },
      {
        "anchorId": "class_sky-list-component",
        "children": [
          {
            "description": "The set of filters to apply to list data. These filters create a filter summary when the list includes the [`sky-list-filter-summary`](https://developer.blackbaud.com/skyux/components/list/filters) component.",
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "appliedFilters",
            "type": "ListFilterModel[]"
          },
          {
            "description": "The data to display. The list component requires this property or the `dataProvider` property. For checklist or multiselect grids, each row requires an `id` property to manage selected items with the `selectedIds` input and the `selectedIdsChange` event. If you do not provide an `id`, the list automatically generates one. To update data in your view outside of a `dataProvider`, you must use an observable instead of a static array.",
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "data",
            "type": "any[] | Observable<any[]>"
          },
          {
            "description": "The data provider that obtains the data to display. The list component requires this property or the `data` property. For lists that use `dataProvider` instead of `data`, consumers are responsible for managing all `ListDataRequestModel` properties.",
            "defaultValue": "SkyListInMemoryDataProvider",
            "kind": "directive-input",
            "name": "dataProvider",
            "type": "ListDataProvider"
          },
          {
            "kind": "directive-input",
            "name": "defaultView",
            "type": "ListViewComponent"
          },
          {
            "description": "The total number of items for the initial data set when initialized. When used in conjunction with `data` and `dataProvider`, it allows an initial data to be set with the need to call the `dataProvider`.",
            "kind": "directive-input",
            "name": "initialTotal",
            "type": "number"
          },
          {
            "description": "The function to apply as a global sort on the list.",
            "kind": "directive-input",
            "name": "searchFunction",
            "type": "Function"
          },
          {
            "description": "The set of IDs for the items to select in a checklist or multiselect grid. The IDs match the `id` properties of the `data` objects. Items with IDs that are not included are de-selected in the checklist or multiselect grid.",
            "kind": "directive-input",
            "name": "selectedIds",
            "type": "string[] | Observable<string[]>"
          },
          {
            "description": "The set of fields to sort by. If array of fields then sorted by order of array. For information about `ListSortFieldSelectorModel`, see the [shared classes for lists](https://developer.blackbaud.com/skyux-list-builder-common/docs/list-builder-common).",
            "kind": "directive-input",
            "name": "sortFields",
            "type": "ListSortFieldSelectorModel | ListSortFieldSelectorModel[] | Observable<ListSortFieldSelectorModel[]> | Observable<ListSortFieldSelectorModel>"
          },
          {
            "description": "Emits the filters applied to the list.",
            "kind": "directive-output",
            "name": "appliedFiltersChange",
            "type": "EventEmitter<ListFilterModel[]>"
          },
          {
            "description": "For list views that support item selection, emits the selected entries.",
            "kind": "directive-output",
            "name": "selectedIdsChange",
            "type": "EventEmitter<Map<string, boolean>>"
          }
        ],
        "deprecationReason": "List builder and its features are deprecated. Use data manager instead. For more information, see https://developer.blackbaud.com/skyux/components/data-manager.",
        "filePath": "libs/components/list-builder/src/lib/modules/list/list.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyListComponent",
        "selector": "sky-list"
      },
      {
        "anchorId": "class_sky-list-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyListModule"
          }
        ],
        "deprecationReason": "List builder and its features are deprecated. Use data manager instead. For more information, see https://developer.blackbaud.com/skyux/components/data-manager.",
        "filePath": "libs/components/list-builder/src/lib/modules/list/list.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyListModule"
      },
      {
        "anchorId": "class_list-filters-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListFiltersOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/filters/filters.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListFiltersOrchestrator"
      },
      {
        "anchorId": "class_list-filters-update-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListFiltersUpdateAction"
          },
          {
            "kind": "class-property",
            "name": "filters",
            "type": "ListFilterModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/filters/update.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListFiltersUpdateAction"
      },
      {
        "anchorId": "class_list-items-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListItemsOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/items/items.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListItemsOrchestrator"
      },
      {
        "anchorId": "class_list-items-load-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListItemsLoadAction"
          },
          { "kind": "class-property", "name": "count", "type": "number" },
          {
            "defaultValue": "true",
            "kind": "class-property",
            "name": "dataChanged",
            "type": "boolean"
          },
          {
            "kind": "class-property",
            "name": "items",
            "type": "ListItemModel[]"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "refresh",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/items/load.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListItemsLoadAction"
      },
      {
        "anchorId": "class_list-items-set-selected-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListItemsSetSelectedAction"
          },
          { "kind": "class-property", "name": "items", "type": "string[]" },
          {
            "defaultValue": "true",
            "kind": "class-property",
            "name": "refresh",
            "type": "boolean"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "selected",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/items/set-items-selected.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListItemsSetSelectedAction"
      },
      {
        "anchorId": "class_list-items-set-loading-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListItemsSetLoadingAction"
          },
          {
            "defaultValue": "true",
            "kind": "class-property",
            "name": "loading",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/items/set-loading.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListItemsSetLoadingAction"
      },
      {
        "anchorId": "type-alias_list-state-action",
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/list-state-action.type.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "type-alias",
        "name": "ListStateAction",
        "type": "ListItemsSetLoadingAction | ListItemsLoadAction | ListItemsSetSelectedAction | ListPagingSetMaxPagesAction | ListPagingSetItemsPerPageAction | ListPagingSetPageNumberAction | ListViewsLoadAction | ListViewsSetActiveAction | ListToolbarItemsLoadAction | ListToolbarSetExistsAction | ListSearchSetSearchTextAction | ListSearchSetFunctionsAction | ListSearchSetFieldSelectorsAction | ListSearchSetOptionsAction | ListSelectedSetLoadingAction | ListSelectedLoadAction | ListSelectedSetItemSelectedAction | ListSelectedSetItemsSelectedAction | ListToolbarSetTypeAction | ListSortSetFieldSelectorsAction | ListSortSetAvailableAction | ListSortSetGlobalAction | ListFiltersUpdateAction | ListToolbarItemsRemoveAction | ListToolbarItemsDisableAction"
      },
      {
        "anchorId": "class_list-state-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListStateModel"
          },
          {
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "filters",
            "type": "ListFilterModel[]"
          },
          {
            "kind": "class-property",
            "name": "items",
            "type": "AsyncList<ListItemModel>"
          },
          {
            "kind": "class-property",
            "name": "paging",
            "type": "ListPagingModel"
          },
          {
            "kind": "class-property",
            "name": "search",
            "type": "ListSearchModel"
          },
          {
            "kind": "class-property",
            "name": "selected",
            "type": "AsyncItem<ListSelectedModel>"
          },
          { "kind": "class-property", "name": "sort", "type": "ListSortModel" },
          {
            "kind": "class-property",
            "name": "toolbar",
            "type": "ListToolbarModel"
          },
          {
            "kind": "class-property",
            "name": "views",
            "type": "ListViewsModel"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/list-state.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListStateModel"
      },
      {
        "anchorId": "class_list-state-dispatcher",
        "children": [
          {
            "kind": "class-method",
            "name": "filtersUpdate",
            "parameters": [{ "name": "filters", "type": "ListFilterModel[]" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "searchSetFieldSelectors",
            "parameters": [{ "name": "fieldSelectors", "type": "string[]" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "searchSetFunctions",
            "parameters": [{ "name": "sortFunctions", "type": "Function[]" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "searchSetOptions",
            "parameters": [
              { "name": "searchOptions", "type": "ListSearchModel" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "searchSetText",
            "parameters": [{ "name": "searchText", "type": "string" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "setSelected",
            "parameters": [
              { "name": "selectedIds", "type": "string[]" },
              { "name": "selected", "type": "boolean" },
              { "defaultValue": "false", "name": "refresh", "type": "boolean" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "sortSetAvailable",
            "parameters": [
              { "name": "sortLabels", "type": "ListSortLabelModel[]" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "sortSetFieldSelectors",
            "parameters": [
              {
                "name": "fieldSelectors",
                "type": "ListSortFieldSelectorModel[]"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "sortSetGlobal",
            "parameters": [
              { "name": "sortLabels", "type": "ListSortLabelModel[]" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "toolbarAddItems",
            "parameters": [
              { "name": "items", "type": "ListToolbarItemModel[]" },
              { "defaultValue": "-1", "name": "index", "type": "number" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "toolbarExists",
            "parameters": [{ "name": "exists", "type": "boolean" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "toolbarRemoveItems",
            "parameters": [{ "name": "ids", "type": "string[]" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "toolbarSetDisabled",
            "parameters": [{ "name": "disabled", "type": "boolean" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "toolbarShowMultiselectToolbar",
            "parameters": [{ "name": "show", "type": "boolean" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "viewsSetActive",
            "parameters": [{ "name": "id", "type": "string" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListStateDispatcher"
          },
          { "kind": "class-property", "name": "filtersUpdate", "type": "void" },
          {
            "kind": "class-property",
            "name": "searchSetFieldSelectors",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "searchSetFunctions",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "searchSetOptions",
            "type": "void"
          },
          { "kind": "class-property", "name": "searchSetText", "type": "void" },
          { "kind": "class-property", "name": "setSelected", "type": "void" },
          {
            "kind": "class-property",
            "name": "sortSetAvailable",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "sortSetFieldSelectors",
            "type": "void"
          },
          { "kind": "class-property", "name": "sortSetGlobal", "type": "void" },
          {
            "kind": "class-property",
            "name": "toolbarAddItems",
            "type": "void"
          },
          { "kind": "class-property", "name": "toolbarExists", "type": "void" },
          {
            "kind": "class-property",
            "name": "toolbarRemoveItems",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "toolbarSetDisabled",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "toolbarShowMultiselectToolbar",
            "type": "void"
          },
          { "kind": "class-property", "name": "viewsSetActive", "type": "void" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/list-state.rxstate.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "ListStateDispatcher"
      },
      {
        "anchorId": "class_list-state-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListStateOrchestrator<T>"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/list-state.rxstate.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListStateOrchestrator",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "class_list-state",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListState"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/list-state.state-node.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "ListState"
      },
      {
        "anchorId": "class_list-paging-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListPagingModel"
          },
          {
            "kind": "class-property",
            "name": "itemsPerPage",
            "type": "number"
          },
          {
            "kind": "class-property",
            "name": "maxDisplayedPages",
            "type": "number"
          },
          { "kind": "class-property", "name": "pageCount", "type": "number" },
          { "kind": "class-property", "name": "pageNumber", "type": "number" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/paging/paging.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListPagingModel"
      },
      {
        "anchorId": "class_list-paging-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListPagingOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/paging/paging.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListPagingOrchestrator"
      },
      {
        "anchorId": "class_list-paging-set-items-per-page-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListPagingSetItemsPerPageAction"
          },
          { "kind": "class-property", "name": "itemsPerPage", "type": "number" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/paging/set-items-per-page.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListPagingSetItemsPerPageAction"
      },
      {
        "anchorId": "class_list-paging-set-max-pages-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListPagingSetMaxPagesAction"
          },
          { "kind": "class-property", "name": "maxPages", "type": "number" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/paging/set-max-pages.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListPagingSetMaxPagesAction"
      },
      {
        "anchorId": "class_list-paging-set-page-number-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListPagingSetPageNumberAction"
          },
          { "kind": "class-property", "name": "pageNumber", "type": "number" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/paging/set-page-number.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListPagingSetPageNumberAction"
      },
      {
        "anchorId": "class_list-search-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSearchModel"
          },
          {
            "description": "The columns to search. The columns correspond to `field` values that you specify with the list component's `data` property.",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "fieldSelectors",
            "type": "string[]"
          },
          {
            "description": "The array of functions that returns a `boolean` value of `true` when the search is successful. This property accepts a function of type `(data: any, searchText: string) => boolean>.`",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "functions",
            "type": "Function[]"
          },
          {
            "description": "The text to search.",
            "defaultValue": "\"\"",
            "kind": "class-property",
            "name": "searchText",
            "type": "string"
          }
        ],
        "description": "Specifies a function to dynamically manage the data source when users change the text in the list field. The search function must return an array or a promise of an array. The `search` property is particularly useful when the data source does not live in the source code.",
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/search/search.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListSearchModel"
      },
      {
        "anchorId": "class_list-search-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSearchOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/search/search.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSearchOrchestrator"
      },
      {
        "anchorId": "class_list-search-set-field-selectors-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSearchSetFieldSelectorsAction"
          },
          {
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "fieldSelectors",
            "type": "string[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/search/set-field-selectors.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSearchSetFieldSelectorsAction"
      },
      {
        "anchorId": "class_list-search-set-functions-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSearchSetFunctionsAction"
          },
          {
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "functions",
            "type": "Function[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/search/set-functions.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSearchSetFunctionsAction"
      },
      {
        "anchorId": "class_list-search-set-options-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSearchSetOptionsAction"
          },
          {
            "kind": "class-property",
            "name": "searchTextAction",
            "type": "ListSearchSetSearchTextAction"
          },
          {
            "kind": "class-property",
            "name": "setFieldSelectorsAction",
            "type": "ListSearchSetFieldSelectorsAction"
          },
          {
            "kind": "class-property",
            "name": "setFunctionsAction",
            "type": "ListSearchSetFunctionsAction"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/search/set-options.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSearchSetOptionsAction"
      },
      {
        "anchorId": "class_list-search-set-search-text-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSearchSetSearchTextAction"
          },
          { "kind": "class-property", "name": "searchText", "type": "string" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/search/set-search-text.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSearchSetSearchTextAction"
      },
      {
        "anchorId": "class_list-selected-load-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSelectedLoadAction"
          },
          { "kind": "class-property", "name": "items", "type": "string[]" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/selected/load.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSelectedLoadAction"
      },
      {
        "anchorId": "class_list-selected-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSelectedModel"
          },
          {
            "description": "A map of key value pairs that consists of IDs for selected items and boolean values for their selected states.",
            "kind": "class-property",
            "name": "selectedIdMap",
            "type": "Map<string, boolean>"
          }
        ],
        "description": "Contains data about the selected items in the list.",
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/selected/selected.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListSelectedModel"
      },
      {
        "anchorId": "class_list-selected-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSelectedOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/selected/selected.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSelectedOrchestrator"
      },
      {
        "anchorId": "class_list-selected-set-item-selected-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSelectedSetItemSelectedAction"
          },
          { "kind": "class-property", "name": "id", "type": "any" },
          { "kind": "class-property", "name": "selected", "type": "boolean" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/selected/set-item-selected.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSelectedSetItemSelectedAction"
      },
      {
        "anchorId": "class_list-selected-set-items-selected-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSelectedSetItemsSelectedAction"
          },
          {
            "kind": "class-property",
            "name": "items",
            "type": "string[] | Observable<string[]>"
          },
          {
            "defaultValue": "true",
            "kind": "class-property",
            "name": "refresh",
            "type": "boolean"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "selected",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/selected/set-items-selected.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSelectedSetItemsSelectedAction"
      },
      {
        "anchorId": "class_list-selected-set-loading-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSelectedSetLoadingAction"
          },
          {
            "defaultValue": "true",
            "kind": "class-property",
            "name": "loading",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/selected/set-loading.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSelectedSetLoadingAction"
      },
      {
        "anchorId": "class_list-sort-label-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSortLabelModel"
          },
          {
            "description": "Whether to sort in descending order.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "descending",
            "type": "boolean"
          },
          {
            "description": "The fields to sort.",
            "kind": "class-property",
            "name": "fieldSelector",
            "type": "string"
          },
          {
            "description": "The label type.",
            "kind": "class-property",
            "name": "fieldType",
            "type": "string"
          },
          {
            "description": "Whether to sort all fields.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "global",
            "type": "boolean"
          },
          {
            "description": "The text for the label.",
            "kind": "class-property",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "These properties are a work in progress, and we do not recommend using them.",
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/sort/label.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListSortLabelModel"
      },
      {
        "anchorId": "class_list-sort-set-available-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSortSetAvailableAction"
          },
          {
            "kind": "class-property",
            "name": "available",
            "type": "ListSortLabelModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/sort/set-available.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSortSetAvailableAction"
      },
      {
        "anchorId": "class_list-sort-set-field-selectors-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSortSetFieldSelectorsAction"
          },
          {
            "kind": "class-property",
            "name": "fieldSelectors",
            "type": "ListSortFieldSelectorModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/sort/set-field-selectors.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSortSetFieldSelectorsAction"
      },
      {
        "anchorId": "class_list-sort-set-global-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSortSetGlobalAction"
          },
          {
            "kind": "class-property",
            "name": "global",
            "type": "ListSortLabelModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/sort/set-global.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSortSetGlobalAction"
      },
      {
        "anchorId": "class_list-sort-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSortModel"
          },
          {
            "description": "The list of available views to sort.",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "available",
            "type": "ListSortLabelModel[]"
          },
          {
            "description": "The fields to sort. For information about `ListSortFieldSelectorModel`, see the [shared classes for lists](https://developer.blackbaud.com/skyux-list-builder-common/docs/list-builder-common).",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "fieldSelectors",
            "type": "ListSortFieldSelectorModel[]"
          },
          {
            "description": "The list views that the sort applies to.",
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "global",
            "type": "ListSortLabelModel[]"
          }
        ],
        "description": "Specifies a set of fields to sort by.",
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/sort/sort.model.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ListSortModel"
      },
      {
        "anchorId": "class_list-sort-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListSortOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/sort/sort.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListSortOrchestrator"
      },
      {
        "anchorId": "class_list-toolbar-items-disable-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarItemsDisableAction"
          },
          { "kind": "class-property", "name": "disable", "type": "boolean" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/disable.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarItemsDisableAction"
      },
      {
        "anchorId": "class_list-toolbar-items-load-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarItemsLoadAction"
          },
          {
            "defaultValue": "-1",
            "kind": "class-property",
            "name": "index",
            "type": "number"
          },
          {
            "kind": "class-property",
            "name": "items",
            "type": "ListToolbarItemModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/load.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarItemsLoadAction"
      },
      {
        "anchorId": "class_list-toolbar-items-remove-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarItemsRemoveAction"
          },
          { "kind": "class-property", "name": "ids", "type": "string[]" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/remove.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarItemsRemoveAction"
      },
      {
        "anchorId": "class_list-toolbar-set-exists-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarSetExistsAction"
          },
          { "kind": "class-property", "name": "exists", "type": "boolean" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/set-exists.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarSetExistsAction"
      },
      {
        "anchorId": "class_list-toolbar-set-type-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarSetTypeAction"
          },
          { "kind": "class-property", "name": "type", "type": "string" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/set-type.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarSetTypeAction"
      },
      {
        "anchorId": "class_list-toolbar-show-multiselect-toolbar-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarShowMultiselectToolbarAction"
          },
          { "kind": "class-property", "name": "exists", "type": "boolean" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/show-multiselect-toolbar.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarShowMultiselectToolbarAction"
      },
      {
        "anchorId": "class_list-toolbar-item-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarItemModel"
          },
          { "kind": "class-property", "name": "id", "type": "string" },
          {
            "defaultValue": "-1",
            "kind": "class-property",
            "name": "index",
            "type": "number"
          },
          { "kind": "class-property", "name": "location", "type": "string" },
          {
            "kind": "class-property",
            "name": "template",
            "type": "TemplateRef<unknown>"
          },
          { "kind": "class-property", "name": "view", "type": "string" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/toolbar-item.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarItemModel"
      },
      {
        "anchorId": "class_list-toolbar-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarModel"
          },
          { "kind": "class-property", "name": "disabled", "type": "boolean" },
          { "kind": "class-property", "name": "exists", "type": "boolean" },
          {
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "items",
            "type": "ListToolbarItemModel[]"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "showMultiselectToolbar",
            "type": "boolean"
          },
          { "kind": "class-property", "name": "type", "type": "string" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/toolbar.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarModel"
      },
      {
        "anchorId": "class_list-toolbar-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListToolbarOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/toolbar/toolbar.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListToolbarOrchestrator"
      },
      {
        "anchorId": "class_list-views-load-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewsLoadAction"
          },
          {
            "kind": "class-property",
            "name": "views",
            "type": "ListViewModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/views/load.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewsLoadAction"
      },
      {
        "anchorId": "class_list-views-set-active-action",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewsSetActiveAction"
          },
          { "kind": "class-property", "name": "view", "type": "string" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/views/set-active.action.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewsSetActiveAction"
      },
      {
        "anchorId": "class_list-view-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewModel"
          },
          { "kind": "class-property", "name": "id", "type": "string" },
          { "kind": "class-property", "name": "name", "type": "string" }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/views/view.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewModel"
      },
      {
        "anchorId": "class_list-views-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewsModel"
          },
          { "kind": "class-property", "name": "active", "type": "string" },
          {
            "defaultValue": "[]",
            "kind": "class-property",
            "name": "views",
            "type": "ListViewModel[]"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/views/views.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewsModel"
      },
      {
        "anchorId": "class_list-views-orchestrator",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ListViewsOrchestrator"
          }
        ],
        "filePath": "libs/components/list-builder/src/lib/modules/list/state/views/views.orchestrator.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "ListViewsOrchestrator"
      }
    ],
    "@skyux/select-field": [
      {
        "anchorId": "class_sky-select-field-picker-context",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySelectFieldPickerContext"
          },
          {
            "description": "An array of `SkySelectField` objects from the select field's `data` property. Use this property to populate the custom picker with items for users to select.",
            "kind": "class-property",
            "name": "data",
            "type": "Observable<SkySelectField[]>"
          },
          {
            "description": "Text from the select field's `pickerHeading` property. If your custom picker is a modal, use this property to display a header.",
            "kind": "class-property",
            "name": "headingText",
            "type": "string"
          },
          {
            "description": "The boolean value from the select field's `inMemorySearchEnabled`. When `false`, it circumvents the list-builder search function to enable consumers to provide results from a remote source by updating the `data` value.",
            "defaultValue": "true",
            "kind": "class-property",
            "name": "inMemorySearchEnabled",
            "type": "boolean"
          },
          {
            "description": "The select field's current value. If the select field's `selectMode` is set to `single`, then this value is a `SkySelectField` object. If `selectMode` is set to `multiple`, then this value is an array of `SkySelectField` objects. Use this property to select the corresponding items in the custom picker.",
            "kind": "class-property",
            "name": "selectedValue",
            "type": "any"
          },
          {
            "description": "The `SkySelectFieldSelectMode` value from the select field's `selectMode` property. Use this property to determine whether users can select one item or multiple items.",
            "kind": "class-property",
            "name": "selectMode",
            "type": "SkySelectFieldSelectMode"
          },
          {
            "description": "The boolean value from the select field's `showAddNewRecordButton` property. Use this property to determine whether to display a button in the custom picker for users to add items.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "showAddNewRecordButton",
            "type": "boolean"
          }
        ],
        "deprecationReason": "`SkySelectFieldComponent` is deprecated. Use `SkyLookupComponent` instead.",
        "description": "Provides values to a custom picker.",
        "filePath": "lib/modules/select-field/select-field-picker-context.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "SkySelectFieldPickerContext"
      },
      {
        "anchorId": "class_sky-select-field-component",
        "children": [
          {
            "description": "The ARIA label for the text input or button. This sets the `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the input or button includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "string"
          },
          {
            "description": "The HTML element ID of the element that labels the text input or button. This sets the `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the input or button does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "string"
          },
          {
            "description": "The `SkySelectFieldCustomPicker` object that displays a custom UI when users select the select field button.",
            "kind": "directive-input",
            "name": "customPicker",
            "type": "SkySelectFieldCustomPicker"
          },
          {
            "description": "Defines a data source to populate the modal picker with items that users can select. This property accepts an observable array of `SkySelectField` values. The `SkySelectField` type extends the any type and supports `id`, `label`, and `category` values.",
            "kind": "directive-input",
            "name": "data",
            "type": "Observable<SkySelectField[]>",
            "isRequired": true
          },
          {
            "description": "Whether to use the default search function. To circumvent the list-builder search function and provide search results from a remote source, set this property to `false` and specify the source with the *data* property.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "inMemorySearchEnabled",
            "type": "boolean"
          },
          {
            "description": "The label for the button when `selectMode` is set to `multiple`.",
            "defaultValue": "\"Select values\"",
            "kind": "directive-input",
            "name": "multipleSelectOpenButtonText",
            "type": "string"
          },
          {
            "description": "The header for the picker. When `selectMode` is set to `\"single\"`, the default header is \"Select a value.\" When `selectMode` is set to `\"multiple\"`, the default header is \"Select values.\"",
            "kind": "directive-input",
            "name": "pickerHeading",
            "type": "string"
          },
          {
            "description": "Whether to display a button in the picker for users to add items. Consumers must tie into the `addNewRecordButtonClick` event and provide the logic to add items.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showAddNewRecordButton",
            "type": "boolean"
          },
          {
            "description": "Tooltip text for the icon that clears the text input when `selectMode` is set to `\"single\"`. The clear icon appears after users select an item.",
            "defaultValue": "\"Clear selection\"",
            "kind": "directive-input",
            "name": "singleSelectClearButtonTitle",
            "type": "string"
          },
          {
            "description": "Tooltip text for the text input when `selectMode` is set to `\"single\"`.",
            "defaultValue": "\"Click to select a value\"",
            "kind": "directive-input",
            "name": "singleSelectOpenButtonTitle",
            "type": "string"
          },
          {
            "description": "Placeholder text to display in the text input when `selectMode` is set to `\"single\"` and no item is selected.",
            "defaultValue": "\"Select a value\"",
            "kind": "directive-input",
            "name": "singleSelectPlaceholderText",
            "type": "string"
          },
          {
            "description": "The property to highlight in the picker with bold text. The valid options are the values that the `data` property injects into the component: `\"id\"`, `\"label\"`, and `\"category\"`.",
            "defaultValue": "\"label\"",
            "kind": "directive-input",
            "name": "descriptorKey",
            "type": "string"
          },
          {
            "description": "Whether to disable the text input or button and prevent users from opening the picker on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The selection mode that determines whether users can select one item or multiple items. The valid options are `single`, which displays a text input, and `multiple`, which displays a button.",
            "defaultValue": "\"multiple\"",
            "kind": "directive-input",
            "name": "selectMode",
            "type": "SkySelectFieldSelectMode"
          },
          {
            "description": "Fires when users select the add button in the picker to add an item. The button appears when when `showAddNewRecordButton` is set to `true`.",
            "kind": "directive-output",
            "name": "addNewRecordButtonClick",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when the component loses focus. This event does not emit a value.",
            "kind": "directive-output",
            "name": "blur",
            "type": "EventEmitter<any>"
          },
          {
            "description": "Fires when a search is submitted from the picker's toolbar.",
            "kind": "directive-output",
            "name": "searchApplied",
            "type": "EventEmitter<string>"
          }
        ],
        "deprecationReason": "`SkySelectFieldComponent` is deprecated. Use `SkyLookupComponent` instead.",
        "filePath": "lib/modules/select-field/select-field.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkySelectFieldComponent",
        "selector": "sky-select-field"
      },
      {
        "anchorId": "class_sky-select-field-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySelectFieldModule"
          }
        ],
        "deprecationReason": "`SkySelectFieldComponent` is deprecated. Use `SkyLookupComponent` instead.",
        "filePath": "lib/modules/select-field/select-field.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkySelectFieldModule"
      },
      {
        "anchorId": "interface_sky-select-field-custom-picker",
        "children": [
          {
            "description": "The function to call when users select the text field or button.",
            "kind": "interface-property",
            "name": "open",
            "type": "Function"
          }
        ],
        "deprecationReason": "`SkySelectFieldComponent` is deprecated. Use `SkyLookupComponent` instead.",
        "filePath": "lib/modules/select-field/types/select-field-custom-picker.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkySelectFieldCustomPicker"
      },
      {
        "anchorId": "type-alias_sky-select-field-select-mode",
        "deprecationReason": "`SkySelectFieldComponent` is deprecated. Use `SkyLookupComponent` instead.",
        "filePath": "lib/modules/select-field/types/select-field-select-mode.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "SkySelectFieldSelectMode",
        "type": "\"single\" | \"multiple\""
      },
      {
        "anchorId": "interface_sky-select-field",
        "children": [
          {
            "description": "The category for an item.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "category",
            "type": "string"
          },
          {
            "description": "The description to display below an item's label when `selectMode` is set to `multiple`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "description",
            "type": "string"
          },
          {
            "description": "The ID for an item.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The label for an item.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          }
        ],
        "deprecationReason": "`SkySelectFieldComponent` is deprecated. Use `SkyLookupComponent` instead.",
        "description": "Extends the `any` type and supports values for data objects that you can inject into the select field component to populate the picker.",
        "filePath": "lib/modules/select-field/types/select-field.ts",
        "indexSignatures": [
          {
            "description": "All other properties for an item.",
            "name": "[index: string]",
            "type": "any",
            "parameters": [{ "name": "index", "type": "string" }]
          }
        ],
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkySelectField"
      }
    ],
    "@skyux/action-bars": [
      {
        "anchorId": "class_sky-summary-action-bar-actions-component",
        "description": "Contains actions for the `sky-summary-action-bar` component.",
        "filePath": "src/lib/modules/summary-action-bar/actions/summary-action-bar-actions.component.ts",
        "kind": "component",
        "name": "SkySummaryActionBarActionsComponent",
        "selector": "sky-summary-action-bar-actions"
      },
      {
        "anchorId": "class_sky-summary-action-bar-cancel-component",
        "children": [
          {
            "description": "Whether to disable the cancel action.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Fires when users select the cancel action.",
            "kind": "directive-output",
            "name": "actionClick",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Displays a cancel action.",
        "filePath": "src/lib/modules/summary-action-bar/actions/summary-action-bar-cancel.component.ts",
        "kind": "component",
        "name": "SkySummaryActionBarCancelComponent",
        "selector": "sky-summary-action-bar-cancel"
      },
      {
        "anchorId": "class_sky-summary-action-bar-primary-action-component",
        "children": [
          {
            "description": "Whether to disable the primary action.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Fires when users select the primary action.",
            "kind": "directive-output",
            "name": "actionClick",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Displays a primary button.",
        "filePath": "src/lib/modules/summary-action-bar/actions/summary-action-bar-primary-action.component.ts",
        "kind": "component",
        "name": "SkySummaryActionBarPrimaryActionComponent",
        "selector": "sky-summary-action-bar-primary-action"
      },
      {
        "anchorId": "class_sky-summary-action-bar-secondary-action-component",
        "children": [
          {
            "description": "Whether to disable a secondary action.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Fires when users select a secondary action.",
            "kind": "directive-output",
            "name": "actionClick",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Specifies secondary actions.",
        "filePath": "src/lib/modules/summary-action-bar/actions/summary-action-bar-secondary-action.component.ts",
        "kind": "component",
        "name": "SkySummaryActionBarSecondaryActionComponent",
        "selector": "sky-summary-action-bar-secondary-action"
      },
      {
        "anchorId": "class_sky-summary-action-bar-secondary-actions-component",
        "description": "Contains secondary actions specified with `sky-summary-action-bar-secondary-action` components.",
        "filePath": "src/lib/modules/summary-action-bar/actions/summary-action-bar-secondary-actions.component.ts",
        "kind": "component",
        "name": "SkySummaryActionBarSecondaryActionsComponent",
        "selector": "sky-summary-action-bar-secondary-actions"
      },
      {
        "anchorId": "class_sky-summary-action-bar-component",
        "description": "Contains the `sky-summary-action-bar-actions` and `sky-summary-action-bar-summary` components.",
        "filePath": "src/lib/modules/summary-action-bar/summary-action-bar.component.ts",
        "kind": "component",
        "name": "SkySummaryActionBarComponent",
        "selector": "sky-summary-action-bar"
      },
      {
        "anchorId": "class_sky-summary-action-bar-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySummaryActionBarModule"
          }
        ],
        "filePath": "src/lib/modules/summary-action-bar/summary-action-bar.module.ts",
        "kind": "module",
        "name": "SkySummaryActionBarModule"
      },
      {
        "anchorId": "class_sky-summary-action-bar-summary-component",
        "description": "Specifies the summary information to display.",
        "filePath": "src/lib/modules/summary-action-bar/summary/summary-action-bar-summary.component.ts",
        "kind": "component",
        "name": "SkySummaryActionBarSummaryComponent",
        "selector": "sky-summary-action-bar-summary"
      }
    ],
    "@skyux/action-bars/testing": [
      {
        "anchorId": "interface_sky-summary-action-bar-fixture-action",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttonText",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "isDisabled",
            "type": "boolean"
          },
          {
            "kind": "interface-property",
            "name": "click",
            "type": "Promise<void>"
          }
        ],
        "filePath": "testing/src/legacy/summary-action-bar/summary-action-bar-fixture-action.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkySummaryActionBarFixtureAction"
      },
      {
        "anchorId": "class_sky-summary-action-bar-fixture",
        "children": [
          {
            "description": "Returns the all elements that are descendants of the node that matches the selector query within the summary body element.",
            "kind": "class-method",
            "name": "queryAllSummaryBody",
            "parameters": [
              {
                "description": "The selector query to use.",
                "name": "query",
                "type": "string"
              }
            ],
            "type": "NodeList"
          },
          {
            "description": "Returns the first element that is a descendant of the node that matches the selector query within the summary body element.",
            "kind": "class-method",
            "name": "querySummaryBody",
            "parameters": [
              {
                "description": "The selector query to use.",
                "name": "query",
                "type": "string"
              }
            ],
            "type": "HTMLElement"
          },
          {
            "description": "Toggles the secondary action dropdown open or closed, if in responsive mode.",
            "kind": "class-method",
            "name": "toggleSecondaryActionDropdown",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Toggles the summary content area open or closed, if in responsive mode.",
            "kind": "class-method",
            "name": "toggleSummaryContentVisibility",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySummaryActionBarFixture"
          },
          {
            "description": "The cancel action model.",
            "kind": "class-property",
            "name": "cancelAction",
            "type": "SkySummaryActionBarFixtureAction"
          },
          {
            "description": "The primary action model.",
            "kind": "class-property",
            "name": "primaryAction",
            "type": "SkySummaryActionBarFixtureAction"
          },
          {
            "description": "The collection of secondary action models.",
            "kind": "class-property",
            "name": "secondaryActions",
            "type": "SkySummaryActionBarFixtureAction[]"
          },
          {
            "description": "A flag indicating whether or not the summary content is visible.",
            "kind": "class-property",
            "name": "summaryBodyIsVisible",
            "type": "boolean"
          },
          {
            "description": "Returns the all elements that are descendants of the node that matches the selector query within the summary body element.",
            "kind": "class-property",
            "name": "queryAllSummaryBody",
            "type": "NodeList"
          },
          {
            "description": "Returns the first element that is a descendant of the node that matches the selector query within the summary body element.",
            "kind": "class-property",
            "name": "querySummaryBody",
            "type": "HTMLElement"
          },
          {
            "description": "Toggles the secondary action dropdown open or closed, if in responsive mode.",
            "kind": "class-property",
            "name": "toggleSecondaryActionDropdown",
            "type": "Promise<void>"
          },
          {
            "description": "Toggles the summary content area open or closed, if in responsive mode.",
            "kind": "class-property",
            "name": "toggleSummaryContentVisibility",
            "type": "Promise<void>"
          }
        ],
        "description": "Allows interaction with a SKY UX summary action bar component.",
        "filePath": "testing/src/legacy/summary-action-bar/summary-action-bar-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkySummaryActionBarFixture"
      },
      {
        "anchorId": "class_sky-summary-action-bar-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySummaryActionBarTestingModule"
          }
        ],
        "filePath": "testing/src/legacy/summary-action-bar/summary-action-bar.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkySummaryActionBarTestingModule"
      }
    ],
    "@skyux/autonumeric": [
      {
        "anchorId": "class_sky-autonumeric-options-provider",
        "children": [
          {
            "description": "The value for a settings object to pass to the AutoNumeric library. This overrides any default options specified by the `skyAutonumeric` attribute.",
            "kind": "class-method",
            "name": "getConfig",
            "parameters": [],
            "type": "SkyAutonumericOptions"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAutonumericOptionsProvider"
          },
          {
            "description": "The value for a settings object to pass to the AutoNumeric library. This overrides any default options specified by the `skyAutonumeric` attribute.",
            "kind": "class-property",
            "name": "getConfig",
            "type": "SkyAutonumericOptions"
          }
        ],
        "description": "Provides options to the underlying [AutoNumeric library](https://github.com/autoNumeric/autoNumeric). This can set global options on multiple input fields.",
        "filePath": "lib/modules/autonumeric/autonumeric-options-provider.ts",
        "kind": "service",
        "name": "SkyAutonumericOptionsProvider"
      },
      {
        "anchorId": "type-alias_sky-autonumeric-options",
        "description": "Custom options to provide to the underlying [AutoNumeric library](https://github.com/autoNumeric/autoNumeric). The value can be set to `string`, which is an alias that represents a [set of predefined set of options](https://github.com/autoNumeric/autoNumeric#predefined-options) for a currency or language, or `Options`, which is a [custom set of options](https://github.com/autoNumeric/autoNumeric#options) that override any default options that the `skyAutonumeric` attribute specifies.",
        "filePath": "lib/modules/autonumeric/autonumeric-options.ts",
        "kind": "type-alias",
        "name": "SkyAutonumericOptions",
        "type": "string | keyof AutoNumeric.PredefinedOptions | AutoNumeric.Options"
      },
      {
        "anchorId": "class_sky-autonumeric-directive",
        "children": [
          {
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "skyAutonumericFormChangesUnformatted",
            "type": "undefined | boolean"
          },
          {
            "description": "Assigns the name of a property from `SkyAutonumericOptionsProvider`.",
            "kind": "directive-input",
            "name": "skyAutonumeric",
            "type": "void"
          }
        ],
        "description": "Wraps the [autoNumeric utility](https://github.com/autoNumeric/autoNumeric) to format any type of number, including currency.",
        "filePath": "lib/modules/autonumeric/autonumeric.directive.ts",
        "kind": "directive",
        "name": "SkyAutonumericDirective",
        "selector": "input[skyAutonumeric]"
      },
      {
        "anchorId": "class_sky-autonumeric-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAutonumericModule"
          }
        ],
        "filePath": "lib/modules/autonumeric/autonumeric.module.ts",
        "kind": "module",
        "name": "SkyAutonumericModule"
      }
    ],
    "@skyux/colorpicker": [
      {
        "anchorId": "class_sky-colorpicker-input-directive",
        "children": [
          {
            "description": "Whether to display a transparency slider for users to select transparency levels.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "allowTransparency",
            "type": "boolean"
          },
          {
            "description": "The type of transparency in the transparency slider.",
            "defaultValue": "\"hex6\"",
            "kind": "directive-input",
            "name": "alphaChannel",
            "type": "string"
          },
          {
            "description": "The format for the color when the colorpicker uses a native input element such as a standard text input or a button. This property accepts `rgba`, `hex`, or `hsla`, but we do not recommend using it because users never see or use its value. Instead, if you need to access this format value, see the demo for an example.",
            "defaultValue": "\"rgba\"",
            "kind": "directive-input",
            "name": "outputFormat",
            "type": "string"
          },
          {
            "description": "The array of colors to load as preset choices. The colorpicker displays the colors in a series of 12 boxes for users to select.",
            "kind": "directive-input",
            "name": "presetColors",
            "type": "string[]"
          },
          {
            "description": "This property is deprecated and does not affect the colorpicker. We recommend against using it.",
            "defaultValue": "\"rgba\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "returnFormat",
            "type": "string"
          },
          {
            "description": "Creates the colorpicker element and dropdown. Place this attribute on an `input` element or `button` element, wrap the element in a `sky-colorpicker` component, and set the attribute to the instance of the `sky-colorpicker` component.",
            "kind": "directive-input",
            "name": "skyColorpickerInput",
            "type": "λ1",
            "isRequired": true
          },
          {
            "description": "The ID should only be settable when `labelText` is undefined. When `labelText` is set, the ID is defined by `SkyColorpickerComponent`.",
            "kind": "directive-input",
            "name": "id",
            "type": "void"
          },
          {
            "description": "The initial color to load in the colorpicker. Use a reactive or template-driven form to set this value. This property is deprecated. As an alternative, we recommend the `formControlName` property on reactive forms or `ngModel` on template-driven forms. See the demo for examples.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "initialColor",
            "type": "string"
          }
        ],
        "description": "Creates the colorpicker element and dropdown.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/colorpicker-input.directive.ts",
        "kind": "directive",
        "name": "SkyColorpickerInputDirective",
        "selector": "[skyColorpickerInput]"
      },
      {
        "anchorId": "class_sky-colorpicker-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the colorpicker label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the colorpicker label. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "The ARIA label for the colorpicker. This sets the colorpicker's `aria-label` attribute [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility) when the colorpicker does not include a visible label. If the colorpicker includes a visible label, use `labelledBy` instead.",
            "defaultValue": "\"Select color value\"",
            "kind": "directive-input",
            "name": "label",
            "type": "undefined | string"
          },
          {
            "description": "Whether to hide `labelText` from view.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "labelHidden",
            "type": "boolean"
          },
          {
            "description": "The HTML element ID of the element that labels the colorpicker. This sets the colorpicker's `aria-labelledby` attribute [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility). If the colorpicker does not include a visible label, use `label` instead.",
            "kind": "directive-input",
            "name": "labelledBy",
            "type": "undefined | string"
          },
          {
            "description": "The observable to send commands to the colorpicker. The commands should respect the `SkyColorPickerMessage` type.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkyColorpickerMessage>"
          },
          {
            "description": "The name of the [Font Awesome 4.7](https://fontawesome.com/v4.7/icons/) icon to overlay on top of the picker. Do not specify the `fa fa-` classes.",
            "kind": "directive-input",
            "name": "pickerButtonIcon",
            "type": "undefined | string"
          },
          {
            "description": "The type of icon to display. Specifying `fa` will display a Font Awesome icon, while specifying `skyux` will display an icon from the custom SKY UX icon font. Note that the custom SKY UX icon font is currently in beta.",
            "defaultValue": "'fa'",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "pickerButtonIconType",
            "type": "SkyIconType"
          },
          {
            "description": "Whether to display a reset button to let users return to the default color.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "showResetButton",
            "type": "boolean"
          },
          {
            "description": "Whether the colorpicker is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the text editor.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "description": "The text to display as the colorpicker's label. Use this instead of a `label` element when the label is text-only. Specifying `labelText` also enables automatic error message handling for standard colorpicker errors.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "Fires when users select **Apply** in the colorpicker to apply a color.",
            "kind": "directive-output",
            "name": "selectedColorApplied",
            "type": "EventEmitter<SkyColorpickerResult>"
          },
          {
            "description": "Fires when users select a color in the colorpicker.",
            "kind": "directive-output",
            "name": "selectedColorChanged",
            "type": "EventEmitter<SkyColorpickerOutput>"
          }
        ],
        "description": "The SKY UX-themed replacement for the HTML `input` element with `type=\"color\"`. The value that users select is driven through the `ngModel` attribute specified on the `input` element.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/colorpicker.component.ts",
        "kind": "component",
        "name": "SkyColorpickerComponent",
        "selector": "sky-colorpicker"
      },
      {
        "anchorId": "class_sky-colorpicker-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColorpickerModule"
          }
        ],
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/colorpicker.module.ts",
        "kind": "module",
        "name": "SkyColorpickerModule"
      },
      {
        "anchorId": "interface_sky-colorpicker-change-axis",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "maxRange",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "xAxis",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "xCoordinate",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "yAxis",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "yCoordinate",
            "type": "number"
          }
        ],
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-axis.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyColorpickerChangeAxis"
      },
      {
        "anchorId": "interface_sky-colorpicker-cmyk",
        "children": [
          {
            "description": "The percentage of cyan.",
            "kind": "interface-property",
            "name": "cyan",
            "type": "number"
          },
          {
            "description": "The percentage of black.",
            "kind": "interface-property",
            "name": "key",
            "type": "number"
          },
          {
            "description": "The percentage of magenta.",
            "kind": "interface-property",
            "name": "magenta",
            "type": "number"
          },
          {
            "description": "The percentage of yellow.",
            "kind": "interface-property",
            "name": "yellow",
            "type": "number"
          }
        ],
        "description": "Colors specified as a combination of cyan, magenta, yellow, and black.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-cmyk.ts",
        "kind": "interface",
        "name": "SkyColorpickerCmyk"
      },
      {
        "anchorId": "interface_sky-colorpicker-change-color",
        "children": [
          { "kind": "interface-property", "name": "color", "type": "string" },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "colorValue",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "maxRange",
            "type": "number"
          }
        ],
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-color.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyColorpickerChangeColor"
      },
      {
        "anchorId": "interface_sky-colorpicker-hsla",
        "children": [
          {
            "description": "The alpha channel to set the opacity.",
            "kind": "interface-property",
            "name": "alpha",
            "type": "number"
          },
          {
            "description": "The hue, which is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.",
            "kind": "interface-property",
            "name": "hue",
            "type": "number"
          },
          {
            "description": "The lightness, which is a percentage value where 0 percent is black and 100 percent is white.",
            "kind": "interface-property",
            "name": "lightness",
            "type": "number"
          },
          {
            "description": "The saturation, which is a percentage value where 0 percent is a shade of gray and 100 percent is the full color.",
            "kind": "interface-property",
            "name": "saturation",
            "type": "number"
          }
        ],
        "description": "Colors specified as a combination of hue, saturation, and lightness with an alpha channel to set the opacity.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-hsla.ts",
        "kind": "interface",
        "name": "SkyColorpickerHsla"
      },
      {
        "anchorId": "interface_sky-colorpicker-hsva",
        "children": [
          {
            "description": "The alpha channel to set the opacity.",
            "kind": "interface-property",
            "name": "alpha",
            "type": "number"
          },
          {
            "description": "The hue, which is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.",
            "kind": "interface-property",
            "name": "hue",
            "type": "number"
          },
          {
            "description": "The saturation, which is a percentage value where 0 percent is a shade of gray and 100 percent is the full color.",
            "kind": "interface-property",
            "name": "saturation",
            "type": "number"
          },
          {
            "description": "The brightness or intensity, which is a percentage value of the color where 0 is completely black and 100 is the brightest and reveals the most color.",
            "kind": "interface-property",
            "name": "value",
            "type": "number"
          }
        ],
        "description": "Colors specified as a combination of hue, saturation, and value with an alpha channel to set the opacity.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-hsva.ts",
        "kind": "interface",
        "name": "SkyColorpickerHsva"
      },
      {
        "anchorId": "enum_sky-colorpicker-message-type",
        "description": "The commands to provide the colorpicker.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-message-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Closes the colorpicker.",
            "kind": "enum-member",
            "name": "Close",
            "type": "3"
          },
          {
            "description": "Opens the colorpicker.",
            "kind": "enum-member",
            "name": "Open",
            "type": "0"
          },
          {
            "description": "Resets the selection in the colorpicker.",
            "kind": "enum-member",
            "name": "Reset",
            "type": "1"
          },
          {
            "description": "Toggles whether to display a reset button beside the colorpicker.",
            "kind": "enum-member",
            "name": "ToggleResetButton",
            "type": "2"
          }
        ],
        "name": "SkyColorpickerMessageType"
      },
      {
        "anchorId": "interface_sky-colorpicker-message",
        "children": [
          {
            "description": "The message type.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "SkyColorpickerMessageType"
          }
        ],
        "description": "Provides commands for the colorpicker through a message stream.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-message.ts",
        "kind": "interface",
        "name": "SkyColorpickerMessage"
      },
      {
        "anchorId": "interface_sky-colorpicker-output",
        "children": [
          {
            "description": "The CMYK values for the selected color.",
            "kind": "interface-property",
            "name": "cmyk",
            "type": "SkyColorpickerCmyk"
          },
          {
            "description": "The CMYK text value for the selected color.",
            "kind": "interface-property",
            "name": "cmykText",
            "type": "string"
          },
          {
            "description": "The hex value for the selected color.",
            "kind": "interface-property",
            "name": "hex",
            "type": "string"
          },
          {
            "description": "The HSLA values for the selected color.",
            "kind": "interface-property",
            "name": "hsla",
            "type": "SkyColorpickerHsla"
          },
          {
            "description": "The HSLA text value for the selected color.",
            "kind": "interface-property",
            "name": "hslaText",
            "type": "string"
          },
          {
            "description": "The HSVA values for the selected color.",
            "kind": "interface-property",
            "name": "hsva",
            "type": "SkyColorpickerHsva"
          },
          {
            "description": "The RGBA values for the selected color.",
            "kind": "interface-property",
            "name": "rgba",
            "type": "SkyColorpickerRgba"
          },
          {
            "description": "The RGBA text value for the selected color.",
            "kind": "interface-property",
            "name": "rgbaText",
            "type": "string"
          }
        ],
        "description": "Describes the color that users select in the colorpicker.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-output.ts",
        "kind": "interface",
        "name": "SkyColorpickerOutput"
      },
      {
        "anchorId": "interface_sky-colorpicker-result",
        "children": [
          {
            "description": "Describes the color that users select in the colorpicker.",
            "kind": "interface-property",
            "name": "color",
            "type": "SkyColorpickerOutput"
          }
        ],
        "description": "Indicates the color that users apply when they select Apply in the colorpicker.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-result.ts",
        "kind": "interface",
        "name": "SkyColorpickerResult"
      },
      {
        "anchorId": "interface_sky-colorpicker-rgba",
        "children": [
          {
            "description": "The alpha channel to set the opacity.",
            "kind": "interface-property",
            "name": "alpha",
            "type": "number"
          },
          {
            "description": "The percentage of blue.",
            "kind": "interface-property",
            "name": "blue",
            "type": "number"
          },
          {
            "description": "The percentage of green.",
            "kind": "interface-property",
            "name": "green",
            "type": "number"
          },
          {
            "description": "The percentage of red.",
            "kind": "interface-property",
            "name": "red",
            "type": "number"
          }
        ],
        "description": "Colors specified as a combination of red, green, and blue with an alpha channel to set the opacity.",
        "filePath": "libs/components/colorpicker/src/lib/modules/colorpicker/types/colorpicker-rgba.ts",
        "kind": "interface",
        "name": "SkyColorpickerRgba"
      }
    ],
    "@skyux/colorpicker/testing": [
      {
        "anchorId": "class_sky-colorpicker-fixture",
        "children": [
          {
            "description": "Set the colorpicker's color hex code.",
            "kind": "class-method",
            "name": "setValueFromHex",
            "parameters": [
              {
                "description": "The new color hex code. Must include '#'.",
                "name": "hexValue",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Set the colorpicker's color to the provided preset color at the given index.",
            "kind": "class-method",
            "name": "setValueFromPresets",
            "parameters": [
              {
                "description": "The index of the color in the `presetColors` list to select.",
                "name": "presetIndex",
                "type": "number"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Set the colorpicker's color RGB values.",
            "kind": "class-method",
            "name": "setValueFromRGBA",
            "parameters": [
              {
                "description": "The red color value.",
                "name": "red",
                "type": "number"
              },
              {
                "description": "The green color value.",
                "name": "green",
                "type": "number"
              },
              {
                "description": "The blue color value.",
                "name": "blue",
                "type": "number"
              },
              {
                "description": "The alpha channel value.",
                "name": "alpha",
                "type": "number"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColorpickerFixture"
          },
          {
            "description": "The colorpicker's currently selected color formatted to the `outputFormat`.",
            "kind": "class-property",
            "name": "value",
            "type": "string"
          },
          {
            "description": "Set the colorpicker's color hex code.",
            "kind": "class-property",
            "name": "setValueFromHex",
            "type": "Promise<void>"
          },
          {
            "description": "Set the colorpicker's color to the provided preset color at the given index.",
            "kind": "class-property",
            "name": "setValueFromPresets",
            "type": "Promise<void>"
          },
          {
            "description": "Set the colorpicker's color RGB values.",
            "kind": "class-property",
            "name": "setValueFromRGBA",
            "type": "Promise<void>"
          }
        ],
        "deprecationReason": "Use `SkyColorpickerHarness` instead.",
        "description": "Allows interaction with a SKY UX colorpicker component.",
        "filePath": "libs/components/colorpicker/testing/src/legacy/colorpicker-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyColorpickerFixture"
      },
      {
        "anchorId": "interface_sky-colorpicker-dropdown-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyColorpickerDropdownHarness` instances.",
        "filePath": "libs/components/colorpicker/testing/src/modules/colorpicker/colorpicker-dropdown-harness.filters.ts",
        "kind": "interface",
        "name": "SkyColorpickerDropdownHarnessFilters"
      },
      {
        "anchorId": "class_sky-colorpicker-dropdown-harness",
        "children": [
          {
            "description": "Whether transparency is allowed.",
            "kind": "class-method",
            "name": "allowsTransparency",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Clicks the colorpicker dropdown apply button.",
            "kind": "class-method",
            "name": "clickApplyButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the colorpicker dropdown cancel button.",
            "kind": "class-method",
            "name": "clickCancelButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks a specified swatch in the color preset section.",
            "kind": "class-method",
            "name": "clickPresetColorSwatch",
            "parameters": [
              {
                "description": "Hex code of the swatch to click.",
                "name": "swatchHex",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets an array of the hex codes of the preset color swatches.",
            "kind": "class-method",
            "name": "getPresetColorSwatches",
            "parameters": [],
            "type": "Promise<string[]>"
          },
          {
            "description": "Enters a value into the alpha input box.",
            "kind": "class-method",
            "name": "setAlphaValue",
            "parameters": [
              {
                "description": "A decimal value from 0-1.",
                "name": "value",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the blue input box.",
            "kind": "class-method",
            "name": "setBlueValue",
            "parameters": [
              {
                "description": "A value from 0-255",
                "name": "value",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the green input box.",
            "kind": "class-method",
            "name": "setGreenValue",
            "parameters": [
              {
                "description": "A value from 0-255",
                "name": "value",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the hex input box.",
            "kind": "class-method",
            "name": "setHexValue",
            "parameters": [
              {
                "description": "A hex value",
                "name": "value",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the red input box.",
            "kind": "class-method",
            "name": "setRedValue",
            "parameters": [
              {
                "description": "A value from 0-255",
                "name": "value",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyColorpickerDropdownHarnessFilters"
              }
            ],
            "type": "HarnessPredicate<SkyColorpickerDropdownHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColorpickerDropdownHarness"
          },
          {
            "defaultValue": "'.sky-colorpicker-container'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Whether transparency is allowed.",
            "kind": "class-property",
            "name": "allowsTransparency",
            "type": "Promise<boolean>"
          },
          {
            "description": "Clicks the colorpicker dropdown apply button.",
            "kind": "class-property",
            "name": "clickApplyButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the colorpicker dropdown cancel button.",
            "kind": "class-property",
            "name": "clickCancelButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks a specified swatch in the color preset section.",
            "kind": "class-property",
            "name": "clickPresetColorSwatch",
            "type": "Promise<void>"
          },
          {
            "description": "Gets an array of the hex codes of the preset color swatches.",
            "kind": "class-property",
            "name": "getPresetColorSwatches",
            "type": "Promise<string[]>"
          },
          {
            "description": "Enters a value into the alpha input box.",
            "kind": "class-property",
            "name": "setAlphaValue",
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the blue input box.",
            "kind": "class-property",
            "name": "setBlueValue",
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the green input box.",
            "kind": "class-property",
            "name": "setGreenValue",
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the hex input box.",
            "kind": "class-property",
            "name": "setHexValue",
            "type": "Promise<void>"
          },
          {
            "description": "Enters a value into the red input box.",
            "kind": "class-property",
            "name": "setRedValue",
            "type": "Promise<void>"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyColorpickerDropdownHarness>"
          }
        ],
        "description": "Harness for interacting with colorpicker dropdown in tests.",
        "filePath": "libs/components/colorpicker/testing/src/modules/colorpicker/colorpicker-dropdown-harness.ts",
        "kind": "class",
        "name": "SkyColorpickerDropdownHarness"
      },
      {
        "anchorId": "interface_sky-colorpicker-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyColorpickerHarness` instances.",
        "filePath": "libs/components/colorpicker/testing/src/modules/colorpicker/colorpicker-harness.filters.ts",
        "kind": "interface",
        "name": "SkyColorpickerHarnessFilters"
      },
      {
        "anchorId": "class_sky-colorpicker-harness",
        "children": [
          {
            "description": "Clicks the colorpicker button.",
            "kind": "class-method",
            "name": "clickColorpickerButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the reset button. Throws an error if the reset button is hidden.",
            "kind": "class-method",
            "name": "clickResetButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the colorpicker button's `aria-label`.",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the colorpicker button's `aria-labelledby`",
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the `SkyColorpickerDropdownHarness` for the colorpicker dropdown controlled by the colorpicker button. Throws an error if the dropdown is not open.",
            "kind": "class-method",
            "name": "getColorpickerDropdown",
            "parameters": [],
            "type": "Promise<SkyColorpickerDropdownHarness>"
          },
          {
            "description": "Gets the `SkyIconHarness` for the colorpicker icon.",
            "kind": "class-method",
            "name": "getColorpickerIcon",
            "parameters": [],
            "type": "Promise<SkyIconHarness>"
          },
          {
            "description": "Gets the help inline popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the colorpicker component's hint text.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the colorpicker component's label is hidden.",
            "kind": "class-method",
            "name": "getLabelHidden",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the colorpicker component's label text.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the custom error has fired.",
            "kind": "class-method",
            "name": "hasError",
            "parameters": [{ "name": "errorName", "type": "string" }],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the required error has fired.",
            "kind": "class-method",
            "name": "hasRequiredError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the reset button is shown.",
            "kind": "class-method",
            "name": "hasResetButton",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the colorpicker component is open.",
            "kind": "class-method",
            "name": "isColorpickerOpen",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the colorpicker component is stacked.",
            "kind": "class-method",
            "name": "isStacked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyColorpickerHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyColorpickerHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyColorpickerHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColorpickerHarness"
          },
          {
            "defaultValue": "'sky-colorpicker'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the colorpicker button.",
            "kind": "class-property",
            "name": "clickColorpickerButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the reset button. Throws an error if the reset button is hidden.",
            "kind": "class-property",
            "name": "clickResetButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the colorpicker button's `aria-label`.",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the colorpicker button's `aria-labelledby`",
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the `SkyColorpickerDropdownHarness` for the colorpicker dropdown controlled by the colorpicker button. Throws an error if the dropdown is not open.",
            "kind": "class-property",
            "name": "getColorpickerDropdown",
            "type": "Promise<SkyColorpickerDropdownHarness>"
          },
          {
            "description": "Gets the `SkyIconHarness` for the colorpicker icon.",
            "kind": "class-property",
            "name": "getColorpickerIcon",
            "type": "Promise<SkyIconHarness>"
          },
          {
            "description": "Gets the help inline popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the colorpicker component's hint text.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the colorpicker component's label is hidden.",
            "kind": "class-property",
            "name": "getLabelHidden",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the colorpicker component's label text.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the custom error has fired.",
            "kind": "class-property",
            "name": "hasError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the required error has fired.",
            "kind": "class-property",
            "name": "hasRequiredError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the reset button is shown.",
            "kind": "class-property",
            "name": "hasResetButton",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the colorpicker component is open.",
            "kind": "class-property",
            "name": "isColorpickerOpen",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the colorpicker component is stacked.",
            "kind": "class-property",
            "name": "isStacked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyColorpickerHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyColorpickerHarness>"
          }
        ],
        "description": "Harness for interacting with colorpicker components in tests.",
        "filePath": "libs/components/colorpicker/testing/src/modules/colorpicker/colorpicker-harness.ts",
        "kind": "class",
        "name": "SkyColorpickerHarness"
      }
    ],
    "@skyux/help-inline": [
      {
        "anchorId": "class_sky-help-inline-component",
        "children": [
          {
            "description": "The ID of the element that the help inline button controls. This property [supports accessibility rules for disclosures](https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure). For more information about the `aria-controls` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-controls).",
            "kind": "directive-input",
            "name": "ariaControls",
            "type": "undefined | string"
          },
          {
            "description": "Whether an element or popover controlled by the help inline button is expanded. If popoverContent is specified, this value is overridden with popover expanded status.",
            "kind": "directive-input",
            "name": "ariaExpanded",
            "type": "undefined | boolean"
          },
          {
            "description": "The ARIA label for the help inline button. This sets the button's `aria-label` to provide a text equivalent for screen readers. Will be overridden if label text is set.",
            "defaultValue": "\"Show help content\"",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "A unique key that identifies the [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) content to display when the button is clicked.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The ID of the element associated with the help inline button. This is used to set the button's `aria-labelledby` to provides a text equivalent for screen readers. Takes precedence over `ariaLabel` and `labelText` inputs.",
            "kind": "directive-input",
            "name": "labelledBy",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified, clicking the help inline button opens a popover with this content and optional title.",
            "kind": "directive-input",
            "name": "popoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `popoverContent` is also specified.",
            "kind": "directive-input",
            "name": "popoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The label of the component the help inline button is attached to.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "void"
          },
          {
            "description": "Fires when the user clicks the help inline button.",
            "kind": "directive-output",
            "name": "actionClick",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Inserts a help button beside an element, such as a field, to display contextual information about the element.",
        "filePath": "libs/components/help-inline/src/lib/modules/help-inline/help-inline.component.ts",
        "kind": "component",
        "name": "SkyHelpInlineComponent",
        "selector": "sky-help-inline"
      },
      {
        "anchorId": "class_sky-help-inline-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHelpInlineModule"
          }
        ],
        "filePath": "libs/components/help-inline/src/lib/modules/help-inline/help-inline.module.ts",
        "kind": "module",
        "name": "SkyHelpInlineModule"
      }
    ],
    "@skyux/help-inline/testing": [
      {
        "anchorId": "interface_sky-help-inline-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyHelpInlineHarness` instances.",
        "filePath": "libs/components/help-inline/testing/src/modules/help-inline/help-inline-harness.filters.ts",
        "kind": "interface",
        "name": "SkyHelpInlineHarnessFilters"
      },
      {
        "anchorId": "class_sky-help-inline-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "click",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the `aria-controls` value.",
            "kind": "class-method",
            "name": "getAriaControls",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the `aria-expanded` value.",
            "kind": "class-method",
            "name": "getAriaExpanded",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the `aria-label` value.",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the `aria-labelledby` value.",
            "kind": "class-method",
            "name": "getAriaLabelledBy",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the label text.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyHelpInlineHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyHelpInlineHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyHelpInlineHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHelpInlineHarness"
          },
          {
            "defaultValue": "'sky-help-inline'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "click",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the `aria-controls` value.",
            "kind": "class-property",
            "name": "getAriaControls",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the `aria-expanded` value.",
            "kind": "class-property",
            "name": "getAriaExpanded",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the `aria-label` value.",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the `aria-labelledby` value.",
            "kind": "class-property",
            "name": "getAriaLabelledBy",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the label text.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getPopoverContent",
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyHelpInlineHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyHelpInlineHarness>"
          }
        ],
        "description": "Harness for interacting with a help inline button component in tests.",
        "filePath": "libs/components/help-inline/testing/src/modules/help-inline/help-inline-harness.ts",
        "kind": "class",
        "name": "SkyHelpInlineHarness"
      }
    ],
    "@skyux/inline-form": [
      {
        "anchorId": "class_sky-inline-form-component",
        "children": [
          {
            "description": "The template to instantiate the inline form.",
            "kind": "directive-input",
            "name": "template",
            "type": "undefined | TemplateRef<unknown>",
            "isRequired": true
          },
          {
            "description": "Configuration options for the buttons to display with the inline form.",
            "kind": "directive-input",
            "name": "config",
            "type": "undefined | SkyInlineFormConfig",
            "isRequired": true
          },
          {
            "description": "Whether to display the inline form. Users can toggle between displaying and hiding the inline form.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showForm",
            "type": "undefined | boolean"
          },
          {
            "description": "Fires when users close the inline form.",
            "kind": "directive-output",
            "name": "close",
            "type": "EventEmitter<SkyInlineFormCloseArgs>"
          }
        ],
        "description": "Renders form content in the current view instead of a separate modal.",
        "filePath": "lib/modules/inline-form/inline-form.component.ts",
        "kind": "component",
        "name": "SkyInlineFormComponent",
        "selector": "sky-inline-form"
      },
      {
        "anchorId": "class_sky-inline-form-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInlineFormModule"
          }
        ],
        "filePath": "lib/modules/inline-form/inline-form.module.ts",
        "kind": "module",
        "name": "SkyInlineFormModule"
      },
      {
        "anchorId": "type-alias_sky-inline-form-button-action",
        "filePath": "lib/modules/inline-form/types/inline-form-button-action.ts",
        "isInternal": true,
        "kind": "type-alias",
        "name": "SkyInlineFormButtonAction",
        "type": "\"done\" | \"save\" | \"delete\" | \"cancel\""
      },
      {
        "anchorId": "interface_sky-inline-form-button-config",
        "children": [
          {
            "description": "The `string` value to return when users click a custom button. This correlates to the `reason` in `SkyInlineFormCloseArgs`. The standard values are `cancel`, `delete`, `done`, and `save`, but other custom values are also allowed.",
            "kind": "interface-property",
            "name": "action",
            "type": "string"
          },
          {
            "description": "Whether to disable the button.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The background color and style for the button. The valid options are `default`, `link`, and `primary`. These values set the background color and style from the [secondary, link, and primary button classes](https://developer.blackbaud.com/skyux/components/button) respectively.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "styleType",
            "type": "string"
          },
          {
            "description": "The label for the button.",
            "kind": "interface-property",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "Specifies configuration options for the inline form's buttons when `buttonLayout` is set to `Custom`.",
        "filePath": "lib/modules/inline-form/types/inline-form-button-config.ts",
        "kind": "interface",
        "name": "SkyInlineFormButtonConfig"
      },
      {
        "anchorId": "enum_sky-inline-form-button-layout",
        "filePath": "lib/modules/inline-form/types/inline-form-button-layout.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Displays custom buttons.",
            "kind": "enum-member",
            "name": "Custom",
            "type": "0"
          },
          {
            "description": "Displays Done and Cancel buttons.",
            "kind": "enum-member",
            "name": "DoneCancel",
            "type": "1"
          },
          {
            "description": "Displays Done, Delete, and Cancel buttons.",
            "kind": "enum-member",
            "name": "DoneDeleteCancel",
            "type": "2"
          },
          {
            "description": "Displays Save and Cancel buttons.",
            "kind": "enum-member",
            "name": "SaveCancel",
            "type": "3"
          },
          {
            "description": "Displays Save, Delete, and Cancel buttons.",
            "kind": "enum-member",
            "name": "SaveDeleteCancel",
            "type": "4"
          }
        ],
        "name": "SkyInlineFormButtonLayout"
      },
      {
        "anchorId": "interface_sky-inline-form-close-args",
        "children": [
          {
            "description": "Returns a `string` value to explain why users clicked a custom button and initiated a `close` event. This correlates to either the `action` in `SkyInlineFormButtonConfig` for custom buttons or the standard value of `cancel`, `delete`, `done`, or `save` for predefined buttons.",
            "kind": "interface-property",
            "name": "reason",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/inline-form/types/inline-form-close-args.ts",
        "kind": "interface",
        "name": "SkyInlineFormCloseArgs"
      },
      {
        "anchorId": "interface_sky-inline-form-config",
        "children": [
          {
            "description": "The buttons to display with the inline form. The valid options are `Custom` for custom buttons, `DoneCancel` for Done and Cancel buttons, `DoneDeleteCancel` for Done, Delete, and Cancel buttons, `SaveCancel` for Save and Cancel buttons, and `SaveDeleteCancel` for Save, Delete, and Cancel buttons.",
            "kind": "interface-property",
            "name": "buttonLayout",
            "type": "SkyInlineFormButtonLayout"
          },
          {
            "description": "Configuration options for the inline form's buttons when `buttonLayout` is set to `Custom`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttons",
            "type": "SkyInlineFormButtonConfig[]"
          }
        ],
        "description": "Specifies configuration options for the buttons to display with the inline form.",
        "filePath": "lib/modules/inline-form/types/inline-form-config.ts",
        "kind": "interface",
        "name": "SkyInlineFormConfig"
      }
    ],
    "@skyux/phone-field": [
      {
        "anchorId": "class_sky-phone-field-input-directive",
        "children": [
          {
            "description": "Whether to prevent validation on the phone number input. For validation, phone numbers are driven through the `ngModel` attribute that you specify on an `input` element or on a `FormControl` in a reactive form. To prevent validation, set this property to `true`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "skyPhoneFieldNoValidate",
            "type": "boolean"
          },
          {
            "description": "Whether to disable the phone field on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          }
        ],
        "description": "Creates a button, search input, and text input for entering and validating international phone numbers. Place this attribute on an `input` element, and wrap that element in a `sky-phone-field` component. By default, the country selector button displays a flag icon for the default country, and the phone number input displays a sample of the correct phone number format. When users select the country selector button, they expose the country search input, which is [an autocomplete input](https://developer.blackbaud.com/skyux/components/autocomplete) that allows them to select different countries. When users enter `+` followed by an international dial code in the phone number input, the country automatically switches to the country associated with the dial code.",
        "filePath": "libs/components/phone-field/src/lib/modules/phone-field/phone-field-input.directive.ts",
        "kind": "directive",
        "name": "SkyPhoneFieldInputDirective",
        "selector": "[skyPhoneFieldInput]"
      },
      {
        "anchorId": "class_sky-phone-field-component",
        "children": [
          {
            "description": "The [International Organization for Standardization Alpha 2](https://www.nationsonline.org/oneworld/country_code_list.htm) country codes for the countries that users can select. By default, all countries are available.",
            "kind": "directive-input",
            "name": "supportedCountryISOs",
            "type": "undefined | string[]"
          },
          {
            "description": "Whether phone number extensions are allowed.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "allowExtensions",
            "type": "boolean"
          },
          {
            "description": "The [International Organization for Standardization Alpha 2](https://www.nationsonline.org/oneworld/country_code_list.htm) country code for the default country. The country selector button displays a flag icon for this default country until users select a different country.",
            "defaultValue": "\"us\"",
            "kind": "directive-input",
            "name": "defaultCountry",
            "type": "string"
          },
          {
            "description": "The format for validated phone numbers. Options include: `\"default\"`, `\"international\"`, and `\"national\"`.",
            "defaultValue": "\"default\"",
            "kind": "directive-input",
            "name": "returnFormat",
            "type": "SkyPhoneFieldNumberReturnFormat"
          },
          {
            "description": "The currently selected country to validate against.",
            "kind": "directive-input",
            "name": "selectedCountry",
            "type": "undefined | SkyPhoneFieldCountry"
          },
          {
            "description": "Emits a `SkyPhoneFieldCountry` object when the selected country in the country search input changes.",
            "kind": "directive-output",
            "name": "selectedCountryChange",
            "type": "EventEmitter<SkyPhoneFieldCountry>"
          }
        ],
        "filePath": "libs/components/phone-field/src/lib/modules/phone-field/phone-field.component.ts",
        "kind": "component",
        "name": "SkyPhoneFieldComponent",
        "selector": "sky-phone-field"
      },
      {
        "anchorId": "class_sky-phone-field-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPhoneFieldModule"
          }
        ],
        "filePath": "libs/components/phone-field/src/lib/modules/phone-field/phone-field.module.ts",
        "kind": "module",
        "name": "SkyPhoneFieldModule"
      },
      {
        "anchorId": "interface_sky-phone-field-country",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "areaCodes",
            "type": "string[]"
          },
          {
            "description": "The country's international dial code.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "dialCode",
            "type": "string"
          },
          {
            "description": "The placeholder value that demonstrates the country's number format. This value is `undefined` until a country is selected to validate against.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "exampleNumber",
            "type": "string"
          },
          {
            "description": "The country's [International Organization for Standardization Alpha 2](https://www.nationsonline.org/oneworld/country_code_list.htm) country code.",
            "kind": "interface-property",
            "name": "iso2",
            "type": "string"
          },
          {
            "description": "The name of the country.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "name",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "priority",
            "type": "number"
          }
        ],
        "filePath": "libs/components/phone-field/src/lib/modules/phone-field/types/country.ts",
        "kind": "interface",
        "name": "SkyPhoneFieldCountry"
      },
      {
        "anchorId": "type-alias_sky-phone-field-number-return-format",
        "description": "Represents the format for validated phone numbers. `default` returns the national format for the default country, `national` returns the national format for all countries, and `international` returns the international format for all countries.",
        "filePath": "libs/components/phone-field/src/lib/modules/phone-field/types/number-return-format.ts",
        "kind": "type-alias",
        "name": "SkyPhoneFieldNumberReturnFormat",
        "type": "\"default\" | \"international\" | \"national\""
      }
    ],
    "@skyux/phone-field/testing": [
      {
        "anchorId": "class_sky-phone-field-fixture",
        "children": [
          {
            "description": "Blurs the phone field input and returns a promise that indicates when the action is complete.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Returns the selected country iso2 code.",
            "kind": "class-method",
            "name": "getSelectedCountryIso2",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Returns the selected country name.",
            "kind": "class-method",
            "name": "getSelectedCountryName",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a boolean promise indicating if the phone field is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a boolean promise indicating if the phone field is valid.",
            "kind": "class-method",
            "name": "isValid",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Opens the country selector, performs a search, but makes no selection.",
            "kind": "class-method",
            "name": "searchCountry",
            "parameters": [
              {
                "description": "The name of the country to select.",
                "name": "searchText",
                "type": "string"
              }
            ],
            "type": "Promise<string[]>"
          },
          {
            "description": "Opens the country selector, performs a search, and selects the first result (if any).",
            "kind": "class-method",
            "name": "selectCountry",
            "parameters": [
              {
                "description": "The name of the country to select.",
                "name": "searchText",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Sets the value of the input field for the phone field.",
            "kind": "class-method",
            "name": "setInputText",
            "parameters": [{ "name": "inputText", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPhoneFieldFixture"
          },
          {
            "description": "The value of the input field for the phone field.",
            "kind": "class-property",
            "name": "inputText",
            "type": "string"
          },
          {
            "description": "Blurs the phone field input and returns a promise that indicates when the action is complete.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "description": "Returns the selected country iso2 code.",
            "kind": "class-property",
            "name": "getSelectedCountryIso2",
            "type": "Promise<null | string>"
          },
          {
            "description": "Returns the selected country name.",
            "kind": "class-property",
            "name": "getSelectedCountryName",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a boolean promise indicating if the phone field is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a boolean promise indicating if the phone field is valid.",
            "kind": "class-property",
            "name": "isValid",
            "type": "Promise<boolean>"
          },
          {
            "description": "Opens the country selector, performs a search, but makes no selection.",
            "kind": "class-property",
            "name": "searchCountry",
            "type": "Promise<string[]>"
          },
          {
            "description": "Opens the country selector, performs a search, and selects the first result (if any).",
            "kind": "class-property",
            "name": "selectCountry",
            "type": "Promise<void>"
          },
          {
            "description": "Sets the value of the input field for the phone field.",
            "kind": "class-property",
            "name": "setInputText",
            "type": "Promise<void>"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX phone field component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/phone-field/testing/src/legacy/phone-field/phone-field-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyPhoneFieldFixture"
      },
      {
        "anchorId": "class_sky-phone-field-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPhoneFieldTestingModule"
          }
        ],
        "filePath": "libs/components/phone-field/testing/src/legacy/phone-field/phone-field-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyPhoneFieldTestingModule"
      },
      {
        "anchorId": "interface_sky-phone-field-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyPhoneFieldHarness instances.",
        "filePath": "libs/components/phone-field/testing/src/modules/phone-field/phone-field-harness-filters.ts",
        "kind": "interface",
        "name": "SkyPhoneFieldHarnessFilters"
      },
      {
        "anchorId": "class_sky-phone-field-harness",
        "children": [
          {
            "description": "Gets the phone field input harness.",
            "kind": "class-method",
            "name": "getControl",
            "parameters": [],
            "type": "Promise<SkyPhoneFieldInputHarness>"
          },
          {
            "description": "Returns the selected country iso2 code.",
            "kind": "class-method",
            "name": "getSelectedCountryIso2",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Returns the selected country name.",
            "kind": "class-method",
            "name": "getSelectedCountryName",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Opens the country selector, performs a search, but makes no selection.",
            "kind": "class-method",
            "name": "searchCountry",
            "parameters": [
              {
                "description": "The name of the country to select.",
                "name": "searchText",
                "type": "string"
              }
            ],
            "type": "Promise<string[]>"
          },
          {
            "description": "Opens the country selector, performs a search, and selects the first result (if any).",
            "kind": "class-method",
            "name": "selectCountry",
            "parameters": [
              {
                "description": "The name of the country to select.",
                "name": "searchText",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPhoneFieldHarness` that meets certain criteria.  These filters only work for standalone phone fields. For phone fields wrapped inside `sky-input-box`, place filters on the input box instead and query the datepicker using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyPhoneFieldHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyPhoneFieldHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPhoneFieldHarness"
          },
          {
            "description": "Finds a standard phone field component, or a phone field component that is wrapped by an input box component. For input box implementations, we need to use the `.sky-input-box` selector since the `sky-country-field` element is removed from the DOM.",
            "defaultValue": "'sky-phone-field,.sky-input-box'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the phone field input harness.",
            "kind": "class-property",
            "name": "getControl",
            "type": "Promise<SkyPhoneFieldInputHarness>"
          },
          {
            "description": "Returns the selected country iso2 code.",
            "kind": "class-property",
            "name": "getSelectedCountryIso2",
            "type": "Promise<null | string>"
          },
          {
            "description": "Returns the selected country name.",
            "kind": "class-property",
            "name": "getSelectedCountryName",
            "type": "Promise<null | string>"
          },
          {
            "description": "Opens the country selector, performs a search, but makes no selection.",
            "kind": "class-property",
            "name": "searchCountry",
            "type": "Promise<string[]>"
          },
          {
            "description": "Opens the country selector, performs a search, and selects the first result (if any).",
            "kind": "class-property",
            "name": "selectCountry",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPhoneFieldHarness` that meets certain criteria.  These filters only work for standalone phone fields. For phone fields wrapped inside `sky-input-box`, place filters on the input box instead and query the datepicker using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyPhoneFieldHarness>"
          }
        ],
        "description": "Harness for interacting with a phone field component in tests.",
        "filePath": "libs/components/phone-field/testing/src/modules/phone-field/phone-field-harness.ts",
        "kind": "class",
        "name": "SkyPhoneFieldHarness"
      }
    ],
    "@skyux/text-editor": [
      {
        "anchorId": "class_sky-rich-text-display-component",
        "children": [
          {
            "description": "The rich text to display.",
            "kind": "directive-input",
            "name": "richText",
            "type": "void"
          }
        ],
        "filePath": "lib/modules/rich-text-display/rich-text-display.component.ts",
        "kind": "component",
        "name": "SkyRichTextDisplayComponent",
        "selector": "sky-rich-text-display"
      },
      {
        "anchorId": "class_sky-rich-text-display-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRichTextDisplayModule"
          }
        ],
        "filePath": "lib/modules/rich-text-display/rich-text-display.module.ts",
        "kind": "module",
        "name": "SkyRichTextDisplayModule"
      },
      {
        "anchorId": "class_sky-text-editor-menubar-component",
        "children": [
          {
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "kind": "directive-input",
            "name": "editorFocusStream",
            "type": "Subject<void>"
          },
          {
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "menus",
            "type": "SkyTextEditorMenuType[]"
          },
          {
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "mergeFields",
            "type": "SkyTextEditorMergeField[]"
          }
        ],
        "filePath": "lib/modules/text-editor/menubar/text-editor-menubar.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyTextEditorMenubarComponent",
        "selector": "sky-text-editor-menubar"
      },
      {
        "anchorId": "class_sky-text-editor-component",
        "children": [
          {
            "description": "Whether to put focus on the editor after it renders.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "autofocus",
            "type": "undefined | boolean"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the text editor label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the text editor. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the text editor is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the text editor.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "description": "Whether to disable the text editor on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The fonts to include in the font picker.",
            "defaultValue": "[{name: 'Blackbaud Sans', value: '\"Blackbaud Sans\", Arial, sans-serif'}, {name: 'Arial', value: 'Arial'}, {name: 'Arial Black', value: '\"Arial Black\"'}, {name: 'Courier New', value: '\"Courier New\"'}, {name: 'Georgia', value: 'Georgia, serif'}, {name: 'Tahoma', value: 'Tahoma, Geneva, sans-serif'}, {name: 'Times New Roman', value: '\"Times New Roman\"'}, {name: 'Trebuchet MS', value: '\"Trebuchet MS\", sans-serif'}, {name: 'Verdana', value: 'Verdana, Geneva, sans-serif'}]",
            "kind": "directive-input",
            "name": "fontList",
            "type": "SkyTextEditorFont[]"
          },
          {
            "description": "The font sizes to include in the font size picker.",
            "defaultValue": "[6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 26, 28, 36, 48]",
            "kind": "directive-input",
            "name": "fontSizeList",
            "type": "number[]"
          },
          {
            "description": "The unique ID attribute for the text editor. By default, the component generates a random ID.",
            "kind": "directive-input",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The initial styles for all content, including background color, font size, and link state.",
            "kind": "directive-input",
            "name": "initialStyleState",
            "type": "SkyTextEditorStyleState"
          },
          {
            "description": "The text to display as the text editor's label.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "The target window options for adding a hyperlink.",
            "defaultValue": "[ 'new', 'existing' ]",
            "kind": "directive-input",
            "name": "linkWindowOptions",
            "type": "SkyTextEditorLinkWindowOptionsType[]"
          },
          {
            "description": "The menus to include in the menu bar.",
            "defaultValue": "[ 'edit', 'format' ]",
            "kind": "directive-input",
            "name": "menus",
            "type": "SkyTextEditorMenuType[]"
          },
          {
            "description": "The merge fields to include in the merge field menu.",
            "kind": "directive-input",
            "name": "mergeFields",
            "type": "SkyTextEditorMergeField[]"
          },
          {
            "description": "Placeholder text to display when the text entry area is empty.",
            "kind": "directive-input",
            "name": "placeholder",
            "type": "string"
          },
          {
            "description": "The actions to include in the toolbar in the specified order.",
            "defaultValue": "[ 'font-family', 'font-size', 'font-style', 'color', 'list', 'link ]",
            "kind": "directive-input",
            "name": "toolbarActions",
            "type": "SkyTextEditorToolbarActionType[]"
          }
        ],
        "description": "The text editor component lets users format and manipulate text.",
        "filePath": "lib/modules/text-editor/text-editor.component.ts",
        "kind": "component",
        "name": "SkyTextEditorComponent",
        "selector": "sky-text-editor"
      },
      {
        "anchorId": "class_sky-text-editor-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTextEditorModule"
          }
        ],
        "filePath": "lib/modules/text-editor/text-editor.module.ts",
        "kind": "module",
        "name": "SkyTextEditorModule"
      },
      {
        "anchorId": "class_sky-text-editor-toolbar-component",
        "children": [
          {
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "fontList",
            "type": "SkyTextEditorFont[]"
          },
          {
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "fontSizeList",
            "type": "number[]"
          },
          {
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "linkWindowOptions",
            "type": "SkyTextEditorLinkWindowOptionsType[]"
          },
          {
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "toolbarActions",
            "type": "SkyTextEditorToolbarActionType[]"
          },
          {
            "kind": "directive-input",
            "name": "editorFocusStream",
            "type": "Subject<void>"
          },
          {
            "kind": "directive-input",
            "name": "styleState",
            "type": "SkyTextEditorStyleState"
          }
        ],
        "filePath": "lib/modules/text-editor/toolbar/text-editor-toolbar.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyTextEditorToolbarComponent",
        "selector": "sky-text-editor-toolbar"
      },
      {
        "anchorId": "interface_sky-text-editor-font",
        "children": [
          {
            "description": "The display name of the font.",
            "kind": "interface-property",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The CSS `font-family` value for the font.",
            "kind": "interface-property",
            "name": "value",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/text-editor/types/font-state.ts",
        "kind": "interface",
        "name": "SkyTextEditorFont"
      },
      {
        "anchorId": "type-alias_sky-text-editor-link-window-options-type",
        "filePath": "lib/modules/text-editor/types/link-window-options-type.ts",
        "kind": "type-alias",
        "name": "SkyTextEditorLinkWindowOptionsType",
        "type": "\"new\" | \"existing\""
      },
      {
        "anchorId": "type-alias_sky-text-editor-menu-type",
        "filePath": "lib/modules/text-editor/types/menu-type.ts",
        "kind": "type-alias",
        "name": "SkyTextEditorMenuType",
        "type": "\"edit\" | \"format\" | \"merge-field\""
      },
      {
        "anchorId": "interface_sky-text-editor-style-state",
        "children": [
          {
            "description": "The background color. Accepts any CSS color value.",
            "kind": "interface-property",
            "name": "backColor",
            "type": "string"
          },
          {
            "description": "Whether to make text bold.",
            "kind": "interface-property",
            "name": "boldState",
            "type": "boolean"
          },
          {
            "description": "The font family. Available values: `\"Blackbaud Sans\"`, `\"Arial\"`, `\"sans-serif\"`, `\"Arial Black\"`, `\"Courier New\"`, and `\"Times New Roman\"`.",
            "kind": "interface-property",
            "name": "font",
            "type": "string"
          },
          {
            "description": "The font color. Accepts any CSS color value.",
            "kind": "interface-property",
            "name": "fontColor",
            "type": "string"
          },
          {
            "description": "The font size in pixels.",
            "kind": "interface-property",
            "name": "fontSize",
            "type": "number"
          },
          {
            "description": "Whether to italicize text.",
            "kind": "interface-property",
            "name": "italicState",
            "type": "boolean"
          },
          {
            "description": "Whether to format text as a link.",
            "kind": "interface-property",
            "name": "linkState",
            "type": "boolean"
          },
          {
            "description": "Whether to underline text.",
            "kind": "interface-property",
            "name": "underlineState",
            "type": "boolean"
          }
        ],
        "filePath": "lib/modules/text-editor/types/style-state.ts",
        "kind": "interface",
        "name": "SkyTextEditorStyleState"
      },
      {
        "anchorId": "interface_sky-text-editor-merge-field",
        "children": [
          {
            "description": "The identifier for the merge field.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "Display text for the merge field. If it is more than 18 characters, the component truncates to 15 characters.",
            "kind": "interface-property",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The `src` attribute for a preview image to represent the merge field in the text editor. By default, the `name` value appears in a blue rectangle.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "previewImageUrl",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/text-editor/types/text-editor-merge-field.ts",
        "kind": "interface",
        "name": "SkyTextEditorMergeField"
      },
      {
        "anchorId": "type-alias_sky-text-editor-toolbar-action-type",
        "filePath": "lib/modules/text-editor/types/toolbar-action-type.ts",
        "kind": "type-alias",
        "name": "SkyTextEditorToolbarActionType",
        "type": "\"font-family\" | \"font-size\" | \"font-style\" | \"color\" | \"list\" | \"alignment\" | \"indentation\" | \"undo-redo\" | \"link\""
      },
      {
        "anchorId": "class_sky-text-editor-url-modal-component",
        "filePath": "lib/modules/text-editor/url-modal/text-editor-url-modal.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyTextEditorUrlModalComponent",
        "selector": "sky-text-editor-url-modal"
      }
    ],
    "@skyux/animations": [
      {
        "anchorId": "variable_sky-animation-emerge",
        "filePath": "lib/emerge.ts",
        "kind": "variable",
        "name": "skyAnimationEmerge",
        "type": "AnimationTriggerMetadata"
      },
      {
        "anchorId": "variable_sky-animation-slide",
        "filePath": "lib/slide.ts",
        "kind": "variable",
        "name": "skyAnimationSlide",
        "type": "AnimationTriggerMetadata"
      }
    ],
    "@skyux/indicators": [
      {
        "anchorId": "class_sky-alert-component",
        "children": [
          {
            "description": "Whether to include a close button for users to dismiss the alert.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "closeable",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether the alert is closed.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "closed",
            "type": "undefined | boolean"
          },
          {
            "description": "The style for the alert, which determines the icon and background color. The valid options are `danger`, `info`, `success`, and `warning`.",
            "defaultValue": "\"warning\"",
            "kind": "directive-input",
            "name": "alertType",
            "type": "void"
          },
          {
            "description": "The text to be read by screen readers for users who cannot see the indicator icon when `descriptionType` is `custom`.",
            "kind": "directive-input",
            "name": "customDescription",
            "type": "undefined | string"
          },
          {
            "description": "The predefined text to be read by screen readers for users who cannot see the alert icon. This property is optional but will be required in future versions of SKY UX.",
            "kind": "directive-input",
            "name": "descriptionType",
            "type": "undefined | SkyIndicatorDescriptionType"
          },
          {
            "description": "Fires when users close the alert.",
            "kind": "directive-output",
            "name": "closedChange",
            "type": "EventEmitter<boolean>"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/alert/alert.component.ts",
        "kind": "component",
        "name": "SkyAlertComponent",
        "selector": "sky-alert"
      },
      {
        "anchorId": "class_sky-alert-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAlertModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/alert/alert.module.ts",
        "kind": "module",
        "name": "SkyAlertModule"
      },
      {
        "anchorId": "class_sky-chevron-component",
        "children": [
          {
            "description": "The element whose contents are controlled by the chevron. This sets the chevron's `aria-controls` attribute [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-controls` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-controls).",
            "kind": "directive-input",
            "name": "ariaControls",
            "type": "undefined | string"
          },
          {
            "description": "The ARIA label for the chevron. This sets the chevron's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the chevron button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The direction that the chevron points, which can be up or down.",
            "kind": "directive-input",
            "name": "direction",
            "type": "void"
          },
          {
            "description": "Fires when the direction of the chevron changes.",
            "kind": "directive-output",
            "name": "directionChange",
            "type": "EventEmitter<string>"
          }
        ],
        "description": "Creates an accessible button that wraps the chevron icon.",
        "filePath": "libs/components/indicators/src/lib/modules/chevron/chevron.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyChevronComponent",
        "selector": "sky-chevron"
      },
      {
        "anchorId": "class_sky-chevron-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyChevronModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/chevron/chevron.module.ts",
        "kind": "module",
        "name": "SkyChevronModule"
      },
      {
        "anchorId": "class_sky-expansion-indicator-component",
        "children": [
          {
            "description": "The direction that the chevron points, which can be up or down.",
            "kind": "directive-input",
            "name": "direction",
            "type": "void"
          }
        ],
        "description": "Displays a chevron icon.",
        "filePath": "libs/components/indicators/src/lib/modules/expansion-indicator/expansion-indicator.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyExpansionIndicatorComponent",
        "selector": "sky-expansion-indicator"
      },
      {
        "anchorId": "class_sky-expansion-indicator-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyExpansionIndicatorModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/expansion-indicator/expansion-indicator.module.ts",
        "kind": "module",
        "name": "SkyExpansionIndicatorModule"
      },
      {
        "anchorId": "class_sky-illustration-resolver-service",
        "children": [
          {
            "description": "Resolves a URL for the specified illustration name.",
            "kind": "class-method",
            "name": "resolveUrl",
            "parameters": [{ "name": "name", "type": "string" }],
            "type": "Promise<string>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIllustrationResolverService"
          },
          {
            "description": "Resolves a URL for the specified illustration name.",
            "kind": "class-property",
            "name": "resolveUrl",
            "type": "Promise<string>"
          }
        ],
        "description": "Resolves information about spot illustrations.",
        "filePath": "libs/components/indicators/src/lib/modules/illustration/illustration-resolver.service.ts",
        "kind": "service",
        "name": "SkyIllustrationResolverService"
      },
      {
        "anchorId": "type-alias_sky-illustration-size",
        "filePath": "libs/components/indicators/src/lib/modules/illustration/illustration-size.ts",
        "kind": "type-alias",
        "name": "SkyIllustrationSize",
        "type": "\"sm\" | \"md\" | \"lg\" | \"xl\""
      },
      {
        "anchorId": "class_sky-illustration-component",
        "children": [
          {
            "description": "The name of the illustration to display.",
            "kind": "directive-input",
            "name": "name",
            "type": "InputSignal<string>",
            "isRequired": true
          },
          {
            "description": "The size of the illustration.",
            "kind": "directive-input",
            "name": "size",
            "type": "InputSignal<SkyIllustrationSize>",
            "isRequired": true
          }
        ],
        "description": "Displays a spot illustration at the specified size.",
        "filePath": "libs/components/indicators/src/lib/modules/illustration/illustration.component.ts",
        "kind": "component",
        "name": "SkyIllustrationComponent",
        "selector": "sky-illustration"
      },
      {
        "anchorId": "class_sky-illustration-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIllustrationModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/illustration/illustration.module.ts",
        "kind": "module",
        "name": "SkyIllustrationModule"
      },
      {
        "anchorId": "class_sky-key-info-label-component",
        "description": "Specifies a label to display in smaller text under or beside the value. To display a help button beside the label, include a help button element, such as `sky-help-inline`, in the `sky-key-info` element and a `sky-control-help` CSS class on that help button element.",
        "filePath": "libs/components/indicators/src/lib/modules/key-info/key-info-label.component.ts",
        "kind": "component",
        "name": "SkyKeyInfoLabelComponent",
        "selector": "sky-key-info-label"
      },
      {
        "anchorId": "type-alias_sky-key-info-layout-type",
        "filePath": "libs/components/indicators/src/lib/modules/key-info/key-info-layout-type.ts",
        "kind": "type-alias",
        "name": "SkyKeyInfoLayoutType",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "anchorId": "class_sky-key-info-value-component",
        "description": "Specifies a value to display in larger, bold text.",
        "filePath": "libs/components/indicators/src/lib/modules/key-info/key-info-value.component.ts",
        "kind": "component",
        "name": "SkyKeyInfoValueComponent",
        "selector": "sky-key-info-value"
      },
      {
        "anchorId": "class_sky-key-info-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the key info. Clicking the button invokes global help as configured by the application.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the key info. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The layout for the key info. The vertical layout places the label under the value, while the horizontal layout places the label beside the value.",
            "defaultValue": "\"vertical\"",
            "kind": "directive-input",
            "name": "layout",
            "type": "undefined | SkyKeyInfoLayoutType"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/key-info/key-info.component.ts",
        "kind": "component",
        "name": "SkyKeyInfoComponent",
        "selector": "sky-key-info"
      },
      {
        "anchorId": "class_sky-key-info-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyKeyInfoModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/key-info/key-info.module.ts",
        "kind": "module",
        "name": "SkyKeyInfoModule"
      },
      {
        "anchorId": "type-alias_sky-label-type",
        "filePath": "libs/components/indicators/src/lib/modules/label/label-type.ts",
        "kind": "type-alias",
        "name": "SkyLabelType",
        "type": "\"danger\" | \"info\" | \"success\" | \"warning\""
      },
      {
        "anchorId": "class_sky-label-component",
        "children": [
          {
            "description": "The text to be read by screen readers for users who cannot see the indicator icon when `descriptionType` is `custom`.",
            "kind": "directive-input",
            "name": "customDescription",
            "type": "undefined | string"
          },
          {
            "description": "The predefined text to be read by screen readers for users who cannot see the indicator icon. This property is optional but will be required in future versions of SKY UX.",
            "kind": "directive-input",
            "name": "descriptionType",
            "type": "undefined | SkyIndicatorDescriptionType"
          },
          {
            "description": "The type of label to display.",
            "defaultValue": "'info'",
            "kind": "directive-input",
            "name": "labelType",
            "type": "void"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/label/label.component.ts",
        "kind": "component",
        "name": "SkyLabelComponent",
        "selector": "sky-label"
      },
      {
        "anchorId": "class_sky-label-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLabelModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/label/label.module.ts",
        "kind": "module",
        "name": "SkyLabelModule"
      },
      {
        "anchorId": "type-alias_sky-indicator-description-type",
        "filePath": "libs/components/indicators/src/lib/modules/shared/indicator-description-type.ts",
        "kind": "type-alias",
        "name": "SkyIndicatorDescriptionType",
        "type": "\"attention\" | \"caution\" | \"completed\" | \"custom\" | \"danger\" | \"error\" | \"important-info\" | \"important-warning\" | \"none\" | \"success\" | \"warning\""
      },
      {
        "anchorId": "type-alias_sky-indicator-icon-type",
        "filePath": "libs/components/indicators/src/lib/modules/shared/indicator-icon-type.ts",
        "kind": "type-alias",
        "name": "SkyIndicatorIconType",
        "type": "\"danger\" | \"info\" | \"success\" | \"warning\""
      },
      {
        "anchorId": "class_sky-status-indicator-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the status indicator label. Clicking the button invokes global help as configured by the application.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the status indicator. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The text to be read by screen readers for users who cannot see the indicator icon when `descriptionType` is `custom`.",
            "kind": "directive-input",
            "name": "customDescription",
            "type": "undefined | string"
          },
          {
            "description": "The predefined text to be read by screen readers for users who cannot see the indicator icon.",
            "kind": "directive-input",
            "name": "descriptionType",
            "type": "undefined | SkyIndicatorDescriptionType",
            "isRequired": true
          },
          {
            "description": "The style for the status indicator, which determines the icon.",
            "defaultValue": "\"warning\"",
            "kind": "directive-input",
            "name": "indicatorType",
            "type": "void"
          }
        ],
        "description": "Displays status text with an icon matching the specified indicator type. To display a help button beside the label, include a help button element, such as `sky-help-inline`, in the `sky-status-indicator` element and a `sky-control-help` CSS class on that help button element.",
        "filePath": "libs/components/indicators/src/lib/modules/status-indicator/status-indicator.component.ts",
        "kind": "component",
        "name": "SkyStatusIndicatorComponent",
        "selector": "sky-status-indicator"
      },
      {
        "anchorId": "class_sky-status-indicator-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyStatusIndicatorModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/status-indicator/status-indicator.module.ts",
        "kind": "module",
        "name": "SkyStatusIndicatorModule"
      },
      {
        "anchorId": "class_sky-text-highlight-directive",
        "children": [
          {
            "description": "The text to highlight.",
            "kind": "directive-input",
            "name": "skyHighlight",
            "type": "void"
          }
        ],
        "description": "Highlights all matching text within the current DOM element.",
        "filePath": "libs/components/indicators/src/lib/modules/text-highlight/text-highlight.directive.ts",
        "kind": "directive",
        "name": "SkyTextHighlightDirective",
        "selector": "[skyHighlight]"
      },
      {
        "anchorId": "class_sky-text-highlight-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTextHighlightModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/text-highlight/text-highlight.module.ts",
        "kind": "module",
        "name": "SkyTextHighlightModule"
      },
      {
        "anchorId": "class_sky-token-component",
        "children": [
          {
            "description": "The ARIA label for the token's close button. This sets the button's `aria-label` to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "defaultValue": "\"Remove item\"",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "Used by the tokens component to set the appropriate role for each token.",
            "kind": "directive-input",
            "name": "role",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the token to prevent users from selecting it, dismissing it, or navigating to it with the arrow keys. When the token is disabled, users can still place focus on it using the `Tab` key.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Whether users can remove the token from the list by selecting the close button.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "dismissible",
            "type": "boolean"
          },
          {
            "description": "Whether users can place focus on the token using the `Tab`. This does not affect the ability to select the token, dismiss it, or navigate to it with the arrow keys.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "focusable",
            "type": "void"
          },
          {
            "description": "Fires when users click the close button.",
            "kind": "directive-output",
            "name": "dismiss",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when users place focus on the token by navigating to it with the `Tab` key.",
            "kind": "directive-output",
            "name": "tokenFocus",
            "type": "EventEmitter<void>"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/tokens/token.component.ts",
        "kind": "component",
        "name": "SkyTokenComponent",
        "selector": "sky-token"
      },
      {
        "anchorId": "class_sky-tokens-component",
        "children": [
          {
            "description": "The token property that represents the token's unique identifier. When this property is set, animations are enabled when dismissing tokens.",
            "kind": "directive-input",
            "name": "trackWith",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the tokens list to prevent users from selecting tokens, dismissing tokens, or navigating through the list with the arrow keys. When the tokens list is disabled, users can still place focus on items in the list using the `Tab` key.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Whether users can remove a token from the list by selecting a token's close button.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "dismissible",
            "type": "boolean"
          },
          {
            "description": "The token property to display for each item in the tokens list.",
            "defaultValue": "\"name\"",
            "kind": "directive-input",
            "name": "displayWith",
            "type": "string"
          },
          {
            "description": "Whether users can place focus on tokens in the list using the `Tab` key. This does not affect the ability of users to select tokens, dismiss tokens, or navigate through the list with the arrow keys.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "focusable",
            "type": "boolean"
          },
          {
            "description": "The observable of `SkyTokensMessage` that can place focus on a particular token or remove the active token from the list.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkyTokensMessage>"
          },
          {
            "description": "The array of tokens to include in the list.",
            "kind": "directive-input",
            "name": "tokens",
            "type": "SkyToken<any>[]"
          },
          {
            "description": "Fires when users navigate through the tokens list with the `Tab` key and attempt to move past the final token in the list.",
            "kind": "directive-output",
            "name": "focusIndexOverRange",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when users navigate through the tokens list with the `Tab` key and attempt to move before the first token in the list.",
            "kind": "directive-output",
            "name": "focusIndexUnderRange",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when the tokens in the list change. This event emits an array of the tokens in the updated list.",
            "kind": "directive-output",
            "name": "tokensChange",
            "type": "EventEmitter<SkyToken<any>[]>"
          },
          {
            "description": "Fires when users select a token in the list. This event emits the selected token.",
            "kind": "directive-output",
            "name": "tokenSelected",
            "type": "EventEmitter<SkyTokenSelectedEventArgs<any>>"
          },
          {
            "description": "Fires when all animations on the tokens are complete.",
            "kind": "directive-output",
            "name": "tokensRendered",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Creates a container that enables navigation between tokens using keyboard arrow keys. This is useful when combined with other components where the <kbd>Tab</kbd> key is reserved for other functions, such as the SKY UX Lookup component.",
        "filePath": "libs/components/indicators/src/lib/modules/tokens/tokens.component.ts",
        "kind": "component",
        "name": "SkyTokensComponent",
        "selector": "sky-tokens"
      },
      {
        "anchorId": "class_sky-tokens-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTokensModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/tokens/tokens.module.ts",
        "kind": "module",
        "name": "SkyTokensModule"
      },
      {
        "anchorId": "interface_sky-token-selected-event-args",
        "children": [
          {
            "description": "The currently selected token.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "token",
            "type": "SkyToken<T>"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/tokens/types/token-selected-event-args.ts",
        "kind": "interface",
        "name": "SkyTokenSelectedEventArgs"
      },
      {
        "anchorId": "interface_sky-token",
        "children": [
          {
            "description": "The token's value. The `sky-tokens` component uses its `displayWith` property to determine which of the value's properties to use as the token's label.",
            "kind": "interface-property",
            "name": "value",
            "type": "T"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/tokens/types/token.ts",
        "kind": "interface",
        "name": "SkyToken"
      },
      {
        "anchorId": "enum_sky-tokens-message-type",
        "filePath": "libs/components/indicators/src/lib/modules/tokens/types/tokens-message-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Places focus on the token that is currently selected.",
            "kind": "enum-member",
            "name": "FocusActiveToken",
            "type": "1"
          },
          {
            "description": "Places focus on the last token in the list.",
            "kind": "enum-member",
            "name": "FocusLastToken",
            "type": "0"
          },
          {
            "description": "Places focus on the token after the currently selected token.",
            "kind": "enum-member",
            "name": "FocusNextToken",
            "type": "3"
          },
          {
            "description": "Places focus on the token before the currently selected token.",
            "kind": "enum-member",
            "name": "FocusPreviousToken",
            "type": "2"
          },
          {
            "description": "Removes the token that is currently selected from the list of tokens.",
            "kind": "enum-member",
            "name": "RemoveActiveToken",
            "type": "4"
          }
        ],
        "name": "SkyTokensMessageType"
      },
      {
        "anchorId": "interface_sky-tokens-message",
        "children": [
          {
            "description": "The type of message.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "SkyTokensMessageType"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/tokens/types/tokens-message.ts",
        "kind": "interface",
        "name": "SkyTokensMessage"
      },
      {
        "anchorId": "class_sky-wait-component",
        "children": [
          {
            "description": "The ARIA label for the wait icon. This sets the icon's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) when an element or page loads and when users tab to a wait icon. The default value varies based on whether the wait is for an element or a page and whether it is a blocking wait. For example, the default for a page-level blocking wait is \"Page loading. Please wait.\" For element-level waits, we recommend that consumers overwrite the default to describe the specific element. \"For more information, see the Design tab and the [WAI-ARIA `aria-label` definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "void"
          },
          {
            "description": "When set to `true`, wait indication appears on the page level instead of the parent element level. We recommend that you use the `beginBlockingPageWait` or `beginNonBlockingPageWait` functions of the `SkyWaitService` instead of setting this on the component level.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "isFullPage",
            "type": "undefined | boolean"
          },
          {
            "description": "When set to `true`, wait indication appears in the bottom left corner of the element instead of hiding the entire parent element.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "isNonBlocking",
            "type": "undefined | boolean"
          },
          {
            "description": "When set to `true`, wait indication appears on the parent element of the `sky-wait` component.",
            "kind": "directive-input",
            "name": "isWaiting",
            "type": "undefined | boolean"
          },
          {
            "description": "Screen reader text [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) when the wait toggles off.  The default varies based on whether the wait is for an element or a page. For example, the default for a page-level wait is \"Page loading complete.\" For element-level waits, we recommend that consumers overwrite the default to describe the specific element. For more information, see the Design tab and the [WCAG documentation on status messages](https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html).",
            "kind": "directive-input",
            "name": "screenReaderCompletedText",
            "type": "void"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/wait/wait.component.ts",
        "kind": "component",
        "name": "SkyWaitComponent",
        "selector": "sky-wait"
      },
      {
        "anchorId": "class_sky-wait-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyWaitModule"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/wait/wait.module.ts",
        "kind": "module",
        "name": "SkyWaitModule"
      },
      {
        "anchorId": "class_sky-wait-service",
        "children": [
          {
            "description": "Starts a blocking page wait on the page.",
            "kind": "class-method",
            "name": "beginBlockingPageWait",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Starts a non-blocking page wait on the page.",
            "kind": "class-method",
            "name": "beginNonBlockingPageWait",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Launches a page wait and automatically stops when the specific asynchronous event completes.",
            "kind": "class-method",
            "name": "blockingWrap",
            "parameters": [{ "name": "observable", "type": "Observable<T>" }],
            "type": "Observable<T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Clears all blocking and non-blocking page waits on the page.",
            "kind": "class-method",
            "name": "clearAllPageWaits",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "dispose",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Ends a blocking page wait on the page. Blocking page wait indication is removed when all running blocking page waits are ended.",
            "kind": "class-method",
            "name": "endBlockingPageWait",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Ends a non-blocking page wait on the page. Non-blocking page wait indication is removed when all running non-blocking page waits are ended.",
            "kind": "class-method",
            "name": "endNonBlockingPageWait",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Launches a non-blocking page wait and automatically stops when the specific asynchronous event completes.",
            "kind": "class-method",
            "name": "nonBlockingWrap",
            "parameters": [{ "name": "observable", "type": "Observable<T>" }],
            "type": "Observable<T>",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyWaitService"
          },
          {
            "description": "Starts a blocking page wait on the page.",
            "kind": "class-property",
            "name": "beginBlockingPageWait",
            "type": "void"
          },
          {
            "description": "Starts a non-blocking page wait on the page.",
            "kind": "class-property",
            "name": "beginNonBlockingPageWait",
            "type": "void"
          },
          {
            "description": "Launches a page wait and automatically stops when the specific asynchronous event completes.",
            "kind": "class-property",
            "name": "blockingWrap",
            "type": "Observable<T>"
          },
          {
            "description": "Clears all blocking and non-blocking page waits on the page.",
            "kind": "class-property",
            "name": "clearAllPageWaits",
            "type": "void"
          },
          { "kind": "class-property", "name": "dispose", "type": "void" },
          {
            "description": "Ends a blocking page wait on the page. Blocking page wait indication is removed when all running blocking page waits are ended.",
            "kind": "class-property",
            "name": "endBlockingPageWait",
            "type": "void"
          },
          {
            "description": "Ends a non-blocking page wait on the page. Non-blocking page wait indication is removed when all running non-blocking page waits are ended.",
            "kind": "class-property",
            "name": "endNonBlockingPageWait",
            "type": "void"
          },
          {
            "description": "Launches a non-blocking page wait and automatically stops when the specific asynchronous event completes.",
            "kind": "class-property",
            "name": "nonBlockingWrap",
            "type": "Observable<T>"
          }
        ],
        "filePath": "libs/components/indicators/src/lib/modules/wait/wait.service.ts",
        "kind": "service",
        "name": "SkyWaitService"
      }
    ],
    "@skyux/indicators/testing": [
      {
        "anchorId": "class_sky-alert-fixture",
        "children": [
          {
            "description": "Closes the alert.  If the alert is not closeable, an error is thrown.",
            "kind": "class-method",
            "name": "close",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAlertFixture"
          },
          {
            "description": "The alert's current type.",
            "kind": "class-property",
            "name": "alertType",
            "type": "undefined | string"
          },
          {
            "description": "A flag indicating whether the alert can be closed.",
            "kind": "class-property",
            "name": "closeable",
            "type": "undefined | boolean"
          },
          {
            "description": "Returns a flag indicating whether the alert is closed.",
            "kind": "class-property",
            "name": "closed",
            "type": "boolean"
          },
          {
            "description": "The alert's current text.",
            "kind": "class-property",
            "name": "text",
            "type": "undefined | string"
          },
          {
            "description": "Closes the alert.  If the alert is not closeable, an error is thrown.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          }
        ],
        "deprecationReason": "Use `SkyAlertHarness` instead.",
        "description": "Allows interaction with a SKY UX alert component.",
        "filePath": "libs/components/indicators/testing/src/legacy/alert-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyAlertFixture"
      },
      {
        "anchorId": "class_sky-label-fixture",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLabelFixture"
          },
          {
            "description": "The label's current type.",
            "kind": "class-property",
            "name": "labelType",
            "type": "undefined | string"
          },
          {
            "description": "The label's current text.",
            "kind": "class-property",
            "name": "text",
            "type": "undefined | string"
          }
        ],
        "description": "Allows interaction with a SKY UX label component.",
        "filePath": "libs/components/indicators/testing/src/legacy/label-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyLabelFixture"
      },
      {
        "anchorId": "class_sky-wait-fixture",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyWaitFixture"
          },
          { "kind": "class-property", "name": "ariaLabel", "type": "string" },
          { "kind": "class-property", "name": "isFullPage", "type": "boolean" },
          {
            "kind": "class-property",
            "name": "isNonBlocking",
            "type": "boolean"
          },
          { "kind": "class-property", "name": "isWaiting", "type": "boolean" }
        ],
        "filePath": "libs/components/indicators/testing/src/legacy/wait-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyWaitFixture"
      },
      {
        "anchorId": "interface_sky-alert-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyAlertHarness instances.",
        "filePath": "libs/components/indicators/testing/src/modules/alert/alert-harness-filters.ts",
        "kind": "interface",
        "name": "SkyAlertHarnessFilters"
      },
      {
        "anchorId": "class_sky-alert-harness",
        "children": [
          {
            "description": "Closes the alert.",
            "kind": "class-method",
            "name": "close",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the current alert type.",
            "kind": "class-method",
            "name": "getAlertType",
            "parameters": [],
            "type": "Promise<undefined | SkyIndicatorIconType>"
          },
          {
            "description": "Gets the custom text used for the screen reader description of the label component icon.",
            "kind": "class-method",
            "name": "getCustomDescription",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `descriptionType` of the label component.",
            "kind": "class-method",
            "name": "getDescriptionType",
            "parameters": [],
            "type": "Promise<SkyIndicatorDescriptionType>"
          },
          {
            "description": "Gets the current alert text.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the user can close the alert.",
            "kind": "class-method",
            "name": "isCloseable",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the user closed the alert.",
            "kind": "class-method",
            "name": "isClosed",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAlertHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyAlertHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyAlertHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAlertHarness"
          },
          {
            "defaultValue": "'sky-alert'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Closes the alert.",
            "kind": "class-property",
            "name": "close",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the current alert type.",
            "kind": "class-property",
            "name": "getAlertType",
            "type": "Promise<undefined | SkyIndicatorIconType>"
          },
          {
            "description": "Gets the custom text used for the screen reader description of the label component icon.",
            "kind": "class-property",
            "name": "getCustomDescription",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `descriptionType` of the label component.",
            "kind": "class-property",
            "name": "getDescriptionType",
            "type": "Promise<SkyIndicatorDescriptionType>"
          },
          {
            "description": "Gets the current alert text.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the user can close the alert.",
            "kind": "class-property",
            "name": "isCloseable",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the user closed the alert.",
            "kind": "class-property",
            "name": "isClosed",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAlertHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyAlertHarness>"
          }
        ],
        "description": "Harness for interacting with an alert component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/alert/alert-harness.ts",
        "kind": "class",
        "name": "SkyAlertHarness"
      },
      {
        "anchorId": "class_sky-chevron-harness",
        "children": [
          {
            "description": "Gets the chevron direction.",
            "kind": "class-method",
            "name": "getDirection",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the chevron is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Toggles the chevron.",
            "kind": "class-method",
            "name": "toggle",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyChevronHarness"
          },
          {
            "defaultValue": "'sky-chevron'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the chevron direction.",
            "kind": "class-property",
            "name": "getDirection",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the chevron is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Toggles the chevron.",
            "kind": "class-property",
            "name": "toggle",
            "type": "Promise<void>"
          }
        ],
        "description": "Harness for interacting with a chevron component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/chevron/chevron-harness.ts",
        "kind": "class",
        "name": "SkyChevronHarness"
      },
      {
        "anchorId": "interface_sky-help-inline-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyHelpInlineHarness instances.",
        "filePath": "libs/components/indicators/testing/src/modules/help-inline/help-inline-harness-filters.ts",
        "kind": "interface",
        "name": "SkyHelpInlineHarnessFilters"
      },
      {
        "anchorId": "class_sky-help-inline-harness",
        "children": [
          {
            "description": "Clicks the help inline icon button",
            "kind": "class-method",
            "name": "click",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyInlineHelpHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyHelpInlineHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyHelpInlineHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHelpInlineHarness"
          },
          {
            "defaultValue": "'sky-help-inline'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline icon button",
            "kind": "class-property",
            "name": "click",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyInlineHelpHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyHelpInlineHarness>"
          }
        ],
        "description": "Harness for interacting with a help inline component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/help-inline/help-inline-harness.ts",
        "kind": "class",
        "name": "SkyHelpInlineHarness"
      },
      {
        "anchorId": "interface_sky-illustration-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyIllustrationHarness` instances.",
        "filePath": "libs/components/indicators/testing/src/modules/illustration/illustration-harness-filters.ts",
        "kind": "interface",
        "name": "SkyIllustrationHarnessFilters"
      },
      {
        "anchorId": "class_sky-illustration-harness",
        "children": [
          {
            "description": "Gets the specified name of the illustration.",
            "kind": "class-method",
            "name": "getName",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the specified size of the illustration.",
            "kind": "class-method",
            "name": "getSize",
            "parameters": [],
            "type": "Promise<SkyIllustrationSize>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyIllustrationHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyIllustrationHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyIllustrationHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIllustrationHarness"
          },
          {
            "defaultValue": "'sky-illustration'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the specified name of the illustration.",
            "kind": "class-property",
            "name": "getName",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the specified size of the illustration.",
            "kind": "class-property",
            "name": "getSize",
            "type": "Promise<SkyIllustrationSize>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyIllustrationHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyIllustrationHarness>"
          }
        ],
        "description": "Harness for interacting with an illustration component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/illustration/illustration-harness.ts",
        "kind": "class",
        "name": "SkyIllustrationHarness"
      },
      {
        "anchorId": "interface_sky-key-info-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyKeyInfoHarness instances.",
        "filePath": "libs/components/indicators/testing/src/modules/key-info/key-info-harness-filters.ts",
        "kind": "interface",
        "name": "SkyKeyInfoHarnessFilters"
      },
      {
        "anchorId": "class_sky-key-info-harness",
        "children": [
          {
            "description": "Gets the current label text.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the current layout type.",
            "kind": "class-method",
            "name": "getLayout",
            "parameters": [],
            "type": "Promise<SkyKeyInfoLayoutType>"
          },
          {
            "description": "Gets the current value text.",
            "kind": "class-method",
            "name": "getValueText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyKeyInfoHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyKeyInfoHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyKeyInfoHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyKeyInfoHarness"
          },
          {
            "defaultValue": "'sky-key-info'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the current label text.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the current layout type.",
            "kind": "class-property",
            "name": "getLayout",
            "type": "Promise<SkyKeyInfoLayoutType>"
          },
          {
            "description": "Gets the current value text.",
            "kind": "class-property",
            "name": "getValueText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyKeyInfoHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyKeyInfoHarness>"
          }
        ],
        "description": "Harness for interacting with a key info component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/key-info/key-info-harness.ts",
        "kind": "class",
        "name": "SkyKeyInfoHarness"
      },
      {
        "anchorId": "interface_sky-label-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyLabelHarness` instances.",
        "filePath": "libs/components/indicators/testing/src/modules/label/label-harness-filters.ts",
        "kind": "interface",
        "name": "SkyLabelHarnessFilters"
      },
      {
        "anchorId": "class_sky-label-harness",
        "children": [
          {
            "description": "Gets the custom text used for the screen reader description of the label component icon.",
            "kind": "class-method",
            "name": "getCustomDescription",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `descriptionType` of the label component.",
            "kind": "class-method",
            "name": "getDescriptionType",
            "parameters": [],
            "type": "Promise<SkyIndicatorDescriptionType>"
          },
          {
            "description": "Gets the text of the label component.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `labelType` of the label component.",
            "kind": "class-method",
            "name": "getLabelType",
            "parameters": [],
            "type": "Promise<SkyLabelType>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLookupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyLabelHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyLabelHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLabelHarness"
          },
          {
            "defaultValue": "'sky-label'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the custom text used for the screen reader description of the label component icon.",
            "kind": "class-property",
            "name": "getCustomDescription",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `descriptionType` of the label component.",
            "kind": "class-property",
            "name": "getDescriptionType",
            "type": "Promise<SkyIndicatorDescriptionType>"
          },
          {
            "description": "Gets the text of the label component.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `labelType` of the label component.",
            "kind": "class-property",
            "name": "getLabelType",
            "type": "Promise<SkyLabelType>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLookupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyLabelHarness>"
          }
        ],
        "description": "Harness for interacting with a label component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/label/label-harness.ts",
        "kind": "class",
        "name": "SkyLabelHarness"
      },
      {
        "anchorId": "interface_sky-status-indicator-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyStatusIndicatorHarness instances.",
        "filePath": "libs/components/indicators/testing/src/modules/status-indicator/status-indicator-harness-filters.ts",
        "kind": "interface",
        "name": "SkyStatusIndicatorHarnessFilters"
      },
      {
        "anchorId": "class_sky-status-indicator-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the custom text used for the screen reader description of the status indicator component icon.",
            "kind": "class-method",
            "name": "getCustomDescription",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `descriptionType` of the status indicator component.",
            "kind": "class-method",
            "name": "getDescriptionType",
            "parameters": [],
            "type": "Promise<SkyIndicatorDescriptionType>"
          },
          {
            "description": "Gets the help inline popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the current status indicator type.",
            "kind": "class-method",
            "name": "getIndicatorType",
            "parameters": [],
            "type": "Promise<undefined | SkyIndicatorIconType>"
          },
          {
            "description": "Gets the current status indicator text.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyStatusIndicatorHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyStatusIndicatorHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyStatusIndicatorHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyStatusIndicatorHarness"
          },
          {
            "defaultValue": "'sky-status-indicator'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the custom text used for the screen reader description of the status indicator component icon.",
            "kind": "class-property",
            "name": "getCustomDescription",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the `descriptionType` of the status indicator component.",
            "kind": "class-property",
            "name": "getDescriptionType",
            "type": "Promise<SkyIndicatorDescriptionType>"
          },
          {
            "description": "Gets the help inline popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the current status indicator type.",
            "kind": "class-property",
            "name": "getIndicatorType",
            "type": "Promise<undefined | SkyIndicatorIconType>"
          },
          {
            "description": "Gets the current status indicator text.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyStatusIndicatorHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyStatusIndicatorHarness>"
          }
        ],
        "description": "Harness for interacting with a status indicator component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/status-indicator/status-indicator-harness.ts",
        "kind": "class",
        "name": "SkyStatusIndicatorHarness"
      },
      {
        "anchorId": "interface_sky-token-harness-filters",
        "children": [
          {
            "description": "Only find instances whose text content matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "text",
            "type": "string | RegExp"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of `SkyTokenHarness` instances.",
        "filePath": "libs/components/indicators/testing/src/modules/tokens/token-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyTokenHarnessFilters"
      },
      {
        "anchorId": "class_sky-token-harness",
        "children": [
          {
            "description": "Dismisses the token.",
            "kind": "class-method",
            "name": "dismiss",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Returns the text content of the token.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the token is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the token is dismissible.",
            "kind": "class-method",
            "name": "isDismissible",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the token is focused.",
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects the token.",
            "kind": "class-method",
            "name": "select",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyTokenHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyTokenHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyTokenHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTokenHarness"
          },
          {
            "defaultValue": "'sky-token'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Dismisses the token.",
            "kind": "class-property",
            "name": "dismiss",
            "type": "Promise<void>"
          },
          {
            "description": "Returns the text content of the token.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the token is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the token is dismissible.",
            "kind": "class-property",
            "name": "isDismissible",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the token is focused.",
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects the token.",
            "kind": "class-property",
            "name": "select",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyTokenHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyTokenHarness>"
          }
        ],
        "description": "Harness for interacting with a token component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/tokens/token-harness.ts",
        "kind": "class",
        "name": "SkyTokenHarness"
      },
      {
        "anchorId": "interface_sky-tokens-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyTokensHarness` instances.",
        "filePath": "libs/components/indicators/testing/src/modules/tokens/tokens-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyTokensHarnessFilters"
      },
      {
        "anchorId": "class_sky-tokens-harness",
        "children": [
          {
            "description": "Dismisses all tokens, or tokens that meet certain criteria.",
            "kind": "class-method",
            "name": "dismissTokens",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyTokenHarnessFilters"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Returns a list of tokens.",
            "kind": "class-method",
            "name": "getTokens",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyTokenHarnessFilters"
              }
            ],
            "type": "Promise<SkyTokenHarness[]>"
          },
          {
            "description": "Returns the text content of all tokens.",
            "kind": "class-method",
            "name": "getTokensText",
            "parameters": [],
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyTokensHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyTokensHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyTokensHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTokensHarness"
          },
          {
            "defaultValue": "'sky-tokens'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Dismisses all tokens, or tokens that meet certain criteria.",
            "kind": "class-property",
            "name": "dismissTokens",
            "type": "Promise<void>"
          },
          {
            "description": "Returns a list of tokens.",
            "kind": "class-property",
            "name": "getTokens",
            "type": "Promise<SkyTokenHarness[]>"
          },
          {
            "description": "Returns the text content of all tokens.",
            "kind": "class-property",
            "name": "getTokensText",
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyTokensHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyTokensHarness>"
          }
        ],
        "description": "Harness for interacting with a tokens component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/tokens/tokens-harness.ts",
        "kind": "class",
        "name": "SkyTokensHarness"
      },
      {
        "anchorId": "interface_sky-wait-harness-filters",
        "children": [
          {
            "description": "Only find blocking or non-blocking instances created by the `SkyWaitService`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "servicePageWaitType",
            "type": "\"blocking\" | \"non-blocking\""
          }
        ],
        "description": "A set of criteria that can be used to filter a list of SkyWaitHarness instances.",
        "filePath": "libs/components/indicators/testing/src/modules/wait/wait-harness-filters.ts",
        "kind": "interface",
        "name": "SkyWaitHarnessFilters"
      },
      {
        "anchorId": "class_sky-wait-harness",
        "children": [
          {
            "description": "Gets the ARIA label for the wait component or throws an error if not waiting.",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the full page state of the wait component.",
            "kind": "class-method",
            "name": "isFullPage",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the blocking state of the wait component.",
            "kind": "class-method",
            "name": "isNonBlocking",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the waiting state of the wait component.",
            "kind": "class-method",
            "name": "isWaiting",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyWaitHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyWaitHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyWaitHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyWaitHarness"
          },
          {
            "defaultValue": "'sky-wait'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the ARIA label for the wait component or throws an error if not waiting.",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the full page state of the wait component.",
            "kind": "class-property",
            "name": "isFullPage",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the blocking state of the wait component.",
            "kind": "class-property",
            "name": "isNonBlocking",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the waiting state of the wait component.",
            "kind": "class-property",
            "name": "isWaiting",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyWaitHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyWaitHarness>"
          }
        ],
        "description": "Harness for interacting with a wait component in tests.",
        "filePath": "libs/components/indicators/testing/src/modules/wait/wait-harness.ts",
        "kind": "class",
        "name": "SkyWaitHarness"
      }
    ],
    "@skyux/split-view": [
      {
        "anchorId": "class_sky-split-view-drawer-component",
        "children": [
          {
            "description": "The ARIA label for the list panel. This sets the panel's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "Sets the list panel's width in pixels.",
            "defaultValue": "320",
            "kind": "directive-input",
            "name": "width",
            "type": "undefined | number"
          }
        ],
        "description": "Specifies the content to display in the split view's list panel.",
        "filePath": "src/lib/modules/split-view/split-view-drawer.component.ts",
        "kind": "component",
        "name": "SkySplitViewDrawerComponent",
        "selector": "sky-split-view-drawer"
      },
      {
        "anchorId": "class_sky-split-view-workspace-content-component",
        "description": "Specifies the content to display in the split view's workspace panel.",
        "filePath": "src/lib/modules/split-view/split-view-workspace-content.component.ts",
        "kind": "component",
        "name": "SkySplitViewWorkspaceContentComponent",
        "selector": "sky-split-view-workspace-content"
      },
      {
        "anchorId": "class_sky-split-view-workspace-footer-component",
        "description": "Specifies the footer to display in the split view's workspace panel. This component is often used with a summary action bar.",
        "filePath": "src/lib/modules/split-view/split-view-workspace-footer.component.ts",
        "kind": "component",
        "name": "SkySplitViewWorkspaceFooterComponent",
        "selector": "sky-split-view-workspace-footer"
      },
      {
        "anchorId": "class_sky-split-view-workspace-header-component",
        "description": "Specifies the header to display in the split view's workspace panel.",
        "filePath": "src/lib/modules/split-view/split-view-workspace-header.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkySplitViewWorkspaceHeaderComponent",
        "selector": "sky-split-view-workspace-header"
      },
      {
        "anchorId": "class_sky-split-view-workspace-component",
        "children": [
          {
            "description": "The ARIA label for the workspace panel. This sets the panel's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          }
        ],
        "description": "Contains the content, footer, and header to display in the split view's workspace panel.",
        "filePath": "src/lib/modules/split-view/split-view-workspace.component.ts",
        "kind": "component",
        "name": "SkySplitViewWorkspaceComponent",
        "selector": "sky-split-view-workspace"
      },
      {
        "anchorId": "class_sky-split-view-component",
        "children": [
          {
            "description": "The observable that sends commands to the split view component. The commands should respect the `SkySplitViewMessage` type.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkySplitViewMessage>"
          },
          {
            "description": "The label for the button that appears in the workspace header in responsive mode. The button returns users to the list.",
            "defaultValue": "\"Back to list\"",
            "kind": "directive-input",
            "name": "backButtonText",
            "type": "void"
          },
          {
            "deprecationReason": "We recommend using the `dock` input instead. An example of this can\nbe found in the developer code examples.",
            "description": "Whether the split view's height is bound to the window height.",
            "defaultValue": "false",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "bindHeightToWindow",
            "type": "boolean"
          },
          {
            "description": "How the split view docks to its container. Use `fill` to dock the split view to the container's size where the container is a `sky-page` component with its `layout` input set to `fit`, or where the container is another element with a relative or absolute position and a fixed size.",
            "defaultValue": "\"none\"",
            "kind": "directive-input",
            "name": "dock",
            "type": "SkySplitViewDockType"
          }
        ],
        "description": "Displays a list alongside a workspace where users can view details for selected items and take actions.",
        "filePath": "src/lib/modules/split-view/split-view.component.ts",
        "kind": "component",
        "name": "SkySplitViewComponent",
        "selector": "sky-split-view"
      },
      {
        "anchorId": "class_sky-split-view-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySplitViewModule"
          }
        ],
        "filePath": "src/lib/modules/split-view/split-view.module.ts",
        "kind": "module",
        "name": "SkySplitViewModule"
      },
      {
        "anchorId": "type-alias_sky-split-view-dock-type",
        "filePath": "src/lib/modules/split-view/types/split-view-dock-type.ts",
        "kind": "type-alias",
        "name": "SkySplitViewDockType",
        "type": "\"none\" | \"fill\""
      },
      {
        "anchorId": "enum_sky-split-view-message-type",
        "filePath": "src/lib/modules/split-view/types/split-view-message-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Places focus on the first focusable element in the workspace.",
            "kind": "enum-member",
            "name": "FocusWorkspace",
            "type": "0"
          }
        ],
        "name": "SkySplitViewMessageType"
      },
      {
        "anchorId": "interface_sky-split-view-message",
        "children": [
          {
            "description": "Sets the `SkySplitViewMessageType`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "FocusWorkspace"
          }
        ],
        "filePath": "src/lib/modules/split-view/types/split-view-message.ts",
        "kind": "interface",
        "name": "SkySplitViewMessage"
      }
    ],
    "@skyux/split-view/testing": [
      {
        "anchorId": "interface_sky-split-view-fixture-drawer",
        "children": [
          {
            "kind": "interface-property",
            "name": "ariaLabel",
            "type": "undefined | null | string"
          },
          {
            "kind": "interface-property",
            "name": "isVisible",
            "type": "boolean"
          },
          { "kind": "interface-property", "name": "width", "type": "string" }
        ],
        "filePath": "testing/src/legacy/split-view/split-view-fixture-drawer.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkySplitViewFixtureDrawer"
      },
      {
        "anchorId": "interface_sky-split-view-fixture-workspace",
        "children": [
          {
            "kind": "interface-property",
            "name": "ariaLabel",
            "type": "undefined | null | string"
          },
          {
            "kind": "interface-property",
            "name": "backButtonIsVisible",
            "type": "boolean"
          },
          {
            "kind": "interface-property",
            "name": "backButtonText",
            "type": "undefined | string"
          },
          {
            "kind": "interface-property",
            "name": "isVisible",
            "type": "boolean"
          }
        ],
        "filePath": "testing/src/legacy/split-view/split-view-fixture-workspace.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkySplitViewFixtureWorkspace"
      },
      {
        "anchorId": "class_sky-split-view-fixture",
        "children": [
          {
            "description": "Opens the drawer component when in responsive mode. This method clicks the back to list button, if it is visible.",
            "kind": "class-method",
            "name": "openDrawer",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySplitViewFixture"
          },
          {
            "description": "Returns information about the split view's drawer component.",
            "kind": "class-property",
            "name": "drawer",
            "type": "SkySplitViewFixtureDrawer"
          },
          {
            "description": "Returns information about the split view's workspace component.",
            "kind": "class-property",
            "name": "workspace",
            "type": "SkySplitViewFixtureWorkspace"
          },
          {
            "description": "Opens the drawer component when in responsive mode. This method clicks the back to list button, if it is visible.",
            "kind": "class-property",
            "name": "openDrawer",
            "type": "Promise<void>"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX split view component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "testing/src/legacy/split-view/split-view-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkySplitViewFixture"
      },
      {
        "anchorId": "class_sky-split-view-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySplitViewTestingModule"
          }
        ],
        "filePath": "testing/src/legacy/split-view/split-view-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkySplitViewTestingModule"
      }
    ],
    "@skyux/validation": [
      {
        "anchorId": "class_sky-email-validation-directive",
        "description": "Adds email address validation to an input element. The directive uses `NgModel` to bind data.",
        "filePath": "lib/modules/email-validation/email-validation.directive.ts",
        "kind": "directive",
        "name": "SkyEmailValidationDirective",
        "selector": "[skyEmailValidation]"
      },
      {
        "anchorId": "class_sky-email-validation-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyEmailValidationModule"
          }
        ],
        "filePath": "lib/modules/email-validation/email-validation.module.ts",
        "kind": "module",
        "name": "SkyEmailValidationModule"
      },
      {
        "anchorId": "interface_sky-url-validation-options",
        "children": [
          {
            "description": "The ruleset for URL validation. Ruleset 1 uses a regular expression, and ruleset 2 uses the third-party [validator.js library](https://github.com/validatorjs/validator.js).",
            "kind": "interface-property",
            "name": "rulesetVersion",
            "type": "1 | 2"
          }
        ],
        "description": "Specifies options for the URL validator component.",
        "filePath": "lib/modules/url-validation/url-validation-options.ts",
        "kind": "interface",
        "name": "SkyUrlValidationOptions"
      },
      {
        "anchorId": "class_sky-url-validation-directive",
        "children": [
          {
            "description": "Configuration options for the URL validation component.",
            "kind": "directive-input",
            "name": "skyUrlValidation",
            "type": "void"
          }
        ],
        "description": "Adds URL validation to an input element. The directive uses `NgModel` to bind data.",
        "filePath": "lib/modules/url-validation/url-validation.directive.ts",
        "kind": "directive",
        "name": "SkyUrlValidationDirective",
        "selector": "[skyUrlValidation]"
      },
      {
        "anchorId": "class_sky-url-validation-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyUrlValidationModule"
          }
        ],
        "filePath": "lib/modules/url-validation/url-validation.module.ts",
        "kind": "module",
        "name": "SkyUrlValidationModule"
      },
      {
        "anchorId": "class_sky-validation",
        "children": [
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "isEmail",
            "parameters": [{ "name": "emailAddress", "type": "string" }],
            "type": "boolean"
          },
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "isUrl",
            "parameters": [
              { "name": "value", "type": "unknown" },
              {
                "isOptional": true,
                "name": "options",
                "type": "SkyUrlValidationOptions"
              }
            ],
            "type": "boolean"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyValidation"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "isEmail",
            "type": "boolean"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "isUrl",
            "type": "boolean"
          }
        ],
        "filePath": "lib/modules/validation/validation.ts",
        "kind": "class",
        "name": "SkyValidation"
      },
      {
        "anchorId": "class_sky-validators",
        "children": [
          {
            "description": "Validates email addresses in reactive forms. Add this validator directly to the form control model in the component class. If users enter values that are not valid email addresses, the validator throws an error. Since this is a sync validator, it returns a set of validation errors or `null` immediately when users enter values.",
            "isStatic": true,
            "kind": "class-method",
            "name": "email",
            "parameters": [
              { "name": "control", "type": "AbstractControl<any, any>" }
            ],
            "type": "null | ValidationErrors"
          },
          {
            "description": "Validates URLs in reactive forms. Add this validator directly to the form control model in the component class. If users enter values that are not valid URLs, the validator throws an error. Since this is a sync validator, it returns a set of validation errors or `null` immediately when users enter values.",
            "isStatic": true,
            "kind": "class-method",
            "name": "url",
            "parameters": [
              { "name": "abstractControl", "type": "AbstractControl<any, any>" }
            ],
            "type": "null | ValidationErrors"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyValidators"
          },
          {
            "description": "Validates email addresses in reactive forms. Add this validator directly to the form control model in the component class. If users enter values that are not valid email addresses, the validator throws an error. Since this is a sync validator, it returns a set of validation errors or `null` immediately when users enter values.",
            "isStatic": true,
            "kind": "class-property",
            "name": "email",
            "type": "null | ValidationErrors"
          },
          {
            "description": "Validates URLs in reactive forms. Add this validator directly to the form control model in the component class. If users enter values that are not valid URLs, the validator throws an error. Since this is a sync validator, it returns a set of validation errors or `null` immediately when users enter values.",
            "isStatic": true,
            "kind": "class-property",
            "name": "url",
            "type": "null | ValidationErrors"
          }
        ],
        "filePath": "lib/modules/validators/validators.ts",
        "kind": "class",
        "name": "SkyValidators"
      }
    ],
    "@skyux/datetime": [
      {
        "anchorId": "class_sky-date-pipe-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDatePipeModule"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/date-pipe/date-pipe.module.ts",
        "kind": "module",
        "name": "SkyDatePipeModule"
      },
      {
        "anchorId": "class_sky-date-pipe",
        "children": [
          {
            "description": "Transforms a date value using locale and format rules.",
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              {
                "description": "Specifies the date value to transform.",
                "name": "value",
                "type": "any"
              },
              {
                "description": "Specifies the format to apply to the transform. The format string is constructed by a series of symbols that represent date-time values. The symbols are identical to [Angular's `DatePipe`](https://angular.io/api/common/DatePipe#pre-defined-format-options) format options.",
                "isOptional": true,
                "name": "format",
                "type": "string"
              },
              {
                "description": "Specifies the locale code to use in the transform.",
                "isOptional": true,
                "name": "locale",
                "type": "string"
              }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDatePipe"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Transforms a date value using locale and format rules.",
            "kind": "class-property",
            "name": "transform",
            "type": "string"
          }
        ],
        "codeExample": "{{ myDate | skyDate }}",
        "codeExampleLanguage": "markup",
        "description": "Formats date values according to locale rules.",
        "filePath": "libs/components/datetime/src/lib/modules/date-pipe/date.pipe.ts",
        "kind": "pipe",
        "name": "SkyDatePipe",
        "templateBindingName": "skyDate"
      },
      {
        "anchorId": "class_sky-date-service",
        "children": [
          {
            "kind": "class-method",
            "name": "format",
            "parameters": [
              { "name": "value", "type": "any" },
              { "isOptional": true, "name": "locale", "type": "string" },
              { "isOptional": true, "name": "format", "type": "string" }
            ],
            "type": "undefined | string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDateService"
          },
          {
            "kind": "class-property",
            "name": "format",
            "type": "undefined | string"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/date-pipe/date.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyDateService"
      },
      {
        "anchorId": "class_sky-fuzzy-date-pipe",
        "children": [
          {
            "description": "Transforms fuzzy date values using two or more date tokens that represent the day, month, and year.",
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              {
                "description": "Specifies the date value to transform.",
                "name": "value",
                "type": "SkyFuzzyDate"
              },
              {
                "description": "Specifies the format to apply to the transform. You construct the format string with a two or more tokens that specify the components of date-time value. The tokens are described in the [moment.js values](https://momentjs.com/docs/#/displaying/). If you don't provide a format, `SkyFuzzyDatePipe` attempts to format fuzzy dates based on the browser's default locale.",
                "isOptional": true,
                "name": "format",
                "type": "string"
              },
              {
                "description": "Specifies the locale code to use in the transform.",
                "isOptional": true,
                "name": "locale",
                "type": "string"
              }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFuzzyDatePipe"
          },
          {
            "description": "Transforms fuzzy date values using two or more date tokens that represent the day, month, and year.",
            "kind": "class-property",
            "name": "transform",
            "type": "string"
          }
        ],
        "codeExample": "{{ myFuzzyDate | skyFuzzyDate:'MMM Y' }}",
        "codeExampleLanguage": "markup",
        "description": "Formats date values using two or more date tokens that represent the day, month, and year. The tokens are described in the [moment.js values](https://momentjs.com/docs/#/displaying/).",
        "filePath": "libs/components/datetime/src/lib/modules/date-pipe/fuzzy-date.pipe.ts",
        "kind": "pipe",
        "name": "SkyFuzzyDatePipe",
        "templateBindingName": "skyFuzzyDate"
      },
      {
        "anchorId": "class_sky-date-range-picker-component",
        "children": [
          {
            "description": "The date format for [the `sky-datepicker` components](https://developer.blackbaud.com/skyux/components/datepicker) that make up the date range picker. The text input is a composite component of up to two `sky-datepicker` components.",
            "defaultValue": "\"MM/DD/YYYY\"",
            "kind": "directive-input",
            "name": "dateFormat",
            "type": "undefined | string"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the date range picker label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to date range picker. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "The text to display as the date range picker's label.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the date range picker is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the date range picker.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "description": "IDs for the date range options to include in the picker's dropdown. The options specify calculator objects that return two `Date` objects to represent date ranges. By default, this property includes all `SkyDateRangeCalculatorId` values.",
            "kind": "directive-input",
            "name": "calculatorIds",
            "type": "SkyDateRangeCalculatorId[]"
          },
          {
            "description": "Whether to disable the date range picker on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "void"
          },
          {
            "deprecationReason": "Use the `labelText` input instead.",
            "description": "The label for the date range picker.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "label",
            "type": "undefined | string"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/date-range-picker.component.ts",
        "kind": "component",
        "name": "SkyDateRangePickerComponent",
        "selector": "sky-date-range-picker"
      },
      {
        "anchorId": "class_sky-date-range-picker-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDateRangePickerModule"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/date-range-picker.module.ts",
        "kind": "module",
        "name": "SkyDateRangePickerModule"
      },
      {
        "anchorId": "class_sky-date-range-service",
        "children": [
          {
            "description": "Creates a custom date range calculator.",
            "kind": "class-method",
            "name": "createCalculator",
            "parameters": [
              {
                "description": "The calculator config.",
                "name": "config",
                "type": "SkyDateRangeCalculatorConfig"
              }
            ],
            "type": "SkyDateRangeCalculator"
          },
          {
            "description": "Returns calculators from an array of calculator IDs.",
            "kind": "class-method",
            "name": "filterCalculators",
            "parameters": [
              {
                "description": "The array of calculator IDs.",
                "name": "calculatorIds",
                "type": "SkyDateRangeCalculatorId[]"
              }
            ],
            "type": "SkyDateRangeCalculator[]"
          },
          {
            "deprecationReason": "Call `filterCalculators()` instead.",
            "description": "Returns a calculator from a calculator ID.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getCalculatorById",
            "parameters": [
              {
                "description": "The calculator ID.",
                "name": "id",
                "type": "SkyDateRangeCalculatorId"
              }
            ],
            "type": "Promise<SkyDateRangeCalculator>"
          },
          {
            "deprecationReason": "Call `filterCalculators()` instead.",
            "description": "Returns calculators from an array of calculator IDs.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getCalculators",
            "parameters": [
              {
                "description": "The array of calculator IDs.",
                "name": "ids",
                "type": "SkyDateRangeCalculatorId[]"
              }
            ],
            "type": "Promise<SkyDateRangeCalculator[]>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDateRangeService"
          },
          {
            "kind": "class-property",
            "name": "calculators",
            "type": "SkyDateRangeCalculator[]"
          },
          {
            "description": "Creates a custom date range calculator.",
            "kind": "class-property",
            "name": "createCalculator",
            "type": "SkyDateRangeCalculator"
          },
          {
            "description": "Returns calculators from an array of calculator IDs.",
            "kind": "class-property",
            "name": "filterCalculators",
            "type": "SkyDateRangeCalculator[]"
          },
          {
            "deprecationReason": "Call `filterCalculators()` instead.",
            "description": "Returns a calculator from a calculator ID.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getCalculatorById",
            "type": "Promise<SkyDateRangeCalculator>"
          },
          {
            "deprecationReason": "Call `filterCalculators()` instead.",
            "description": "Returns calculators from an array of calculator IDs.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getCalculators",
            "type": "Promise<SkyDateRangeCalculator[]>"
          }
        ],
        "description": "Creates and manages `SkyDateRangeCalculator` instances.",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/date-range.service.ts",
        "kind": "service",
        "name": "SkyDateRangeService"
      },
      {
        "anchorId": "interface_sky-date-range-calculation",
        "children": [
          {
            "description": "The calculator that determines the dates in the date range.",
            "kind": "interface-property",
            "name": "calculatorId",
            "type": "SkyDateRangeCalculatorId"
          },
          {
            "description": "The last date in the date range.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "endDate",
            "type": "null | Date"
          },
          {
            "description": "The first date in the date range.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "startDate",
            "type": "null | Date"
          }
        ],
        "description": "Represents the returned value of a `SkyDateRangeCalculator`.",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range-calculation.ts",
        "kind": "interface",
        "name": "SkyDateRangeCalculation"
      },
      {
        "anchorId": "interface_sky-date-range-calculator-config",
        "children": [
          {
            "description": "A callback function that returns a `SkyDateRange` value.",
            "kind": "interface-property",
            "name": "getValue",
            "type": "SkyDateRangeCalculatorGetValueFunction"
          },
          {
            "description": "Text to display within the calculator select menu to represent your calculator.",
            "kind": "interface-property",
            "name": "shortDescription",
            "type": "string"
          },
          {
            "description": "The type of calculator to create.",
            "kind": "interface-property",
            "name": "type",
            "type": "SkyDateRangeCalculatorType"
          },
          {
            "description": "A callback function that accepts user-selected start and end dates. Returning an Angular `ValidationErrors` value invalidates the date range form control.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "validate",
            "type": "SkyDateRangeCalculatorValidateFunction"
          }
        ],
        "description": "The configuration for a date range calculator.",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range-calculator-config.ts",
        "kind": "interface",
        "name": "SkyDateRangeCalculatorConfig"
      },
      {
        "anchorId": "type-alias_sky-date-range-calculator-get-value-function",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range-calculator-date-range-function.ts",
        "kind": "type-alias",
        "name": "SkyDateRangeCalculatorGetValueFunction",
        "type": "Function"
      },
      {
        "anchorId": "enum_sky-date-range-calculator-id",
        "description": "`SkyDateRangeCalculatorId` values specify calculator objects that return two `Date` objects to represent date ranges. The values populate the options in the date range picker's dropdown. SKY UX uses `SkyDateRangeService` to create calculators and configures each one with a `validate` function to confirm that dates are compatible. For example, `validate` functions ensure that start dates are before end dates. SKY UX also configures calculators to call a `getValue` function after the `validate` function and return a range of two `Date` objects.",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range-calculator-id.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Enables users to select a start date with no end date.",
            "kind": "enum-member",
            "name": "After",
            "type": "2"
          },
          {
            "description": "Selects no dates and considers all dates within the date range. This is the default selection.",
            "kind": "enum-member",
            "name": "AnyTime",
            "type": "0"
          },
          {
            "description": "Enables users to select an end date with no starting date.",
            "kind": "enum-member",
            "name": "Before",
            "type": "1"
          },
          {
            "description": "Sets the start date to the first day of the year before the current year and the end date to the last day of that year.",
            "kind": "enum-member",
            "name": "LastCalendarYear",
            "type": "16"
          },
          {
            "description": "Sets the start date to the first day of the fiscal year before the current fiscal year and the end date to the last day of that fiscal year. The fiscal year is Oct. 1 to Sept. 30.",
            "kind": "enum-member",
            "name": "LastFiscalYear",
            "type": "19"
          },
          {
            "description": "Sets the start date to the first day of the month before the current month and the end date to the last day of that month.",
            "kind": "enum-member",
            "name": "LastMonth",
            "type": "10"
          },
          {
            "description": "Sets the start date to the first day of the quarter before the current quarter and the end date to the last day of that quarter. Quarters are January to March, April to June, July to September, and October to December.",
            "kind": "enum-member",
            "name": "LastQuarter",
            "type": "13"
          },
          {
            "description": "Sets the start date to Sunday of the week before the current week and the end date to Saturday of that week.",
            "kind": "enum-member",
            "name": "LastWeek",
            "type": "7"
          },
          {
            "description": "Sets the start date to the first day of the year after the current year and the end date to the last day of that year.",
            "kind": "enum-member",
            "name": "NextCalendarYear",
            "type": "18"
          },
          {
            "description": "Sets the start date to the first day of the fiscal year after the current fiscal year and the end date to the last day of that fiscal year. The fiscal year is Oct. 1 to Sept. 30.",
            "kind": "enum-member",
            "name": "NextFiscalYear",
            "type": "21"
          },
          {
            "description": "Sets the start date to the first day of the month after the current month and the end date to the last day of that month.",
            "kind": "enum-member",
            "name": "NextMonth",
            "type": "12"
          },
          {
            "description": "Sets the start date to the first day of the quarter after the current quarter and the end date to the last day of that quarter. Quarters are January to March, April to June, July to September, and October to December.",
            "kind": "enum-member",
            "name": "NextQuarter",
            "type": "15"
          },
          {
            "description": "Sets the start date to Sunday of the week after the current week and the end date to Saturday of that week.",
            "kind": "enum-member",
            "name": "NextWeek",
            "type": "9"
          },
          {
            "description": "Enables users to select specific start and end dates.",
            "kind": "enum-member",
            "name": "SpecificRange",
            "type": "3"
          },
          {
            "description": "Sets the start date to the first day of the current year and the end date to the last day of the year.",
            "kind": "enum-member",
            "name": "ThisCalendarYear",
            "type": "17"
          },
          {
            "description": "Sets the start date to the first day of the current fiscal year and the end date to the last day of the fiscal year. The fiscal year is Oct. 1 to Sept. 30.",
            "kind": "enum-member",
            "name": "ThisFiscalYear",
            "type": "20"
          },
          {
            "description": "Sets the start date to the first day of the current month and the end date to the last day of the month.",
            "kind": "enum-member",
            "name": "ThisMonth",
            "type": "11"
          },
          {
            "description": "Sets the start date to the first day of the current quarter and the end date to the last day of the quarter. Quarters are January to March, April to June, July to September, and October to December.",
            "kind": "enum-member",
            "name": "ThisQuarter",
            "type": "14"
          },
          {
            "description": "Sets the start date to Sunday of the current week and the end date to Saturday.",
            "kind": "enum-member",
            "name": "ThisWeek",
            "type": "8"
          },
          {
            "description": "Sets the start and end dates to the current day.",
            "kind": "enum-member",
            "name": "Today",
            "type": "5"
          },
          {
            "description": "Sets the start and end dates to the day after the current day.",
            "kind": "enum-member",
            "name": "Tomorrow",
            "type": "6"
          },
          {
            "description": "Sets the start and end dates to the day before the current day.",
            "kind": "enum-member",
            "name": "Yesterday",
            "type": "4"
          }
        ],
        "name": "SkyDateRangeCalculatorId"
      },
      {
        "anchorId": "enum_sky-date-range-calculator-type",
        "description": "The types of calculations available for a date range calculator.",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range-calculator-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Includes an input for a date after the current date.",
            "kind": "enum-member",
            "name": "After",
            "type": "0"
          },
          {
            "description": "Includes an input for a date before the current date.",
            "kind": "enum-member",
            "name": "Before",
            "type": "1"
          },
          {
            "description": "Includes two inputs for a range of dates.",
            "kind": "enum-member",
            "name": "Range",
            "type": "2"
          },
          {
            "description": "Does not accept any input but calculates a specific range based on the current date.",
            "kind": "enum-member",
            "name": "Relative",
            "type": "3"
          }
        ],
        "name": "SkyDateRangeCalculatorType"
      },
      {
        "anchorId": "type-alias_sky-date-range-calculator-validate-function",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range-calculator-validate-function.ts",
        "kind": "type-alias",
        "name": "SkyDateRangeCalculatorValidateFunction",
        "type": "Function"
      },
      {
        "anchorId": "class_sky-date-range-calculator",
        "children": [
          {
            "description": "Gets the current value of the calculator.",
            "kind": "class-method",
            "name": "getValue",
            "parameters": [
              {
                "description": "The start date.",
                "isOptional": true,
                "name": "startDateInput",
                "type": "null | Date"
              },
              {
                "description": "The end date.",
                "isOptional": true,
                "name": "endDateInput",
                "type": "null | Date"
              }
            ],
            "type": "SkyDateRangeCalculation"
          },
          {
            "description": "Performs synchronous validation against the control.",
            "kind": "class-method",
            "name": "validate",
            "parameters": [
              { "isOptional": true, "name": "value", "type": "SkyDateRange" }
            ],
            "type": "null | ValidationErrors"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDateRangeCalculator"
          },
          {
            "kind": "class-property",
            "name": "_shortDescriptionResourceKey",
            "type": "undefined | string"
          },
          {
            "description": "The calculator ID that specifies calculator objects that represent date ranges.",
            "kind": "class-property",
            "name": "calculatorId",
            "type": "SkyDateRangeCalculatorId"
          },
          {
            "description": "The text to display in the calculator select menu.",
            "kind": "class-property",
            "name": "shortDescription",
            "type": "string"
          },
          {
            "description": "The type of calculations available for the date range.",
            "kind": "class-property",
            "name": "type",
            "type": "SkyDateRangeCalculatorType"
          },
          {
            "description": "Gets the current value of the calculator.",
            "kind": "class-property",
            "name": "getValue",
            "type": "SkyDateRangeCalculation"
          },
          {
            "description": "Performs synchronous validation against the control.",
            "kind": "class-property",
            "name": "validate",
            "type": "null | ValidationErrors"
          }
        ],
        "description": "Represents the calculator.",
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range-calculator.ts",
        "kind": "class",
        "name": "SkyDateRangeCalculator"
      },
      {
        "anchorId": "interface_sky-date-range",
        "children": [
          {
            "description": "The last date in the date range.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "endDate",
            "type": "null | Date"
          },
          {
            "description": "The first date in the date range.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "startDate",
            "type": "null | Date"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/date-range-picker/types/date-range.ts",
        "kind": "interface",
        "name": "SkyDateRange"
      },
      {
        "anchorId": "interface_sky-datepicker-calendar-change",
        "children": [
          {
            "description": "The observable that allows the consumer to push custom dates back to the calendar when the `SkyCalendarDateRangeChangeEvent` event fires. This is useful for displaying key dates or disabled dates each time the calendar changes. If disabled dates are provided, SKY UX will prevent the user from selecting the date from the calendar. However, consumers will still need to add a custom validator to prevent users from entering disabled dates in the text input.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "customDates",
            "type": "Observable<SkyDatepickerCustomDate[]>"
          },
          {
            "description": "The end date.",
            "kind": "interface-property",
            "name": "endDate",
            "type": "Date"
          },
          {
            "description": "The start date.",
            "kind": "interface-property",
            "name": "startDate",
            "type": "Date"
          }
        ],
        "description": "Specifies changes in the datepicker calendar.",
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker-calendar-change.ts",
        "kind": "interface",
        "name": "SkyDatepickerCalendarChange"
      },
      {
        "anchorId": "class_sky-datepicker-calendar-component",
        "children": [
          {
            "kind": "directive-input",
            "name": "customDates",
            "type": "undefined | SkyDatepickerCustomDate[]"
          },
          {
            "kind": "directive-input",
            "name": "isDaypickerWaiting",
            "type": "undefined | boolean"
          },
          {
            "kind": "directive-input",
            "name": "maxDate",
            "type": "undefined | Date"
          },
          {
            "kind": "directive-input",
            "name": "minDate",
            "type": "undefined | Date"
          },
          {
            "description": "currently selected date",
            "kind": "directive-input",
            "name": "selectedDate",
            "type": "undefined | Date"
          },
          {
            "kind": "directive-input",
            "name": "startAtDate",
            "type": "undefined | Date"
          },
          {
            "description": "starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday)",
            "kind": "directive-input",
            "name": "startingDay",
            "type": "number"
          },
          {
            "kind": "directive-output",
            "name": "calendarDateRangeChange",
            "type": "EventEmitter<undefined | SkyDatepickerCalendarChange>"
          },
          {
            "kind": "directive-output",
            "name": "calendarModeChange",
            "type": "EventEmitter<string>"
          },
          {
            "kind": "directive-output",
            "name": "selectedDateChange",
            "type": "EventEmitter<Date>"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker-calendar.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyDatepickerCalendarComponent",
        "selector": "sky-datepicker-calendar"
      },
      {
        "anchorId": "class_sky-datepicker-config-service",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDatepickerConfigService"
          },
          {
            "description": "The date format for the input.",
            "defaultValue": "\"MM/DD/YYYY\"",
            "kind": "class-property",
            "name": "dateFormat",
            "type": "undefined | string"
          },
          {
            "description": "The latest selectable date that is available in the calendar.",
            "kind": "class-property",
            "name": "maxDate",
            "type": "undefined | Date"
          },
          {
            "description": "The earliest selectable date that is available in the calendar.",
            "kind": "class-property",
            "name": "minDate",
            "type": "undefined | Date"
          },
          {
            "description": "The date to open the calendar to initially.",
            "defaultValue": "the current date",
            "kind": "class-property",
            "name": "startAtDate",
            "type": "undefined | Date"
          },
          {
            "description": "The starting day of the week in the calendar, where `0` sets the starting day to Sunday.",
            "defaultValue": "0",
            "kind": "class-property",
            "name": "startingDay",
            "type": "number"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker-config.service.ts",
        "kind": "service",
        "name": "SkyDatepickerConfigService"
      },
      {
        "anchorId": "interface_sky-datepicker-custom-date",
        "children": [
          {
            "description": "The date to customize.",
            "kind": "interface-property",
            "name": "date",
            "type": "Date"
          },
          {
            "description": "Whether to disable the date.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Whether to display the date as a key date in the calendar.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "keyDate",
            "type": "boolean"
          },
          {
            "description": "Displays a popup of the provided text when hovering over the key date in the calendar.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "keyDateText",
            "type": "string[]"
          }
        ],
        "description": "The configuration for a custom date.",
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker-custom-date.ts",
        "kind": "interface",
        "name": "SkyDatepickerCustomDate"
      },
      {
        "anchorId": "class_sky-fuzzy-datepicker-input-directive",
        "children": [
          {
            "description": "Whether to disable date validation on the fuzzy datepicker input.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "skyDatepickerNoValidate",
            "type": "undefined | boolean"
          },
          {
            "description": "The date format for the input. Place this attribute on the `input` element to override the default in `SkyDatepickerConfigService`.",
            "defaultValue": "\"MM/DD/YYYY\"",
            "kind": "directive-input",
            "name": "dateFormat",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the datepicker on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to prevent users from specifying dates that are in the future. Place this attribute on the `input` element.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "futureDisabled",
            "type": "undefined | boolean"
          },
          {
            "description": "The latest fuzzy date allowed. Place this attribute on the `input` element to prevent fuzzy dates after a specified date. This property accepts a `SkyFuzzyDate` value that includes numeric month, day, and year values. For example: `{ month: 1, day: 1, year: 2027 }`.",
            "kind": "directive-input",
            "name": "maxDate",
            "type": "undefined | SkyFuzzyDate"
          },
          {
            "description": "The earliest fuzzy date allowed. Place this attribute on the `input` element to prevent fuzzy dates before a specified date. This property accepts a `SkyFuzzyDate` value that includes numeric month, day, and year values. For example: `{ month: 1, day: 1, year: 2007 }`.",
            "kind": "directive-input",
            "name": "minDate",
            "type": "undefined | SkyFuzzyDate"
          },
          {
            "description": "The fuzzy date to open the calendar to initially. This property accepts a `SkyFuzzyDate` value that includes numeric month, day, and year values. For example: `{ month: 1, day: 1, year: 2007 }`.",
            "defaultValue": "The current date",
            "kind": "directive-input",
            "name": "startAtDate",
            "type": "undefined | SkyFuzzyDate"
          },
          {
            "description": "The starting day of the week in the calendar, where `0` sets the starting day to Sunday. Place this attribute on the `input` element to override the default in `SkyDatepickerConfigService`.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "startingDay",
            "type": "number"
          },
          {
            "description": "Whether to require the year in fuzzy dates.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "yearRequired",
            "type": "undefined | boolean"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker-input-fuzzy.directive.ts",
        "kind": "directive",
        "name": "SkyFuzzyDatepickerInputDirective",
        "selector": "[skyFuzzyDatepickerInput]"
      },
      {
        "anchorId": "class_sky-datepicker-input-directive",
        "children": [
          {
            "description": "Whether to disable date validation on the datepicker input.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "skyDatepickerNoValidate",
            "type": "undefined | boolean"
          },
          {
            "description": "The date format for the input. Place this attribute on the `input` element to override the default in the `SkyDatepickerConfigService`.",
            "defaultValue": "\"MM/DD/YYYY\"",
            "kind": "directive-input",
            "name": "dateFormat",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the datepicker on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The latest date that is available in the calendar. Place this attribute on the `input` element to override the default in `SkyDatepickerConfigService`.",
            "kind": "directive-input",
            "name": "maxDate",
            "type": "undefined | Date"
          },
          {
            "description": "The earliest date that is available in the calendar. Place this attribute on the `input` element to override the default in `SkyDatepickerConfigService`. To avoid validation errors, the time associated with the minimum date must be midnight. This is necessary because the datepicker automatically sets the time on the `Date` object for selected dates to midnight in the current user's time zone.",
            "kind": "directive-input",
            "name": "minDate",
            "type": "undefined | Date"
          },
          {
            "description": "Creates the datepicker input and calendar. Place this directive on an `input` element, and wrap the input in a `sky-datepicker` component. The value that users select is driven through the `ngModel` attribute specified on the `input` element.",
            "kind": "directive-input",
            "name": "skyDatepickerInput",
            "type": "void",
            "isRequired": true
          },
          {
            "description": "The date to open the calendar to initially. Place this attribute on the `input` element to override the default in `SkyDatepickerConfigService`.",
            "defaultValue": "The current date",
            "kind": "directive-input",
            "name": "startAtDate",
            "type": "undefined | Date"
          },
          {
            "description": "The starting day of the week in the calendar, where `0` sets the starting day to Sunday. Place this attribute on the `input` element to override the default in `SkyDatepickerConfigService`.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "startingDay",
            "type": "number"
          },
          {
            "description": "Whether the format of the date value must match the format from the `dateFormat` value. If this property is `true` and the datepicker input directive cannot find an exact match, then the input is marked as invalid. If this property is `false` and the datepicker input directive cannot find an exact match, then it attempts to format the string based on the [ISO 8601 standard format](https://www.iso.org/iso-8601-date-and-time-format.html).",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "strict",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker-input.directive.ts",
        "kind": "directive",
        "name": "SkyDatepickerInputDirective",
        "selector": "[skyDatepickerInput]"
      },
      {
        "anchorId": "class_sky-datepicker-component",
        "children": [
          {
            "description": "Adds a class to the datepicker.",
            "defaultValue": "\"\"",
            "kind": "directive-input",
            "name": "pickerClass",
            "type": "undefined | string"
          },
          {
            "description": "Fires when a user selects a date from the calendar.",
            "kind": "directive-output",
            "name": "calendarDateChange",
            "type": "OutputEmitterRef<Date>"
          },
          {
            "description": "Fires when the range of displayed dates in the calendar changes. Provides the current range of displayed dates and a mutable `customDate` property consumers can use to modify individual dates on the calendar.",
            "kind": "directive-output",
            "name": "calendarDateRangeChange",
            "type": "EventEmitter<SkyDatepickerCalendarChange>"
          },
          {
            "kind": "directive-output",
            "name": "dateFormatChange",
            "type": "EventEmitter<string>"
          },
          {
            "kind": "directive-output",
            "name": "openChange",
            "type": "EventEmitter<boolean>"
          }
        ],
        "description": "Creates the datepicker button and calendar. You must wrap this component around an input with the `skyDatepickerInput` directive.",
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker.component.ts",
        "kind": "component",
        "name": "SkyDatepickerComponent",
        "selector": "sky-datepicker"
      },
      {
        "anchorId": "class_sky-datepicker-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDatepickerModule"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/datepicker.module.ts",
        "kind": "module",
        "name": "SkyDatepickerModule"
      },
      {
        "anchorId": "class_sky-fuzzy-date-service",
        "children": [
          {
            "description": "Formats a fuzzy date by using the provided format and locale strings. If not provided, the locale will be taken from the browser's default locale.",
            "kind": "class-method",
            "name": "format",
            "parameters": [
              { "name": "fuzzyDate", "type": "SkyFuzzyDate" },
              { "isOptional": true, "name": "format", "type": "string" },
              { "isOptional": true, "name": "locale", "type": "string" }
            ],
            "type": "string"
          },
          {
            "kind": "class-method",
            "name": "getCurrentFuzzyDate",
            "parameters": [],
            "type": "SkyFuzzyDate"
          },
          {
            "description": "Returns the browser's current locale string.",
            "kind": "class-method",
            "name": "getCurrentLocale",
            "parameters": [],
            "type": "string"
          },
          {
            "kind": "class-method",
            "name": "getFuzzyDateFromSelectedDate",
            "parameters": [
              { "isOptional": true, "name": "selectedDate", "type": "Date" },
              { "isOptional": true, "name": "dateFormat", "type": "string" }
            ],
            "type": "undefined | SkyFuzzyDate"
          },
          {
            "kind": "class-method",
            "name": "getFuzzyDateFromString",
            "parameters": [
              { "name": "date", "type": "string" },
              { "isOptional": true, "name": "dateFormat", "type": "string" }
            ],
            "type": "undefined | SkyFuzzyDate"
          },
          {
            "kind": "class-method",
            "name": "getFuzzyDateRange",
            "parameters": [
              { "name": "startFuzzyDate", "type": "SkyFuzzyDate" },
              { "name": "endFuzzyDate", "type": "SkyFuzzyDate" }
            ],
            "type": "SkyFuzzyDateRange"
          },
          {
            "description": "Returns the short format of the provided locale. If not provided, the locale will be taken from the browser's default locale.",
            "kind": "class-method",
            "name": "getLocaleShortFormat",
            "parameters": [
              { "isOptional": true, "name": "locale", "type": "string" }
            ],
            "type": "string"
          },
          {
            "description": "If not provided, years will default to current year; months will default to January; days will default to 1st of the month.",
            "kind": "class-method",
            "name": "getMomentFromFuzzyDate",
            "parameters": [
              {
                "isOptional": true,
                "name": "fuzzyDate",
                "type": "SkyFuzzyDate"
              }
            ],
            "type": "any"
          },
          {
            "deprecationReason": "Deprecated in favor of the `format` function.",
            "description": "Gets a string instance of a fuzzy date.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getStringFromFuzzyDate",
            "parameters": [
              {
                "isOptional": true,
                "name": "fuzzyDate",
                "type": "SkyFuzzyDate"
              },
              { "isOptional": true, "name": "dateFormat", "type": "string" }
            ],
            "type": "undefined | string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFuzzyDateService"
          },
          {
            "description": "Formats a fuzzy date by using the provided format and locale strings. If not provided, the locale will be taken from the browser's default locale.",
            "kind": "class-property",
            "name": "format",
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "getCurrentFuzzyDate",
            "type": "SkyFuzzyDate"
          },
          {
            "description": "Returns the browser's current locale string.",
            "kind": "class-property",
            "name": "getCurrentLocale",
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "getFuzzyDateFromSelectedDate",
            "type": "undefined | SkyFuzzyDate"
          },
          {
            "kind": "class-property",
            "name": "getFuzzyDateFromString",
            "type": "undefined | SkyFuzzyDate"
          },
          {
            "kind": "class-property",
            "name": "getFuzzyDateRange",
            "type": "SkyFuzzyDateRange"
          },
          {
            "description": "Returns the short format of the provided locale. If not provided, the locale will be taken from the browser's default locale.",
            "kind": "class-property",
            "name": "getLocaleShortFormat",
            "type": "string"
          },
          {
            "description": "If not provided, years will default to current year; months will default to January; days will default to 1st of the month.",
            "kind": "class-property",
            "name": "getMomentFromFuzzyDate",
            "type": "any"
          },
          {
            "deprecationReason": "Deprecated in favor of the `format` function.",
            "description": "Gets a string instance of a fuzzy date.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getStringFromFuzzyDate",
            "type": "undefined | string"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/fuzzy-date.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyFuzzyDateService"
      },
      {
        "anchorId": "interface_sky-fuzzy-date",
        "children": [
          {
            "description": "The day in a fuzzy date, where `1` sets the day to the first day of the specified month.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "day",
            "type": "number"
          },
          {
            "description": "The month in a fuzzy date, where `1` sets the month to January.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "month",
            "type": "number"
          },
          {
            "description": "The year in a fuzzy date.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "year",
            "type": "number"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/datepicker/fuzzy-date.ts",
        "kind": "interface",
        "name": "SkyFuzzyDate"
      },
      {
        "anchorId": "type-alias_sky-timepicker-time-format-type",
        "filePath": "libs/components/datetime/src/lib/modules/timepicker/timepicker-time-format-type.ts",
        "kind": "type-alias",
        "name": "SkyTimepickerTimeFormatType",
        "type": "\"hh\" | \"HH\""
      },
      {
        "anchorId": "interface_sky-timepicker-time-output",
        "children": [
          {
            "description": "The time format string.",
            "kind": "interface-property",
            "name": "customFormat",
            "type": "string"
          },
          {
            "description": "The hour.",
            "kind": "interface-property",
            "name": "hour",
            "type": "number"
          },
          {
            "description": "The date in [iso8601 format](https://www.iso.org/iso-8601-date-and-time-format.html).",
            "kind": "interface-property",
            "name": "iso8601",
            "type": "Date"
          },
          {
            "description": "The date in the current local time format.",
            "kind": "interface-property",
            "name": "local",
            "type": "string"
          },
          {
            "description": "The meridian (`AM` or `PM`).",
            "kind": "interface-property",
            "name": "meridie",
            "type": "string"
          },
          {
            "description": "The minute.",
            "kind": "interface-property",
            "name": "minute",
            "type": "number"
          },
          {
            "description": "The time zone.",
            "kind": "interface-property",
            "name": "timezone",
            "type": "number"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/timepicker/timepicker-time-output.ts",
        "kind": "interface",
        "name": "SkyTimepickerTimeOutput"
      },
      {
        "anchorId": "class_sky-timepicker-component",
        "children": [
          {
            "description": "Fires when the value in the timepicker input changes.",
            "kind": "directive-output",
            "name": "selectedTimeChanged",
            "type": "EventEmitter<SkyTimepickerTimeOutput>"
          }
        ],
        "description": "Creates a SKY UX-themed replacement for the HTML `input` element with `type=\"time\"`. The value that users select is driven through the `ngModel` attribute specified on the `input` element. You must wrap this component around an `input` with the `skyTimepickerInput` directive.",
        "filePath": "libs/components/datetime/src/lib/modules/timepicker/timepicker.component.ts",
        "kind": "component",
        "name": "SkyTimepickerComponent",
        "selector": "sky-timepicker"
      },
      {
        "anchorId": "class_sky-timepicker-input-directive",
        "children": [
          {
            "description": "The custom time format. For examples, see the [moment.js](https://momentjs.com/docs/#/displaying/format/) docs.",
            "kind": "directive-input",
            "name": "returnFormat",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the timepicker on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Creates the timepicker input field and picker. Place this attribute on an `input` element, and wrap the input in a `sky-timepicker` component. This attribute must be set to the instance of the `sky-timepicker`.",
            "kind": "directive-input",
            "name": "skyTimepickerInput",
            "type": "undefined | λ6",
            "isRequired": true
          },
          {
            "description": "The 12-hour `hh` or 24-hour `HH` time format for the input.",
            "defaultValue": "\"hh\"",
            "kind": "directive-input",
            "name": "timeFormat",
            "type": "SkyTimepickerTimeFormatType"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/timepicker/timepicker.directive.ts",
        "kind": "directive",
        "name": "SkyTimepickerInputDirective",
        "selector": "[skyTimepickerInput]"
      },
      {
        "anchorId": "class_sky-timepicker-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTimepickerModule"
          }
        ],
        "filePath": "libs/components/datetime/src/lib/modules/timepicker/timepicker.module.ts",
        "kind": "module",
        "name": "SkyTimepickerModule"
      }
    ],
    "@skyux/datetime/testing": [
      {
        "anchorId": "class_sky-datepicker-fixture",
        "children": [
          {
            "description": "Click the calendar button to open or close calendar.",
            "kind": "class-method",
            "name": "clickDatepickerCalenderButtonEl",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "clickDayEl",
            "parameters": [{ "name": "dayIndex", "type": "number" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDatepickerFixture"
          },
          {
            "description": "The datepicker's calendar element.",
            "kind": "class-property",
            "name": "calendarEl",
            "type": "any"
          },
          {
            "description": "The datepicker's currently selected date.",
            "kind": "class-property",
            "name": "date",
            "type": "string"
          },
          {
            "description": "Flag indicating if datepicker input is disabled.",
            "kind": "class-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Click the calendar button to open or close calendar.",
            "kind": "class-property",
            "name": "clickDatepickerCalenderButtonEl",
            "type": "void"
          },
          { "kind": "class-property", "name": "clickDayEl", "type": "void" }
        ],
        "deprecationReason": "Use `SkyDatepickerHarness` instead.",
        "description": "Allows interaction with a SKY UX datepicker component.",
        "filePath": "libs/components/datetime/testing/src/legacy/datepicker-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyDatepickerFixture"
      },
      {
        "anchorId": "class_sky-timepicker-fixture",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTimepickerFixture"
          },
          {
            "description": "Flag indicating if timepicker input is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "boolean"
          },
          {
            "description": "Flag indicating if timepicker input is valid.",
            "kind": "class-property",
            "name": "isValid",
            "type": "boolean"
          },
          {
            "description": "The timepicker's currently selected time.",
            "kind": "class-property",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Allows interaction with a SKY UX timepicker component.",
        "filePath": "libs/components/datetime/testing/src/legacy/timepicker-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyTimepickerFixture"
      },
      {
        "anchorId": "interface_sky-date-range-picker-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyDateRangePickerHarness` instances.",
        "filePath": "libs/components/datetime/testing/src/modules/date-range-picker/date-range-picker-harness.filters.ts",
        "kind": "interface",
        "name": "SkyDateRangePickerFilters"
      },
      {
        "anchorId": "class_sky-date-range-picker-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the hint text.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the label text.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether date range picker end date before start date error is thrown.",
            "kind": "class-method",
            "name": "hasEndDateBeforeStartDateError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether end date input has required error.",
            "kind": "class-method",
            "name": "hasEndDateRequiredError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether a custom error has fired.",
            "kind": "class-method",
            "name": "hasError",
            "parameters": [{ "name": "errorName", "type": "string" }],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether start date input has required error.",
            "kind": "class-method",
            "name": "hasStartDateRequiredError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the date range picker component is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether end date datepicker is visible.",
            "kind": "class-method",
            "name": "isEndDateVisible",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the date range picker has stacked enabled.",
            "kind": "class-method",
            "name": "isStacked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether start date datepicker is visible.",
            "kind": "class-method",
            "name": "isStartDateVisible",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects the specified calculator.",
            "kind": "class-method",
            "name": "selectCalculator",
            "parameters": [
              { "name": "calculatorId", "type": "SkyDateRangeCalculatorId" }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Sets the end date.",
            "kind": "class-method",
            "name": "setEndDateValue",
            "parameters": [
              {
                "description": "date input as a formatted string.",
                "name": "newDate",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Sets the start date.",
            "kind": "class-method",
            "name": "setStartDateValue",
            "parameters": [
              {
                "description": "date input as a formatted string.",
                "name": "newDate",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDateRangePickerHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyDateRangePickerFilters" }
            ],
            "type": "HarnessPredicate<SkyDateRangePickerHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDateRangePickerHarness"
          },
          {
            "defaultValue": "'sky-date-range-picker'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help inline popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the hint text.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the label text.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether date range picker end date before start date error is thrown.",
            "kind": "class-property",
            "name": "hasEndDateBeforeStartDateError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether end date input has required error.",
            "kind": "class-property",
            "name": "hasEndDateRequiredError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether a custom error has fired.",
            "kind": "class-property",
            "name": "hasError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether start date input has required error.",
            "kind": "class-property",
            "name": "hasStartDateRequiredError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the date range picker component is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether end date datepicker is visible.",
            "kind": "class-property",
            "name": "isEndDateVisible",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the date range picker has stacked enabled.",
            "kind": "class-property",
            "name": "isStacked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether start date datepicker is visible.",
            "kind": "class-property",
            "name": "isStartDateVisible",
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects the specified calculator.",
            "kind": "class-property",
            "name": "selectCalculator",
            "type": "Promise<void>"
          },
          {
            "description": "Sets the end date.",
            "kind": "class-property",
            "name": "setEndDateValue",
            "type": "Promise<void>"
          },
          {
            "description": "Sets the start date.",
            "kind": "class-property",
            "name": "setStartDateValue",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDateRangePickerHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyDateRangePickerHarness>"
          }
        ],
        "description": "Harness for interacting with date range picker components in tests.",
        "filePath": "libs/components/datetime/testing/src/modules/date-range-picker/date-range-picker-harness.ts",
        "kind": "class",
        "name": "SkyDateRangePickerHarness"
      },
      {
        "anchorId": "interface_sky-datepicker-calendar-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyDatepickerCalendarHarness` instances.",
        "filePath": "libs/components/datetime/testing/src/modules/datepicker/datepicker-calendar-harness.filters.ts",
        "kind": "interface",
        "name": "SkyDatepickerCalendarHarnessFilters"
      },
      {
        "anchorId": "class_sky-datepicker-calendar-harness",
        "children": [
          {
            "description": "Clicks the specified date, month or year.",
            "kind": "class-method",
            "name": "clickDate",
            "parameters": [{ "name": "date", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the 'next' button on the calendar header.",
            "kind": "class-method",
            "name": "clickNextButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the 'previous' button on the calendar header.",
            "kind": "class-method",
            "name": "clickPreviousButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the 'title' button on the calendar header.",
            "kind": "class-method",
            "name": "clickTitleButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the current calendar mode.",
            "kind": "class-method",
            "name": "getCalendarMode",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the current title.",
            "kind": "class-method",
            "name": "getCalendarTitle",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the value of the currently selected calendar item.",
            "kind": "class-method",
            "name": "getSelectedValue",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyDatepickerCalendarHarnessFilters"
              }
            ],
            "type": "HarnessPredicate<SkyDatepickerCalendarHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDatepickerCalendarHarness"
          },
          {
            "defaultValue": "'.sky-datepicker-calendar-container'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the specified date, month or year.",
            "kind": "class-property",
            "name": "clickDate",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the 'next' button on the calendar header.",
            "kind": "class-property",
            "name": "clickNextButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the 'previous' button on the calendar header.",
            "kind": "class-property",
            "name": "clickPreviousButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the 'title' button on the calendar header.",
            "kind": "class-property",
            "name": "clickTitleButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the current calendar mode.",
            "kind": "class-property",
            "name": "getCalendarMode",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the current title.",
            "kind": "class-property",
            "name": "getCalendarTitle",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the value of the currently selected calendar item.",
            "kind": "class-property",
            "name": "getSelectedValue",
            "type": "Promise<null | string>"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyDatepickerCalendarHarness>"
          }
        ],
        "description": "Harness for interacting with datepicker calendar in tests.",
        "filePath": "libs/components/datetime/testing/src/modules/datepicker/datepicker-calendar-harness.ts",
        "kind": "class",
        "name": "SkyDatepickerCalendarHarness"
      },
      {
        "anchorId": "interface_sky-datepicker-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyDatepickerHarness` instances.",
        "filePath": "libs/components/datetime/testing/src/modules/datepicker/datepicker-harness.filters.ts",
        "kind": "interface",
        "name": "SkyDatepickerFilters"
      },
      {
        "anchorId": "class_sky-datepicker-harness",
        "children": [
          {
            "description": "Clicks the calendar button.",
            "kind": "class-method",
            "name": "clickCalendarButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the datepicker input harness.",
            "kind": "class-method",
            "name": "getControl",
            "parameters": [],
            "type": "Promise<SkyDatepickerInputHarness>"
          },
          {
            "description": "Gets the `SkyDatepickerCalendarHarness` for the calendar picker controlled by the datepicker. Throws an error if the calendar picker is not open.",
            "kind": "class-method",
            "name": "getDatepickerCalendar",
            "parameters": [],
            "type": "Promise<SkyDatepickerCalendarHarness>"
          },
          {
            "description": "Whether the datepicker calendar picker is open.",
            "kind": "class-method",
            "name": "isDatepickerOpen",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDatepickerHarness` that meets certain criteria.  These filters only work for standalone datepickers. For datepickers wrapped inside `sky-input-box`, place filters on the input box instead and query the datepicker using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyDatepickerFilters" }
            ],
            "type": "HarnessPredicate<SkyDatepickerHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDatepickerHarness"
          },
          {
            "defaultValue": "'sky-datepicker, .sky-input-group'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the calendar button.",
            "kind": "class-property",
            "name": "clickCalendarButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the datepicker input harness.",
            "kind": "class-property",
            "name": "getControl",
            "type": "Promise<SkyDatepickerInputHarness>"
          },
          {
            "description": "Gets the `SkyDatepickerCalendarHarness` for the calendar picker controlled by the datepicker. Throws an error if the calendar picker is not open.",
            "kind": "class-property",
            "name": "getDatepickerCalendar",
            "type": "Promise<SkyDatepickerCalendarHarness>"
          },
          {
            "description": "Whether the datepicker calendar picker is open.",
            "kind": "class-property",
            "name": "isDatepickerOpen",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDatepickerHarness` that meets certain criteria.  These filters only work for standalone datepickers. For datepickers wrapped inside `sky-input-box`, place filters on the input box instead and query the datepicker using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyDatepickerHarness>"
          }
        ],
        "description": "Harness for interacting with datepicker components in tests.",
        "filePath": "libs/components/datetime/testing/src/modules/datepicker/datepicker-harness.ts",
        "kind": "class",
        "name": "SkyDatepickerHarness"
      }
    ],
    "@skyux/popovers": [
      {
        "anchorId": "class_sky-dropdown-button-component",
        "description": "Specifies the button for the dropdown menu.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/dropdown-button.component.ts",
        "kind": "component",
        "name": "SkyDropdownButtonComponent",
        "selector": "sky-dropdown-button"
      },
      {
        "anchorId": "class_sky-dropdown-item-component",
        "children": [
          {
            "description": "The ARIA role for the dropdown menu item [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) by indicating how the item functions and what it controls. For information about how an ARIA role indicates what an item represents on a web page, see the [WAI-ARIA roles model](https://www.w3.org/WAI/PF/aria/#roles).",
            "defaultValue": "\"menuitem\"",
            "kind": "directive-input",
            "name": "ariaRole",
            "type": "string"
          }
        ],
        "description": "Specifies the items to display on the dropdown menu.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/dropdown-item.component.ts",
        "kind": "component",
        "name": "SkyDropdownItemComponent",
        "selector": "sky-dropdown-item"
      },
      {
        "anchorId": "class_sky-dropdown-menu-component",
        "children": [
          {
            "description": "The HTML element ID of the element that labels the dropdown menu. This sets the dropdown menu's `aria-labelledby` attribute to provide a text equivalent for [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "The ARIA role for the dropdown menu [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) by indicating how the dropdown menu functions and what it controls. The dropdown button inherits this value to set its `aria-haspopup` property. For information about how an ARIA role indicates what an item represents on a web page, see the [WAI-ARIA roles model](https://www.w3.org/WAI/PF/aria/#roles).",
            "defaultValue": "\"menu\"",
            "kind": "directive-input",
            "name": "ariaRole",
            "type": "string"
          },
          {
            "description": "Whether to use the browser's native focus function when users navigate through menu items with the keyboard. To disable the native focus function, set this property to `false`. For example, to let users interact with the dropdown menu but keep the keyboard focus on a different element, set this property to `false`.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "useNativeFocus",
            "type": "boolean"
          },
          {
            "description": "Fires when the dropdown menu's active index or selected item changes. This event provides an observable to emit changes, and the response is of the SkyDropdownMenuChange type.",
            "kind": "directive-output",
            "name": "menuChanges",
            "type": "EventEmitter<SkyDropdownMenuChange>"
          }
        ],
        "description": "Creates a menu that contains dropdown menu items.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/dropdown-menu.component.ts",
        "kind": "component",
        "name": "SkyDropdownMenuComponent",
        "selector": "sky-dropdown-menu"
      },
      {
        "anchorId": "class_sky-dropdown-component",
        "children": [
          {
            "description": "Whether to disable the dropdown button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "The ARIA label for the dropdown. This sets the dropdown's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If multiple dropdowns with no label or the same label appear on the same page, they must have unique ARIA labels that provide context, such as \"Context menu for Robert Hernandez\" or \"Edit Robert Hernandez.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "label",
            "type": "undefined | string"
          },
          {
            "description": "The observable that sends commands to the dropdown. The commands should respect the [[SkyDropdownMessage]] type.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "undefined | Subject<SkyDropdownMessage>"
          },
          {
            "description": "The title to display in a tooltip when users hover the mouse over the dropdown button.",
            "kind": "directive-input",
            "name": "title",
            "type": "undefined | string"
          },
          {
            "description": "The background color for the dropdown button. Available values are `default`, `primary`, and `link`. These values set the background color and hover behavior from the [secondary and primary button classes](https://developer.blackbaud.com/skyux/components/button) respectively.",
            "defaultValue": "\"default\"",
            "kind": "directive-input",
            "name": "buttonStyle",
            "type": "string"
          },
          {
            "description": "The type of button to render as the dropdown's trigger element. To display a button with a caret, specify `'select'` and render the button text or icon in a `sky-dropdown-button` element. To display a round button with an ellipsis, specify `'context-menu'`.",
            "defaultValue": "\"select\"",
            "kind": "directive-input",
            "name": "buttonType",
            "type": "SkyDropdownButtonType"
          },
          {
            "description": "The horizontal alignment of the dropdown menu in relation to the dropdown button.",
            "defaultValue": "\"left\"",
            "kind": "directive-input",
            "name": "horizontalAlignment",
            "type": "SkyDropdownHorizontalAlignment"
          },
          {
            "deprecationReason": "We recommend against using this property. If you choose to use the deprecated\n`hover` value anyway, we recommend that you not use it in combination with the `title`\nproperty.",
            "description": "How users interact with the dropdown button to expose the dropdown menu. We recommend the default `click` value because the `hover` value can pose [accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) issues for users on touch devices such as phones and tablets.",
            "defaultValue": "\"click\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "trigger",
            "type": "SkyDropdownTriggerType"
          }
        ],
        "description": "Creates a dropdown menu that displays menu items that users may select.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/dropdown.component.ts",
        "kind": "component",
        "name": "SkyDropdownComponent",
        "selector": "sky-dropdown"
      },
      {
        "anchorId": "class_sky-dropdown-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDropdownModule"
          }
        ],
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/dropdown.module.ts",
        "kind": "module",
        "name": "SkyDropdownModule"
      },
      {
        "anchorId": "type-alias_sky-dropdown-button-type",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/types/dropdown-button-type.ts",
        "kind": "type-alias",
        "name": "SkyDropdownButtonType",
        "type": "\"select\" | \"context-menu\" | \"tab\""
      },
      {
        "anchorId": "type-alias_sky-dropdown-horizontal-alignment",
        "description": "The horizontal alignment for the dropdown.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/types/dropdown-horizontal-alignment.ts",
        "kind": "type-alias",
        "name": "SkyDropdownHorizontalAlignment",
        "type": "\"left\" | \"center\" | \"right\""
      },
      {
        "anchorId": "interface_sky-dropdown-menu-change",
        "children": [
          {
            "description": "The active menu index.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "activeIndex",
            "type": "number"
          },
          {
            "description": "The items in the menu.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "items",
            "type": "λ1[]"
          },
          {
            "description": "The selected item in the menu.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectedItem",
            "type": "λ1"
          }
        ],
        "description": "Specifies menu items, including the selected one.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/types/dropdown-menu-change.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyDropdownMenuChange"
      },
      {
        "anchorId": "enum_sky-dropdown-message-type",
        "description": "The type of message to send.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/types/dropdown-message-type.ts",
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "Closes the dropdown menu.",
            "kind": "enum-member",
            "name": "Close",
            "type": "1"
          },
          {
            "description": "Puts focus on the first item in the dropdown menu.",
            "kind": "enum-member",
            "name": "FocusFirstItem",
            "type": "6"
          },
          {
            "description": "Puts focus on the last item in the dropdown menu.",
            "kind": "enum-member",
            "name": "FocusLastItem",
            "type": "7"
          },
          {
            "description": "Puts focus on the next item in the dropdown menu.",
            "kind": "enum-member",
            "name": "FocusNextItem",
            "type": "3"
          },
          {
            "description": "Puts focus on the previous item in the dropdown menu.",
            "kind": "enum-member",
            "name": "FocusPreviousItem",
            "type": "4"
          },
          {
            "description": "Puts focus on the dropdown button.",
            "kind": "enum-member",
            "name": "FocusTriggerButton",
            "type": "2"
          },
          {
            "description": "Opens the dropdown menu.",
            "kind": "enum-member",
            "name": "Open",
            "type": "0"
          },
          {
            "description": "Repositions the dropdown menu next to the dropdown button. This is useful for when the dropdown menu's width and height change while it is open.",
            "kind": "enum-member",
            "name": "Reposition",
            "type": "5"
          }
        ],
        "name": "SkyDropdownMessageType"
      },
      {
        "anchorId": "interface_sky-dropdown-message",
        "children": [
          {
            "description": "The type of message to send.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "SkyDropdownMessageType"
          }
        ],
        "description": "Specifies the type of message to send to the dropdown component.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/types/dropdown-message.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyDropdownMessage"
      },
      {
        "anchorId": "type-alias_sky-dropdown-trigger-type",
        "description": "How users interact with the dropdown button to expose the dropdown menu.",
        "filePath": "libs/components/popovers/src/lib/modules/dropdown/types/dropdown-trigger-type.ts",
        "kind": "type-alias",
        "name": "SkyDropdownTriggerType",
        "type": "\"click\" | \"hover\""
      },
      {
        "anchorId": "class_sky-popover-content-component",
        "filePath": "libs/components/popovers/src/lib/modules/popover/popover-content.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyPopoverContentComponent",
        "selector": "sky-popover-content"
      },
      {
        "anchorId": "class_sky-popover-component",
        "children": [
          {
            "description": "The title for the popover.",
            "kind": "directive-input",
            "name": "popoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The horizontal alignment of the popover in relation to the trigger element. The `skyPopoverAlignment` property on the popover directive takes precedence over this property when specified.",
            "defaultValue": "\"center\"",
            "kind": "directive-input",
            "name": "alignment",
            "type": "SkyPopoverAlignment"
          },
          {
            "description": "The placement of the popover in relation to the trigger element. The `skyPopoverPlacement` property on the popover directive takes precedence over this property when specified.",
            "defaultValue": "\"above\"",
            "kind": "directive-input",
            "name": "placement",
            "type": "SkyPopoverPlacement"
          },
          {
            "description": "The type of popover.",
            "defaultValue": "\"info\"",
            "kind": "directive-input",
            "name": "popoverType",
            "type": "SkyPopoverType"
          },
          {
            "description": "Fires when users close the popover.",
            "kind": "directive-output",
            "name": "popoverClosed",
            "type": "EventEmitter<λ6>"
          },
          {
            "description": "Fires when users open the popover.",
            "kind": "directive-output",
            "name": "popoverOpened",
            "type": "EventEmitter<λ6>"
          }
        ],
        "filePath": "libs/components/popovers/src/lib/modules/popover/popover.component.ts",
        "kind": "component",
        "name": "SkyPopoverComponent",
        "selector": "sky-popover"
      },
      {
        "anchorId": "class_sky-popover-directive",
        "children": [
          {
            "description": "The horizontal alignment of the popover in relation to the trigger element.",
            "kind": "directive-input",
            "name": "skyPopoverAlignment",
            "type": "undefined | SkyPopoverAlignment"
          },
          {
            "description": "The placement of the popover in relation to the trigger element.",
            "kind": "directive-input",
            "name": "skyPopoverPlacement",
            "type": "undefined | SkyPopoverPlacement"
          },
          {
            "description": "The popover component to display. Add this directive to the trigger element that opens the popover.",
            "kind": "directive-input",
            "name": "skyPopover",
            "type": "undefined | λ6",
            "isRequired": true
          },
          {
            "description": "The RxJS `Subject` to send commands to the popover that respect the `SkyPopoverMessage` type.",
            "kind": "directive-input",
            "name": "skyPopoverMessageStream",
            "type": "Subject<SkyPopoverMessage>"
          },
          {
            "deprecationReason": "To ensure usability on touch devices, trigger user-invoked\npopovers on `click` actions rather than `mouseenter` actions.",
            "description": "The user action that displays the popover.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "skyPopoverTrigger",
            "type": "SkyPopoverTrigger"
          }
        ],
        "filePath": "libs/components/popovers/src/lib/modules/popover/popover.directive.ts",
        "kind": "directive",
        "name": "SkyPopoverDirective",
        "selector": "[skyPopover]"
      },
      {
        "anchorId": "class_sky-popover-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPopoverModule"
          }
        ],
        "filePath": "libs/components/popovers/src/lib/modules/popover/popover.module.ts",
        "kind": "module",
        "name": "SkyPopoverModule"
      },
      {
        "anchorId": "type-alias_sky-popover-alignment",
        "description": "Represents the horizontal alignment of the popover in relation to the trigger element.",
        "filePath": "libs/components/popovers/src/lib/modules/popover/types/popover-alignment.ts",
        "kind": "type-alias",
        "name": "SkyPopoverAlignment",
        "type": "\"left\" | \"center\" | \"right\""
      },
      {
        "anchorId": "enum_sky-popover-message-type",
        "description": "The type of message to send to the popover component.",
        "filePath": "libs/components/popovers/src/lib/modules/popover/types/popover-message-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Closes the popover.",
            "kind": "enum-member",
            "name": "Close",
            "type": "1"
          },
          {
            "description": "Brings focus to the popover element.",
            "kind": "enum-member",
            "name": "Focus",
            "type": "3"
          },
          {
            "description": "Opens the popover.",
            "kind": "enum-member",
            "name": "Open",
            "type": "0"
          },
          {
            "description": "Repositions the popover to the appropriate position. This is useful for when the popover's width and height change while it is open.",
            "kind": "enum-member",
            "name": "Reposition",
            "type": "2"
          }
        ],
        "name": "SkyPopoverMessageType"
      },
      {
        "anchorId": "interface_sky-popover-message",
        "children": [
          {
            "description": "The type of message to send.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "SkyPopoverMessageType"
          }
        ],
        "description": "Specifies messages to be sent to the popover component.",
        "filePath": "libs/components/popovers/src/lib/modules/popover/types/popover-message.ts",
        "kind": "interface",
        "name": "SkyPopoverMessage"
      },
      {
        "anchorId": "type-alias_sky-popover-placement",
        "description": "Represents the placement of the popover in relation to the trigger element.",
        "filePath": "libs/components/popovers/src/lib/modules/popover/types/popover-placement.ts",
        "kind": "type-alias",
        "name": "SkyPopoverPlacement",
        "type": "\"above\" | \"below\" | \"right\" | \"left\""
      },
      {
        "anchorId": "interface_sky-popover-position",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "alignment",
            "type": "SkyPopoverAlignment"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "arrowLeft",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "arrowTop",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "left",
            "type": "number"
          },
          {
            "kind": "interface-property",
            "name": "placement",
            "type": "SkyPopoverPlacement"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "top",
            "type": "number"
          }
        ],
        "filePath": "libs/components/popovers/src/lib/modules/popover/types/popover-position.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyPopoverPosition"
      },
      {
        "anchorId": "type-alias_sky-popover-trigger",
        "deprecationReason": "To ensure usability on touch devices, trigger user-invoked\npopovers on `click` actions rather than `mouseenter` actions.",
        "description": "The user action that displays the popover.",
        "filePath": "libs/components/popovers/src/lib/modules/popover/types/popover-trigger.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "SkyPopoverTrigger",
        "type": "\"click\" | \"mouseenter\""
      },
      {
        "anchorId": "type-alias_sky-popover-type",
        "description": "The style type of the popover.",
        "filePath": "libs/components/popovers/src/lib/modules/popover/types/popover-type.ts",
        "kind": "type-alias",
        "name": "SkyPopoverType",
        "type": "\"danger\" | \"info\""
      }
    ],
    "@skyux/popovers/testing": [
      {
        "anchorId": "class_sky-dropdown-fixture",
        "children": [
          {
            "description": "Click the dropdown button to open or close the dropdown menu.",
            "kind": "class-method",
            "name": "clickDropdownButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Click the dropdown item at the provided index.",
            "kind": "class-method",
            "name": "clickDropdownItem",
            "parameters": [{ "name": "index", "type": "number" }],
            "type": "Promise<void>"
          },
          {
            "description": "Returns information about the dropdown item at the provided index.",
            "kind": "class-method",
            "name": "getDropdownItem",
            "parameters": [{ "name": "index", "type": "number" }],
            "type": "undefined | SkyPopoversFixtureDropdownItem"
          },
          {
            "description": "Returns the contents of the dropdown menu.",
            "kind": "class-method",
            "name": "getDropdownMenuContent",
            "parameters": [],
            "type": "any"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDropdownFixture"
          },
          {
            "description": "Returns information about the dropdown component.",
            "kind": "class-property",
            "name": "dropdown",
            "type": "undefined | SkyPopoversFixtureDropdown"
          },
          {
            "description": "Returns the dropdown button's text.",
            "kind": "class-property",
            "name": "dropdownButtonText",
            "type": "undefined | string"
          },
          {
            "description": "Returns information about the dropdown menu component.",
            "kind": "class-property",
            "name": "dropdownMenu",
            "type": "undefined | SkyPopoversFixtureDropdownMenu"
          },
          {
            "description": "Whether the dropdown menu is open and visible.",
            "kind": "class-property",
            "name": "dropdownMenuIsVisible",
            "type": "boolean"
          },
          {
            "description": "Click the dropdown button to open or close the dropdown menu.",
            "kind": "class-property",
            "name": "clickDropdownButton",
            "type": "Promise<void>"
          },
          {
            "description": "Click the dropdown item at the provided index.",
            "kind": "class-property",
            "name": "clickDropdownItem",
            "type": "Promise<void>"
          },
          {
            "description": "Returns information about the dropdown item at the provided index.",
            "kind": "class-property",
            "name": "getDropdownItem",
            "type": "undefined | SkyPopoversFixtureDropdownItem"
          },
          {
            "description": "Returns the contents of the dropdown menu.",
            "kind": "class-property",
            "name": "getDropdownMenuContent",
            "type": "any"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX dropdown component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/popovers/testing/src/legacy/dropdown/dropdown-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyDropdownFixture"
      },
      {
        "anchorId": "class_sky-dropdown-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDropdownTestingModule"
          }
        ],
        "filePath": "libs/components/popovers/testing/src/legacy/dropdown/dropdown-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyDropdownTestingModule"
      },
      {
        "anchorId": "interface_sky-popovers-fixture-dropdown-item",
        "children": [
          { "kind": "interface-property", "name": "ariaRole", "type": "string" }
        ],
        "filePath": "libs/components/popovers/testing/src/legacy/dropdown/popovers-fixture-dropdown-item.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyPopoversFixtureDropdownItem"
      },
      {
        "anchorId": "interface_sky-popovers-fixture-dropdown-menu",
        "children": [
          {
            "kind": "interface-property",
            "name": "ariaLabelledBy",
            "type": "string"
          },
          { "kind": "interface-property", "name": "ariaRole", "type": "string" }
        ],
        "filePath": "libs/components/popovers/testing/src/legacy/dropdown/popovers-fixture-dropdown-menu.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyPopoversFixtureDropdownMenu"
      },
      {
        "anchorId": "interface_sky-popovers-fixture-dropdown",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttonStyle",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttonType",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "disabled",
            "type": "boolean"
          },
          { "kind": "interface-property", "name": "label", "type": "string" },
          { "kind": "interface-property", "name": "title", "type": "string" }
        ],
        "filePath": "libs/components/popovers/testing/src/legacy/dropdown/popovers-fixture-dropdown.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyPopoversFixtureDropdown"
      },
      {
        "anchorId": "class_sky-popover-fixture",
        "children": [
          {
            "description": "Triggers the blur event for the popover.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<unknown>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPopoverFixture"
          },
          {
            "description": "Returns the popover alignment if the popover is open, otherwise undefined.",
            "kind": "class-property",
            "name": "alignment",
            "type": "undefined | string"
          },
          {
            "description": "Returns the popover body element if the popover is open, otherwise undefined.",
            "kind": "class-property",
            "name": "body",
            "type": "undefined | HTMLElement"
          },
          {
            "description": "Returns the popover position if the popover is open, otherwise undefined.",
            "kind": "class-property",
            "name": "placement",
            "type": "undefined | string"
          },
          {
            "description": "Whether the popover is open and visible.",
            "kind": "class-property",
            "name": "popoverIsVisible",
            "type": "boolean"
          },
          {
            "description": "Returns the popover title text if the popover is open, otherwise undefined.",
            "kind": "class-property",
            "name": "popoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "Triggers the blur event for the popover.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<unknown>"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX popover component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/popovers/testing/src/legacy/popover/popover-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyPopoverFixture"
      },
      {
        "anchorId": "class_sky-popover-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPopoverTestingModule"
          }
        ],
        "filePath": "libs/components/popovers/testing/src/legacy/popover/popover-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyPopoverTestingModule"
      },
      {
        "anchorId": "interface_sky-dropdown-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyDropdownHarness` instances.",
        "filePath": "libs/components/popovers/testing/src/modules/dropdown/dropdown-harness.filters.ts",
        "kind": "interface",
        "name": "SkyDropdownHarnessFilters"
      },
      {
        "anchorId": "class_sky-dropdown-harness",
        "children": [
          {
            "description": "Clicks the dropdown button.",
            "kind": "class-method",
            "name": "clickDropdownButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the aria-label value.",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the dropdown button style.",
            "kind": "class-method",
            "name": "getButtonStyle",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the dropdown button type.",
            "kind": "class-method",
            "name": "getButtonType",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the dropdown menu component.",
            "kind": "class-method",
            "name": "getDropdownMenu",
            "parameters": [],
            "type": "Promise<SkyDropdownMenuHarness>"
          },
          {
            "description": "Gets the hover tooltip text.",
            "kind": "class-method",
            "name": "getTitle",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets whether the dropdown is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets whether the dropdown menu is open.",
            "kind": "class-method",
            "name": "isOpen",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDropdownHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyDropdownHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyDropdownHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDropdownHarness"
          },
          {
            "defaultValue": "'sky-dropdown'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the dropdown button.",
            "kind": "class-property",
            "name": "clickDropdownButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the aria-label value.",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the dropdown button style.",
            "kind": "class-property",
            "name": "getButtonStyle",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the dropdown button type.",
            "kind": "class-property",
            "name": "getButtonType",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the dropdown menu component.",
            "kind": "class-property",
            "name": "getDropdownMenu",
            "type": "Promise<SkyDropdownMenuHarness>"
          },
          {
            "description": "Gets the hover tooltip text.",
            "kind": "class-property",
            "name": "getTitle",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets whether the dropdown is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets whether the dropdown menu is open.",
            "kind": "class-property",
            "name": "isOpen",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDropdownHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyDropdownHarness>"
          }
        ],
        "filePath": "libs/components/popovers/testing/src/modules/dropdown/dropdown-harness.ts",
        "kind": "class",
        "name": "SkyDropdownHarness"
      },
      {
        "anchorId": "interface_sky-dropdown-item-harness-filters",
        "children": [
          {
            "description": "Only find instances whose role matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaRole",
            "type": "string"
          },
          {
            "description": "Only find instances whose text content matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "text",
            "type": "string"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of `SkyDropdownItemHarness` instances.",
        "filePath": "libs/components/popovers/testing/src/modules/dropdown/dropdown-item-harness.filters.ts",
        "kind": "interface",
        "name": "SkyDropdownItemHarnessFilters"
      },
      {
        "anchorId": "class_sky-dropdown-item-harness",
        "children": [
          {
            "description": "Clicks the dropdown item.",
            "kind": "class-method",
            "name": "click",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the dropdown item role.",
            "kind": "class-method",
            "name": "getAriaRole",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the menu item text.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAutocompleteHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyDropdownItemHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyDropdownItemHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDropdownItemHarness"
          },
          {
            "defaultValue": "'sky-dropdown-item'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the dropdown item.",
            "kind": "class-property",
            "name": "click",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the dropdown item role.",
            "kind": "class-property",
            "name": "getAriaRole",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the menu item text.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAutocompleteHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyDropdownItemHarness>"
          }
        ],
        "filePath": "libs/components/popovers/testing/src/modules/dropdown/dropdown-item-harness.ts",
        "kind": "class",
        "name": "SkyDropdownItemHarness"
      },
      {
        "anchorId": "interface_sky-dropdown-menu-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyDropdownMenuHarness` instances.",
        "filePath": "libs/components/popovers/testing/src/modules/dropdown/dropdown-menu-harness.filters.ts",
        "kind": "interface",
        "name": "SkyDropdownMenuHarnessFilters"
      },
      {
        "anchorId": "class_sky-dropdown-menu-harness",
        "children": [
          {
            "description": "Clicks out of the dropdown menu.",
            "kind": "class-method",
            "name": "clickOut",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the `aria-labelledby` value.",
            "kind": "class-method",
            "name": "getAriaLabelledBy",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the dropdown menu role.",
            "kind": "class-method",
            "name": "getAriaRole",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the first item that matches the given filters",
            "kind": "class-method",
            "name": "getItem",
            "parameters": [
              {
                "description": "filter for which menu item to return",
                "name": "filters",
                "type": "SkyDropdownItemHarnessFilters"
              }
            ],
            "type": "Promise<SkyDropdownItemHarness>"
          },
          {
            "description": "Gets an array of dropdown menu item harnesses.",
            "kind": "class-method",
            "name": "getItems",
            "parameters": [
              {
                "description": "Optional filter for which menu items to return",
                "isOptional": true,
                "name": "filters",
                "type": "SkyDropdownItemHarnessFilters"
              }
            ],
            "type": "Promise<SkyDropdownItemHarness[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDropdownMenuHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyDropdownMenuHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyDropdownMenuHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDropdownMenuHarness"
          },
          {
            "defaultValue": "'.sky-dropdown-menu'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks out of the dropdown menu.",
            "kind": "class-property",
            "name": "clickOut",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the `aria-labelledby` value.",
            "kind": "class-property",
            "name": "getAriaLabelledBy",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the dropdown menu role.",
            "kind": "class-property",
            "name": "getAriaRole",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the first item that matches the given filters",
            "kind": "class-property",
            "name": "getItem",
            "type": "Promise<SkyDropdownItemHarness>"
          },
          {
            "description": "Gets an array of dropdown menu item harnesses.",
            "kind": "class-property",
            "name": "getItems",
            "type": "Promise<SkyDropdownItemHarness[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyDropdownMenuHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyDropdownMenuHarness>"
          }
        ],
        "description": "Harness for interacting with dropdown menu in tests.",
        "filePath": "libs/components/popovers/testing/src/modules/dropdown/dropdown-menu-harness.ts",
        "kind": "class",
        "name": "SkyDropdownMenuHarness"
      },
      {
        "anchorId": "interface_sky-popover-content-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyComponentHarness` instances.",
        "filePath": "libs/components/popovers/testing/src/modules/popover/popover-content-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyPopoverContentHarnessFilters"
      },
      {
        "anchorId": "class_sky-popover-content-harness",
        "children": [
          {
            "description": "Clicks out of the popover.",
            "kind": "class-method",
            "name": "clickOut",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the alignment of the popover content.",
            "kind": "class-method",
            "name": "getAlignment",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text of the popover content body.",
            "kind": "class-method",
            "name": "getBodyText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the placement of the popover content.",
            "kind": "class-method",
            "name": "getPlacement",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text of the popover content title.",
            "kind": "class-method",
            "name": "getTitleText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPopoverContentHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyPopoverContentHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyPopoverContentHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPopoverContentHarness"
          },
          {
            "defaultValue": "'sky-popover-content'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks out of the popover.",
            "kind": "class-property",
            "name": "clickOut",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the alignment of the popover content.",
            "kind": "class-property",
            "name": "getAlignment",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text of the popover content body.",
            "kind": "class-property",
            "name": "getBodyText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the placement of the popover content.",
            "kind": "class-property",
            "name": "getPlacement",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text of the popover content title.",
            "kind": "class-property",
            "name": "getTitleText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPopoverContentHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyPopoverContentHarness>"
          }
        ],
        "description": "Harness for interacting with a popover content component in tests.",
        "filePath": "libs/components/popovers/testing/src/modules/popover/popover-content-harness.ts",
        "kind": "class",
        "name": "SkyPopoverContentHarness"
      },
      {
        "anchorId": "interface_sky-popover-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyPopoverHarness instances.",
        "filePath": "libs/components/popovers/testing/src/modules/popover/popover-harness-filters.ts",
        "kind": "interface",
        "name": "SkyPopoverHarnessFilters"
      },
      {
        "anchorId": "class_sky-popover-harness",
        "children": [
          {
            "description": "Toggles a popover open or closed.",
            "kind": "class-method",
            "name": "clickPopoverButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the popover content component.",
            "kind": "class-method",
            "name": "getPopoverContent",
            "parameters": [],
            "type": "Promise<SkyPopoverContentHarness>"
          },
          {
            "description": "Whether the popover is open.",
            "kind": "class-method",
            "name": "isOpen",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPopoverHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyPopoverHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyPopoverHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPopoverHarness"
          },
          {
            "defaultValue": "'.sky-popover-trigger'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Toggles a popover open or closed.",
            "kind": "class-property",
            "name": "clickPopoverButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the popover content component.",
            "kind": "class-property",
            "name": "getPopoverContent",
            "type": "Promise<SkyPopoverContentHarness>"
          },
          {
            "description": "Whether the popover is open.",
            "kind": "class-property",
            "name": "isOpen",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPopoverHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyPopoverHarness>"
          }
        ],
        "description": "Harness for interacting with a popover component in tests.",
        "filePath": "libs/components/popovers/testing/src/modules/popover/popover-harness.ts",
        "kind": "class",
        "name": "SkyPopoverHarness"
      }
    ],
    "@skyux/ag-grid": [
      {
        "anchorId": "class_sky-ag-grid-data-manager-adapter-directive",
        "children": [
          {
            "kind": "directive-input",
            "name": "viewId",
            "type": "undefined | string"
          }
        ],
        "filePath": "lib/modules/ag-grid/ag-grid-data-manager-adapter.directive.ts",
        "isInternal": true,
        "kind": "directive",
        "name": "SkyAgGridDataManagerAdapterDirective",
        "selector": "[skyAgGridDataManagerAdapter]"
      },
      {
        "anchorId": "class_sky-ag-grid-row-delete-component",
        "description": "Component for rendering the inline delete template in the overlay.",
        "filePath": "lib/modules/ag-grid/ag-grid-row-delete.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridRowDeleteComponent",
        "selector": "sky-ag-grid-row-delete"
      },
      {
        "anchorId": "class_sky-ag-grid-row-delete-directive",
        "children": [
          {
            "description": "The IDs of the data in the rows where the inline delete appears.",
            "kind": "directive-input",
            "name": "rowDeleteIds",
            "type": "undefined | string[]"
          },
          {
            "description": "Emits a `SkyAgGridRowDeleteCancelArgs` object when a row's inline delete is cancelled.",
            "kind": "directive-output",
            "name": "rowDeleteCancel",
            "type": "EventEmitter<SkyAgGridRowDeleteCancelArgs>"
          },
          {
            "description": "Emits a `SkyAgGridRowDeleteConfirmArgs` object when a row's inline delete is confirmed.",
            "kind": "directive-output",
            "name": "rowDeleteConfirm",
            "type": "EventEmitter<SkyAgGridRowDeleteConfirmArgs>"
          },
          {
            "description": "Emits when the list of ids of the data in the rows where inline deletes are shown changes.",
            "kind": "directive-output",
            "name": "rowDeleteIdsChange",
            "type": "EventEmitter<string[]>"
          }
        ],
        "filePath": "lib/modules/ag-grid/ag-grid-row-delete.directive.ts",
        "kind": "directive",
        "name": "SkyAgGridRowDeleteDirective",
        "selector": "[skyAgGridRowDelete]"
      },
      {
        "anchorId": "class_sky-ag-grid-wrapper-component",
        "children": [
          {
            "description": "Enable a compact layout for the grid when using modern theme. Compact layout uses a smaller font size and row height to display more data in a smaller space.",
            "kind": "directive-input",
            "name": "compact",
            "type": "void"
          }
        ],
        "filePath": "lib/modules/ag-grid/ag-grid-wrapper.component.ts",
        "kind": "component",
        "name": "SkyAgGridWrapperComponent",
        "selector": "sky-ag-grid-wrapper"
      },
      {
        "anchorId": "class_sky-ag-grid-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAgGridModule"
          }
        ],
        "filePath": "lib/modules/ag-grid/ag-grid.module.ts",
        "kind": "module",
        "name": "SkyAgGridModule"
      },
      {
        "anchorId": "class_sky-ag-grid-service",
        "children": [
          {
            "description": "Returns [AG Grid `gridOptions`](https://www.ag-grid.com/javascript-grid-properties/) with default SKY UX options, styling, and cell editors registered for editable grids.",
            "kind": "class-method",
            "name": "getEditableGridOptions",
            "parameters": [{ "name": "args", "type": "SkyGetGridOptionsArgs" }],
            "type": "GridOptions<any>"
          },
          {
            "description": "Returns [AG Grid `gridOptions`](https://www.ag-grid.com/javascript-grid-properties/) with default SKY UX options, styling, and cell renderers registered for read-only grids.",
            "kind": "class-method",
            "name": "getGridOptions",
            "parameters": [{ "name": "args", "type": "SkyGetGridOptionsArgs" }],
            "type": "GridOptions<any>"
          },
          {
            "deprecationReason": "The `getHeaderHeight` method is no longer needed. Header height is managed in CSS.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getHeaderHeight",
            "parameters": [],
            "type": "number"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAgGridService"
          },
          {
            "description": "Returns [AG Grid `gridOptions`](https://www.ag-grid.com/javascript-grid-properties/) with default SKY UX options, styling, and cell editors registered for editable grids.",
            "kind": "class-property",
            "name": "getEditableGridOptions",
            "type": "GridOptions<any>"
          },
          {
            "description": "Returns [AG Grid `gridOptions`](https://www.ag-grid.com/javascript-grid-properties/) with default SKY UX options, styling, and cell renderers registered for read-only grids.",
            "kind": "class-property",
            "name": "getGridOptions",
            "type": "GridOptions<any>"
          },
          {
            "deprecationReason": "The `getHeaderHeight` method is no longer needed. Header height is managed in CSS.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getHeaderHeight",
            "type": "number"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          }
        ],
        "description": "`SkyAgGridService` provides methods to get AG Grid `gridOptions` to ensure grids match SKY UX functionality. The `gridOptions` can be overridden, and include registered SKY UX column types.",
        "filePath": "lib/modules/ag-grid/ag-grid.service.ts",
        "kind": "service",
        "name": "SkyAgGridService"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-editor-autocomplete-component",
        "filePath": "lib/modules/ag-grid/cell-editors/cell-editor-autocomplete/cell-editor-autocomplete.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellEditorAutocompleteComponent",
        "selector": "sky-ag-grid-cell-editor-autocomplete"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-editor-currency-component",
        "filePath": "lib/modules/ag-grid/cell-editors/cell-editor-currency/cell-editor-currency.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellEditorCurrencyComponent",
        "selector": "sky-ag-grid-cell-editor-currency"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-editor-datepicker-component",
        "filePath": "lib/modules/ag-grid/cell-editors/cell-editor-datepicker/cell-editor-datepicker.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellEditorDatepickerComponent",
        "selector": "sky-ag-grid-cell-editor-datepicker"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-editor-lookup-component",
        "filePath": "lib/modules/ag-grid/cell-editors/cell-editor-lookup/cell-editor-lookup.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellEditorLookupComponent",
        "selector": "sky-ag-grid-cell-editor-lookup"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-editor-number-component",
        "filePath": "lib/modules/ag-grid/cell-editors/cell-editor-number/cell-editor-number.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellEditorNumberComponent",
        "selector": "sky-ag-grid-cell-editor-number"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-editor-text-component",
        "filePath": "lib/modules/ag-grid/cell-editors/cell-editor-text/cell-editor-text.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellEditorTextComponent",
        "selector": "sky-ag-grid-cell-editor-text"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-renderer-currency-validator-component",
        "children": [
          { "kind": "directive-input", "name": "parameters", "type": "void" }
        ],
        "filePath": "lib/modules/ag-grid/cell-renderers/cell-renderer-currency/cell-renderer-currency-validator.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellRendererCurrencyValidatorComponent",
        "selector": "sky-ag-grid-cell-renderer-currency-validator"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-renderer-currency-component",
        "children": [
          { "kind": "directive-input", "name": "params", "type": "void" }
        ],
        "filePath": "lib/modules/ag-grid/cell-renderers/cell-renderer-currency/cell-renderer-currency.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellRendererCurrencyComponent",
        "selector": "sky-ag-grid-cell-renderer-currency"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-renderer-lookup-component",
        "filePath": "lib/modules/ag-grid/cell-renderers/cell-renderer-lookup/cell-renderer-lookup.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellRendererLookupComponent",
        "selector": "sky-cell-renderer-lookup"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-renderer-row-selector-component",
        "filePath": "lib/modules/ag-grid/cell-renderers/cell-renderer-row-selector/cell-renderer-row-selector.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellRendererRowSelectorComponent",
        "selector": "sky-ag-grid-cell-renderer-row-selector"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-renderer-validator-tooltip-component",
        "children": [
          { "kind": "directive-input", "name": "params", "type": "void" }
        ],
        "filePath": "lib/modules/ag-grid/cell-renderers/cell-renderer-validator-tooltip/cell-renderer-validator-tooltip.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellRendererValidatorTooltipComponent",
        "selector": "sky-ag-grid-cell-renderer-validator-tooltip"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-validator-tooltip-component",
        "children": [
          { "kind": "directive-input", "name": "params", "type": "void" }
        ],
        "filePath": "lib/modules/ag-grid/cell-validator/ag-grid-cell-validator-tooltip.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridCellValidatorTooltipComponent",
        "selector": "sky-ag-grid-cell-validator-tooltip"
      },
      {
        "anchorId": "class_sky-ag-grid-header-group-component",
        "filePath": "lib/modules/ag-grid/header/header-group.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridHeaderGroupComponent",
        "selector": "sky-header-group"
      },
      {
        "anchorId": "class_sky-ag-grid-header-component",
        "filePath": "lib/modules/ag-grid/header/header.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyAgGridHeaderComponent",
        "selector": "sky-ag-grid-header"
      },
      {
        "anchorId": "interface_sky-ag-grid-row-delete-cancel-args",
        "children": [
          {
            "description": "The id of the data in the row whose deletion has been cancelled.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          }
        ],
        "description": "Information regarding a row whose deletion has been cancelled.",
        "filePath": "lib/modules/ag-grid/types/ag-grid-row-delete-cancel-args.ts",
        "kind": "interface",
        "name": "SkyAgGridRowDeleteCancelArgs"
      },
      {
        "anchorId": "interface_sky-ag-grid-row-delete-confirm-args",
        "children": [
          {
            "description": "The id of the data in the row whose deletion has been confirmed.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          }
        ],
        "description": "Information regarding a row whose deletion has been confirmed.",
        "filePath": "lib/modules/ag-grid/types/ag-grid-row-delete-confirm-args.ts",
        "kind": "interface",
        "name": "SkyAgGridRowDeleteConfirmArgs"
      },
      {
        "anchorId": "interface_sky-ag-grid-autocomplete-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "unknown[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "debounceTime",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "descriptorProperty",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "propertiesToSearch",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "search",
            "type": "Function"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchFilters",
            "type": "Function[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchResultsLimit",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchResultTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchTextMinimumCharacters",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectionChange",
            "type": "Function"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/autocomplete-properties.ts",
        "kind": "interface",
        "name": "SkyAgGridAutocompleteProperties"
      },
      {
        "anchorId": "interface_sky-autocomplete-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "unknown[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "debounceTime",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "descriptorProperty",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "propertiesToSearch",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "search",
            "type": "Function"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchFilters",
            "type": "Function[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchResultsLimit",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchResultTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchTextMinimumCharacters",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectionChange",
            "type": "Function"
          }
        ],
        "deprecationReason": "Use SkyAgGridAutocompleteProperties instead.",
        "filePath": "lib/modules/ag-grid/types/autocomplete-properties.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyAutocompleteProperties"
      },
      {
        "anchorId": "enum_sky-cell-class",
        "filePath": "lib/modules/ag-grid/types/cell-class.ts",
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "kind": "enum-member",
            "name": "Autocomplete",
            "type": "\"sky-ag-grid-cell-autocomplete\""
          },
          {
            "kind": "enum-member",
            "name": "Currency",
            "type": "\"sky-ag-grid-cell-currency\""
          },
          {
            "kind": "enum-member",
            "name": "Date",
            "type": "\"sky-ag-grid-cell-date\""
          },
          {
            "kind": "enum-member",
            "name": "Editable",
            "type": "\"sky-ag-grid-cell-editable\""
          },
          {
            "kind": "enum-member",
            "name": "Invalid",
            "type": "\"sky-ag-grid-cell-invalid\""
          },
          {
            "kind": "enum-member",
            "name": "Lookup",
            "type": "\"sky-ag-grid-cell-lookup\""
          },
          {
            "kind": "enum-member",
            "name": "Number",
            "type": "\"sky-ag-grid-cell-number\""
          },
          {
            "kind": "enum-member",
            "name": "RightAligned",
            "type": "\"sky-ag-grid-cell-right-aligned\""
          },
          {
            "kind": "enum-member",
            "name": "RowSelector",
            "type": "\"sky-ag-grid-cell-row-selector\""
          },
          {
            "kind": "enum-member",
            "name": "Template",
            "type": "\"sky-ag-grid-cell-template\""
          },
          {
            "kind": "enum-member",
            "name": "Text",
            "type": "\"sky-ag-grid-cell-text\""
          },
          {
            "kind": "enum-member",
            "name": "Uneditable",
            "type": "\"sky-ag-grid-cell-uneditable\""
          }
        ],
        "name": "SkyCellClass"
      },
      {
        "anchorId": "enum_sky-ag-grid-cell-editor-initial-action",
        "description": "The initial action that a cell editor should take when initialized.",
        "filePath": "lib/modules/ag-grid/types/cell-editor-initial-action.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "The cell should be cleared.",
            "kind": "enum-member",
            "name": "Delete",
            "type": "0"
          },
          {
            "description": "The cell value should be highlighted.",
            "kind": "enum-member",
            "name": "Highlighted",
            "type": "1"
          },
          {
            "description": "The cell value should be replaced with the initializing value.",
            "kind": "enum-member",
            "name": "Replace",
            "type": "2"
          },
          {
            "description": "The cell should not be modified and the cursor is placed at the end of the value.",
            "kind": "enum-member",
            "name": "Untouched",
            "type": "3"
          }
        ],
        "name": "SkyAgGridCellEditorInitialAction"
      },
      {
        "anchorId": "class_sky-ag-grid-cell-editor-utils",
        "children": [
          {
            "description": "Gets the initial action that a cell editor should take when initialized.",
            "isStatic": true,
            "kind": "class-method",
            "name": "getEditorInitialAction",
            "parameters": [
              {
                "description": "The editor's initializing parameters.",
                "name": "params",
                "type": "undefined | ICellEditorParams<any, any, any>"
              }
            ],
            "type": "SkyAgGridCellEditorInitialAction"
          },
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "subtractOrZero",
            "parameters": [
              { "name": "minuend", "type": "undefined | null | number" },
              { "name": "subtrahend", "type": "number" }
            ],
            "type": "number"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAgGridCellEditorUtils"
          },
          {
            "description": "Gets the initial action that a cell editor should take when initialized.",
            "isStatic": true,
            "kind": "class-property",
            "name": "getEditorInitialAction",
            "type": "SkyAgGridCellEditorInitialAction"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "subtractOrZero",
            "type": "number"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/cell-editor-utils.ts",
        "kind": "class",
        "name": "SkyAgGridCellEditorUtils"
      },
      {
        "anchorId": "enum_sky-cell-type",
        "description": "These column types can be used by setting the AG Grid [column definition `type`](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-editing) to one of the following values. <br/> Any [SKY UX component](https://developer.blackbaud.com/skyux/components) can be made into a [cell editor](https://www.ag-grid.com/javascript-grid-cell-editor/) or [cell renderer](https://www.ag-grid.com/javascript-grid-cell-rendering-components/) component. If you would like to use a component that does not have a column definition yet, please consider [contributing it](https://developer.blackbaud.com/skyux/contribute/contribution-process) to the SKY UX data entry grid module, or [file an issue](https://developer.blackbaud.com/skyux/contribute/contribution-process/file-issue) in the [`@skyux/ag-grid` repo](https://github.com/blackbaud/skyux-ag-grid).",
        "filePath": "lib/modules/ag-grid/types/cell-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "**Edit mode** <br/> Cells in the column will be edited as  [SKY UX autocomplete components](https://developer.blackbaud.com/skyux/components/autocomplete). You can set any of the autocomplete component's properties by passing `SkyCellEditorAutocompleteParams` in the [column definition's `cellEditorParams` property](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-editing). These params can be updated as other cell edits are made or [provided dynamically](https://www.ag-grid.com/javascript-grid-cell-editing/#dynamic-parameters) based on other cell values. See the demo for an example. Text can be entered and a value selected from the provided list. <br/><br/> **Read-only mode** <br/> Cells the column will display the currently selected value's name property by default. If the autocomplete needs to show a different property or needs to be formatted in any way, you can [define a `valueFormatter`](https://www.ag-grid.com/javascript-grid-value-formatters/) on the column definition.",
            "kind": "enum-member",
            "name": "Autocomplete",
            "type": "\"skyCellAutocomplete\""
          },
          {
            "description": "**Edit mode** <br/> Cells in the column will be edited as a currency amount. <br/><br/> **Read-only mode** <br/> Formats the display as currency using [SKY UX numeric components](https://developer.blackbaud.com/skyux/components/numeric).",
            "kind": "enum-member",
            "name": "Currency",
            "type": "\"skyCellCurrency\""
          },
          {
            "description": "**Edit and read-only modes** <br/> Combines SkyCellType.Currency and SkyCellType.Validator, where the value is displayed as a currency and passed to a validator function.",
            "kind": "enum-member",
            "name": "CurrencyValidator",
            "type": "\"skyCellCurrencyValidator\""
          },
          {
            "description": "**Edit mode** <br/> Cells in the column will be edited as [SKY UX datepicker components](https://developer.blackbaud.com/skyux/components/datepicker). You can set any of the datepicker component's properties by passing `SkyCellEditorDatepickerParams` in the [column definition's `cellEditorParams` property](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-editing). These params can be updated as other cell edits are made or [provided dynamically](https://www.ag-grid.com/javascript-grid-cell-editing/#dynamic-parameters) based on other cell values. See the demo for an example. Date values can be entered. <br/><br/> **Read-only mode** <br/> Cells in the column will display the currently selected date formatted as `MM-DD-YYYY`, or the date format of the locale passed to `getGridOptions()`. If you would like to overwrite this format, you can [define a `valueFormatter`](https://www.ag-grid.com/javascript-grid-value-formatters/) on the column definition. See the demo for an example.",
            "kind": "enum-member",
            "name": "Date",
            "type": "\"skyCellDate\""
          },
          {
            "description": "**Edit mode** <br/> Cells in the column will be edited as [SKY UX lookup components](https://developer.blackbaud.com/skyux-v5/components/lookup). You can set any of the lookup component's properties by passing `SkyCellEditorLookupParams` in the [column definition's `cellEditorParams` property](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-editing). These params can be updated as other cell edits are made or [provided dynamically](https://www.ag-grid.com/javascript-grid-cell-editing/#dynamic-parameters) based on other cell values. See the demo for an example. Text can be entered and a value selected from the provided list. <br/><br/> **Read-only mode** <br/> Cells the column will display, by default, either: the name(s) of the selected value(s) if there are less than 6, or a summary count of the values if there are more than 5. If the lookup needs to show a different property or needs to be formatted in any way, you can [define a `valueFormatter`](https://www.ag-grid.com/javascript-grid-value-formatters/) on the column definition.",
            "kind": "enum-member",
            "name": "Lookup",
            "type": "\"skyCellLookup\""
          },
          {
            "description": "**Edit mode** <br/> Cells in the column will be edited as HTML number `inputs`. Only numbers can be entered. <br/><br/> **Read-only mode** <br/> Cells in the column will render as the number value.",
            "kind": "enum-member",
            "name": "Number",
            "type": "\"skyCellNumber\""
          },
          {
            "description": "**Edit and read-only modes** <br/> Combines SkyCellType.Number and SkyCellType.Validator, where the value is displayed as a number and passed to a validator function.",
            "kind": "enum-member",
            "name": "NumberValidator",
            "type": "\"skyCellNumberValidator\""
          },
          {
            "description": "**Edit and read-only modes** <br/> The header and cells in the column will render right aligned.",
            "kind": "enum-member",
            "name": "RightAligned",
            "type": "\"skyCellRightAligned\""
          },
          {
            "description": "**Edit and read-only modes** <br/> Cells in the column will render as [SKY UX checkbox components](https://developer.blackbaud.com/skyux/components/checkbox). It allows the user to select multiple rows, and adds a highlight to selected rows. The [Ag Grid `rowNode`](https://www.ag-grid.com/javascript-grid-row-node/) will be updated to reflect the selected state.",
            "kind": "enum-member",
            "name": "RowSelector",
            "type": "\"skyCellRowSelector\""
          },
          {
            "description": "**Read-only mode** <br/> Cells in the column will render in a `TemplateRef` passed in the column definition's `cellRendererParams.template` property, with `value` and `row` context. See the demo for an example.",
            "kind": "enum-member",
            "name": "Template",
            "type": "\"skyCellTemplate\""
          },
          {
            "description": "**Edit mode** <br/> Cells in the column will be edited as HTML text `inputs`. Any characters can be entered. <br/><br/> **Read-only mode** <br/> Cells in the column will render as their string value.",
            "kind": "enum-member",
            "name": "Text",
            "type": "\"skyCellText\""
          },
          {
            "description": "**Edit and read-only modes** <br/> Cells in the column will be passed to a validator function that flags erroneous entries. You can set the validator function and message by passing them to [column definition's `cellRendererParams` property](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-editing) as `skyComponentProperties.validator` and `skyComponentProperties.validatorMessage`. SkyCellType.Validator can be combined with other cell types, such as SkyCellType.Autocomplete or SkyCellType.Date, by using the array syntax for the [column definition's `type` property](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-editing).",
            "kind": "enum-member",
            "name": "Validator",
            "type": "\"skyCellValidator\""
          }
        ],
        "name": "SkyCellType"
      },
      {
        "anchorId": "interface_sky-ag-grid-currency-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "currencySymbol",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "decimalPlaces",
            "type": "string | number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "negativeBracketsTypeOnBlur",
            "type": "null | \"(,)\" | \"[,]\" | \"<,>\" | \"{,}\" | \"〈,〉\" | \"｢,｣\" | \"⸤,⸥\" | \"⟦,⟧\" | \"‹,›\" | \"«,»\""
          }
        ],
        "filePath": "lib/modules/ag-grid/types/currency-properties.ts",
        "kind": "interface",
        "name": "SkyAgGridCurrencyProperties"
      },
      {
        "anchorId": "interface_sky-ag-grid-datepicker-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "dateFormat",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "maxDate",
            "type": "Date"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "minDate",
            "type": "Date"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "skyDatepickerNoValidate",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "startingDay",
            "type": "number"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/datepicker-properties.ts",
        "kind": "interface",
        "name": "SkyAgGridDatepickerProperties"
      },
      {
        "anchorId": "interface_sky-datepicker-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "dateFormat",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "maxDate",
            "type": "Date"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "minDate",
            "type": "Date"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "skyDatepickerNoValidate",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "startingDay",
            "type": "number"
          }
        ],
        "deprecationReason": "Use SkyAgGridDatepickerProperties instead.",
        "filePath": "lib/modules/ag-grid/types/datepicker-properties.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyDatepickerProperties"
      },
      {
        "anchorId": "enum_sky-header-class",
        "filePath": "lib/modules/ag-grid/types/header-class.ts",
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "kind": "enum-member",
            "name": "Resizable",
            "type": "\"sky-ag-grid-header-resizable\""
          },
          {
            "kind": "enum-member",
            "name": "RightAligned",
            "type": "\"sky-ag-grid-header-right-aligned\""
          }
        ],
        "name": "SkyHeaderClass"
      },
      {
        "anchorId": "class_sky-ag-grid-header-group-info",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAgGridHeaderGroupInfo"
          },
          {
            "description": "[Column group information from AG Grid](https://www.ag-grid.com/angular-data-grid/column-object-group/).",
            "kind": "class-property",
            "name": "columnGroup",
            "type": "undefined | ColumnGroup<any>"
          },
          {
            "description": "AG Grid's [`context` field](https://www.ag-grid.com/angular-data-grid/context/).",
            "kind": "class-property",
            "name": "context",
            "type": "any"
          },
          {
            "description": "Display name of the column group.",
            "kind": "class-property",
            "name": "displayName",
            "type": "undefined | string"
          }
        ],
        "description": "To display a help button beside the column group header, create a component containing [`sky-help-inline`](https://developer.blackbaud.com/skyux/components/help-inline), and inject SkyAgGridHeaderGroupInfo to access the column group information, such as display name. Add the component to the `headerGroupComponentParams.inlineHelpComponent` property of the [column group definition](https://www.ag-grid.com/angular-data-grid/column-groups/).",
        "filePath": "lib/modules/ag-grid/types/header-group-info.ts",
        "kind": "service",
        "name": "SkyAgGridHeaderGroupInfo"
      },
      {
        "anchorId": "interface_sky-ag-grid-header-group-params",
        "children": [
          {
            "description": "The component to display as inline help beside the column group header.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "inlineHelpComponent",
            "type": "Type<unknown>"
          }
        ],
        "description": "Interface to use for the [`headerGroupComponentParams`](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-groupsHeader-headerGroupComponentParams) property on `ColGroupDef`.",
        "filePath": "lib/modules/ag-grid/types/header-group-params.ts",
        "kind": "interface",
        "name": "SkyAgGridHeaderGroupParams"
      },
      {
        "anchorId": "class_sky-ag-grid-header-info",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAgGridHeaderInfo"
          },
          {
            "description": "[Column information from AG Grid](https://www.ag-grid.com/angular-data-grid/column-object/).",
            "kind": "class-property",
            "name": "column",
            "type": "undefined | Column<any>"
          },
          {
            "description": "AG Grid's [`context` field](https://www.ag-grid.com/angular-data-grid/context/).",
            "kind": "class-property",
            "name": "context",
            "type": "any"
          },
          {
            "description": "Display name of the column.",
            "kind": "class-property",
            "name": "displayName",
            "type": "undefined | string"
          }
        ],
        "description": "To display a help button beside the column header, create a component containing [`sky-help-inline`](https://developer.blackbaud.com/skyux/components/help-inline), and inject SkyAgGridHeaderInfo to access the column information, such as display name. Add the component to the `headerComponentParams.inlineHelpComponent` property of the [column definition](https://www.ag-grid.com/angular-data-grid/column-definitions/).",
        "filePath": "lib/modules/ag-grid/types/header-info.ts",
        "kind": "service",
        "name": "SkyAgGridHeaderInfo"
      },
      {
        "anchorId": "interface_sky-ag-grid-header-params",
        "children": [
          {
            "description": "Hides the column header text. Each column should have a `headerName` defined in the column definition for accessibility. This option allows that text to be hidden from view while still being available to screen readers.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "headerHidden",
            "type": "boolean"
          },
          {
            "description": "The component to display as inline help beside the column header.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "inlineHelpComponent",
            "type": "Type<unknown>"
          }
        ],
        "description": "Interface to use for the [`headerComponentParams`](https://www.ag-grid.com/angular-data-grid/column-properties/#reference-header-headerComponentParams) property on `ColDef`.",
        "filePath": "lib/modules/ag-grid/types/header-params.ts",
        "kind": "interface",
        "name": "SkyAgGridHeaderParams"
      },
      {
        "anchorId": "interface_sky-ag-grid-lookup-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "addClick",
            "type": "Function"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaLabel",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaLabelledBy",
            "type": "string"
          },
          {
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "autocompleteAttribute",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "unknown[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "debounceTime",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "descriptorProperty",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "enableShowMore",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "idProperty",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "placeholderText",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "propertiesToSearch",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "search",
            "type": "SkyAutocompleteSearchFunction"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchAsync",
            "type": "Function"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchFilters",
            "type": "SkyAutocompleteSearchFunctionFilter[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchResultsLimit",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchResultTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchTextMinimumCharacters",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectMode",
            "type": "SkyLookupSelectModeType"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "showAddButton",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "showMoreConfig",
            "type": "SkyLookupShowMoreConfig"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "wrapperClass",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/lookup-properties.ts",
        "kind": "interface",
        "name": "SkyAgGridLookupProperties"
      },
      {
        "anchorId": "interface_sky-ag-grid-number-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "max",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "min",
            "type": "number"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/number-properties.ts",
        "kind": "interface",
        "name": "SkyAgGridNumberProperties"
      },
      {
        "anchorId": "interface_sky-get-grid-options-args",
        "children": [
          {
            "description": "The format to use for formatting date strings in the `SkyCellType.Date` column.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "dateFormat",
            "type": "string"
          },
          {
            "description": "The [AG Grid `gridOptions`](https://www.ag-grid.com/javascript-grid-properties/) that override default SKY UX `gridOptions`. SKY UX column types for components and column `cellClassRules` enforce required cell styling and cannot be overridden.",
            "kind": "interface-property",
            "name": "gridOptions",
            "type": "GridOptions<any>"
          },
          {
            "description": "The locale for location-specific formatting, such as date values for the `SkyCellType.Date` column.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "locale",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/sky-grid-options.ts",
        "kind": "interface",
        "name": "SkyGetGridOptionsArgs"
      },
      {
        "anchorId": "interface_sky-ag-grid-text-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "maxlength",
            "type": "number"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/text-properties.ts",
        "kind": "interface",
        "name": "SkyAgGridTextProperties"
      },
      {
        "anchorId": "interface_sky-ag-grid-validator-properties",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "validator",
            "type": "Function"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "validatorMessage",
            "type": "string | Function"
          }
        ],
        "filePath": "lib/modules/ag-grid/types/validator-properties.ts",
        "kind": "interface",
        "name": "SkyAgGridValidatorProperties"
      }
    ],
    "@skyux/assets": [
      {
        "anchorId": "class_sky-app-assets-service",
        "children": [
          {
            "kind": "class-method",
            "name": "getAllUrls",
            "parameters": [],
            "type": "Record<string, any>"
          },
          {
            "kind": "class-method",
            "name": "getUrl",
            "parameters": [{ "name": "path", "type": "string" }],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppAssetsService"
          },
          {
            "kind": "class-property",
            "name": "getAllUrls",
            "type": "Record<string, any>"
          },
          { "kind": "class-property", "name": "getUrl", "type": "string" }
        ],
        "description": "An abstract class for injecting the ability to retrieve an asset file's URL at runtime. The implementing class will be generated during build time.",
        "filePath": "lib/assets.service.ts",
        "kind": "class",
        "name": "SkyAppAssetsService"
      }
    ],
    "@skyux/avatar": [
      {
        "anchorId": "type-alias_sky-avatar-size",
        "filePath": "libs/components/avatar/src/lib/modules/avatar/avatar-size.ts",
        "kind": "type-alias",
        "name": "SkyAvatarSize",
        "type": "\"large\" | \"medium\" | \"small\""
      },
      {
        "anchorId": "type-alias_sky-avatar-src",
        "filePath": "libs/components/avatar/src/lib/modules/avatar/avatar-src.ts",
        "kind": "type-alias",
        "name": "SkyAvatarSrc",
        "type": "string | Blob | File"
      },
      {
        "anchorId": "class_sky-avatar-component",
        "children": [
          {
            "description": "The maximum file size for the image in bytes.",
            "defaultValue": "512000 bytes",
            "kind": "directive-input",
            "name": "maxFileSize",
            "type": "undefined | number"
          },
          {
            "description": "The size of the avatar. Acceptable values are: `\"small\"`, `\"medium\"`, and `\"large\"`.",
            "defaultValue": "\"large\"",
            "kind": "directive-input",
            "name": "size",
            "type": "undefined | SkyAvatarSize"
          },
          {
            "description": "Whether users can change the image. To select a different image, users click the image or drag another image on top of it, much like the `sky-file-drop` component in the [file attachment module](https://developer.blackbaud.com/skyux/components/file-attachments/file-attachment).",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "canChange",
            "type": "boolean"
          },
          {
            "description": "The name of the record that the avatar represents. If the `src` property does not specify an image, the component displays initials from the first and last words in the name. To ensure that the component extracts the correct initials, specify a name with no prefix or suffix, or just specify initials with a space between them. This property is not required, but the component requires either the `name` or `src` property.",
            "kind": "directive-input",
            "name": "name",
            "type": "undefined | string"
          },
          {
            "description": "The image to identify a record. This property is not required, but the component requires either the `name` or `src` property.",
            "kind": "directive-input",
            "name": "src",
            "type": "undefined | SkyAvatarSrc"
          },
          {
            "description": "Emits a `SkyFileItem` object when the image is updated.",
            "kind": "directive-output",
            "name": "avatarChanged",
            "type": "EventEmitter<SkyFileItem>"
          }
        ],
        "filePath": "libs/components/avatar/src/lib/modules/avatar/avatar.component.ts",
        "kind": "component",
        "name": "SkyAvatarComponent",
        "selector": "sky-avatar"
      },
      {
        "anchorId": "class_sky-avatar-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAvatarModule"
          }
        ],
        "filePath": "libs/components/avatar/src/lib/modules/avatar/avatar.module.ts",
        "kind": "module",
        "name": "SkyAvatarModule"
      }
    ],
    "@skyux/avatar/testing": [
      {
        "anchorId": "class_sky-avatar-fixture",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAvatarFixture"
          },
          {
            "description": "The avatar's current image URL.",
            "kind": "class-property",
            "name": "imageUrl",
            "type": "undefined | string"
          },
          {
            "description": "The initials displayed when no image URL is specified.",
            "kind": "class-property",
            "name": "initials",
            "type": "undefined | string"
          }
        ],
        "deprecationReason": "Use `SkyAvatarHarness` instead.",
        "description": "Allows interaction with a SKY UX avatar component.",
        "filePath": "libs/components/avatar/testing/src/legacy/avatar-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyAvatarFixture"
      },
      {
        "anchorId": "class_sky-avatar-harness",
        "children": [
          {
            "description": "Closes the currently displayed error.",
            "kind": "class-method",
            "name": "closeError",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Simulates the user selecting or dropping an image onto the component.",
            "kind": "class-method",
            "name": "dropAvatarFile",
            "parameters": [
              { "name": "file", "type": "File" },
              { "isOptional": true, "name": "waitForChange", "type": "boolean" }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets whether users can change the image.",
            "kind": "class-method",
            "name": "getCanChange",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the initials displayed when no image URL is specified.",
            "kind": "class-method",
            "name": "getInitials",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the avatar's current image URL or Blob.",
            "kind": "class-method",
            "name": "getSrc",
            "parameters": [],
            "type": "Promise<undefined | string | Blob>"
          },
          {
            "description": "Gets whether an error indicating an invalid file type is displayed.",
            "kind": "class-method",
            "name": "hasFileTypeError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets whether an error indicating an invalid file size is displayed.",
            "kind": "class-method",
            "name": "hasMaxSizeError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAvatarHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyAvatarHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyAvatarHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAvatarHarness"
          },
          {
            "defaultValue": "'sky-avatar'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Closes the currently displayed error.",
            "kind": "class-property",
            "name": "closeError",
            "type": "Promise<void>"
          },
          {
            "description": "Simulates the user selecting or dropping an image onto the component.",
            "kind": "class-property",
            "name": "dropAvatarFile",
            "type": "Promise<void>"
          },
          {
            "description": "Gets whether users can change the image.",
            "kind": "class-property",
            "name": "getCanChange",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the initials displayed when no image URL is specified.",
            "kind": "class-property",
            "name": "getInitials",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the avatar's current image URL or Blob.",
            "kind": "class-property",
            "name": "getSrc",
            "type": "Promise<undefined | string | Blob>"
          },
          {
            "description": "Gets whether an error indicating an invalid file type is displayed.",
            "kind": "class-property",
            "name": "hasFileTypeError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets whether an error indicating an invalid file size is displayed.",
            "kind": "class-property",
            "name": "hasMaxSizeError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAvatarHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyAvatarHarness>"
          }
        ],
        "description": "Harness for interacting with an avatar component in tests.",
        "filePath": "libs/components/avatar/testing/src/modules/avatar/avatar-harness.ts",
        "kind": "class",
        "name": "SkyAvatarHarness"
      }
    ],
    "@skyux/config": [
      {
        "anchorId": "class_sky-app-config-host",
        "children": [
          {
            "kind": "class-method",
            "name": "init",
            "parameters": [
              {
                "isOptional": true,
                "name": "config",
                "type": "SkyuxConfigHost"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppConfigHost"
          },
          {
            "kind": "class-property",
            "name": "host",
            "type": "SkyuxConfigHost"
          },
          { "kind": "class-property", "name": "init", "type": "void" }
        ],
        "deprecationReason": "Use `SkyAppConfig.skyux.host` instead.",
        "description": "Host configuration for components and applications.",
        "filePath": "lib/app-config-host.ts",
        "isDeprecated": true,
        "kind": "service",
        "name": "SkyAppConfigHost"
      },
      {
        "anchorId": "interface_sky-app-config-module-for-root-args",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "host",
            "type": "SkyuxConfigHost"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "params",
            "type": "SkyuxConfigParams"
          }
        ],
        "filePath": "lib/app-config-module-for-root-args.ts",
        "kind": "interface",
        "name": "SkyAppConfigModuleForRootArgs"
      },
      {
        "anchorId": "class_sky-app-config-params",
        "children": [
          {
            "kind": "class-method",
            "name": "init",
            "parameters": [
              {
                "isOptional": true,
                "name": "params",
                "type": "SkyuxConfigParams"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppConfigParams"
          },
          {
            "kind": "class-property",
            "name": "params",
            "type": "SkyuxConfigParams"
          },
          { "kind": "class-property", "name": "init", "type": "void" }
        ],
        "deprecationReason": "Use `SkyAppConfig.skyux.params` instead.",
        "filePath": "lib/app-config-params.ts",
        "isDeprecated": true,
        "kind": "service",
        "name": "SkyAppConfigParams"
      },
      {
        "anchorId": "class_sky-app-config-module",
        "children": [
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "forRoot",
            "parameters": [
              {
                "defaultValue": "{}",
                "name": "config",
                "type": "SkyAppConfigModuleForRootArgs"
              }
            ],
            "type": "ModuleWithProviders<SkyAppConfigModule>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppConfigModule"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "forRoot",
            "type": "ModuleWithProviders<SkyAppConfigModule>"
          }
        ],
        "deprecationReason": "Provide `SkyAppConfig` at the root instead.",
        "filePath": "lib/app-config.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyAppConfigModule"
      },
      {
        "anchorId": "type-alias_skyux-config-params",
        "description": "The list of parameters that are allowed at runtime.",
        "filePath": "lib/config-params.ts",
        "kind": "type-alias",
        "name": "SkyuxConfigParams",
        "type": "Record<string, boolean | Object>"
      },
      {
        "anchorId": "interface_skyux-config-remote-container-reference",
        "children": [
          {
            "description": "The version of the referenced SPA's remote container.",
            "kind": "interface-property",
            "name": "containerVersion",
            "type": "number"
          },
          {
            "description": "A collection of paths to the referenced remote modules.",
            "kind": "interface-property",
            "name": "modules",
            "type": "string[]"
          }
        ],
        "description": "Information about a referenced remote container.",
        "filePath": "lib/config-remote-container-reference.ts",
        "kind": "interface",
        "name": "SkyuxConfigRemoteContainerReference"
      },
      {
        "anchorId": "interface_skyux-config-remote-modules",
        "children": [
          {
            "description": "Whether this application can load remote modules without validating them against the list of `referenced` modules. Disabling this validation could lead to unpredictable behavior and should not be used in most cases.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "allowDynamicLoading",
            "type": "boolean"
          },
          {
            "description": "A collection of remote modules keyed by the remote container name.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "referenced",
            "type": "Record<string, SkyuxConfigRemoteContainerReference>"
          }
        ],
        "description": "Information about remote modules referenced by this application.",
        "filePath": "lib/config-remote-modules.ts",
        "kind": "interface",
        "name": "SkyuxConfigRemoteModules"
      },
      {
        "anchorId": "class_sky-app-config",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppConfig"
          },
          {
            "kind": "class-property",
            "name": "runtime",
            "type": "RuntimeConfig"
          },
          { "kind": "class-property", "name": "skyux", "type": "SkyuxConfig" }
        ],
        "filePath": "lib/config.ts",
        "kind": "service",
        "name": "SkyAppConfig"
      },
      {
        "anchorId": "class_skyux-pact-config",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyuxPactConfig"
          },
          {
            "kind": "class-property",
            "name": "pactProxyServer",
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "providers",
            "type": "Record<string, Object>"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "class",
        "name": "SkyuxPactConfig"
      },
      {
        "anchorId": "interface_runtime-config",
        "children": [
          {
            "kind": "interface-property",
            "name": "app",
            "type": "RuntimeConfigApp"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "command",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "componentsIgnorePattern",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "componentsPattern",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "handle404",
            "type": "boolean"
          },
          {
            "kind": "interface-property",
            "name": "includeRouteModule",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "localDev",
            "type": "SkyuxRuntimeConfigLocalDev"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "pactConfig",
            "type": "SkyuxPactConfig"
          },
          {
            "kind": "interface-property",
            "name": "params",
            "type": "SkyAppRuntimeConfigParams"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "routes",
            "type": "object[]"
          },
          {
            "kind": "interface-property",
            "name": "routesPattern",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "runtimeAlias",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "skyPagesOutAlias",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "skyuxPathAlias",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "spaPathAlias",
            "type": "string"
          },
          { "kind": "interface-property", "name": "srcPath", "type": "string" },
          {
            "kind": "interface-property",
            "name": "useTemplateUrl",
            "type": "boolean"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "RuntimeConfig"
      },
      {
        "anchorId": "interface_runtime-config-app",
        "children": [
          { "kind": "interface-property", "name": "base", "type": "string" },
          { "kind": "interface-property", "name": "inject", "type": "boolean" },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "name",
            "type": "string"
          },
          { "kind": "interface-property", "name": "template", "type": "string" }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "RuntimeConfigApp"
      },
      {
        "anchorId": "interface_skyux-config",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "$schema",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "a11y",
            "type": "boolean | SkyuxConfigA11y"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "angularSettings",
            "type": "Object"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "app",
            "type": "SkyuxConfigApp"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "appSettings",
            "type": "any"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "auth",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "authSettings",
            "type": "SkyuxConfigAuthSettings"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "codeCoverageThreshold",
            "type": "\"none\" | \"standard\" | \"strict\""
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "command",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "compileMode",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "cssPath",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "dependenciesForTranspilation",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "enableIvy",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "help",
            "type": "any"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "host",
            "type": "SkyuxConfigHost"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "importPath",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "librarySettings",
            "type": "SkyuxConfigLibrarySettings"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "mode",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "moduleAliases",
            "type": "Record<string, string>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "name",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "omnibar",
            "type": "any"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "pacts",
            "type": "any[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "params",
            "type": "SkyuxConfigParams"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "pipelineSettings",
            "type": "any"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "plugins",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "redirects",
            "type": "Record<string, string>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "remoteModules",
            "type": "SkyuxConfigRemoteModules"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "routes",
            "type": "Object"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "skyuxModules",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "testSettings",
            "type": "SkyuxConfigTestSettings"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "useHashRouting",
            "type": "boolean"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfig"
      },
      {
        "anchorId": "interface_skyux-config-a11y",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "rules",
            "type": "any"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigA11y"
      },
      {
        "anchorId": "interface_skyux-config-any-all-set",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "all",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "any",
            "type": "string[]"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigAnyAllSet"
      },
      {
        "anchorId": "interface_skyux-config-app",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "base",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "externals",
            "type": "object"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "port",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "styles",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "theming",
            "type": "SkyuxConfigAppTheming"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "title",
            "type": "string"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigApp"
      },
      {
        "anchorId": "interface_skyux-config-app-theming",
        "children": [
          {
            "kind": "interface-property",
            "name": "supportedThemes",
            "type": "SkyuxConfigAppSupportedTheme[]"
          },
          {
            "kind": "interface-property",
            "name": "theme",
            "type": "SkyuxConfigAppSupportedTheme"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigAppTheming"
      },
      {
        "anchorId": "interface_skyux-config-auth-settings",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "blackbaudEmployee",
            "type": "boolean"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigAuthSettings"
      },
      {
        "anchorId": "interface_skyux-config-e2-etest-settings",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "browserSet",
            "type": "\"speedy\""
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigE2ETestSettings"
      },
      {
        "anchorId": "interface_skyux-config-host",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "bbCheckout",
            "type": "SkyuxConfigHostBBCheckout"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "csp",
            "type": "SkyuxConfigHostCsp"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "frameOptions",
            "type": "SkyuxConfigHostFrameOptionsNone | SkyuxConfigHostFrameOptionsOthers"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Blackbaud Only - Specifies configuration options for communication with SKY UX Host.",
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigHost"
      },
      {
        "anchorId": "interface_skyux-config-host-bbcheckout",
        "children": [
          { "kind": "interface-property", "name": "version", "type": "\"2\"" }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigHostBBCheckout"
      },
      {
        "anchorId": "interface_skyux-config-host-csp",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "directives",
            "type": "SkyuxConfigHostCspDirectives"
          },
          { "kind": "interface-property", "name": "enabled", "type": "boolean" }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigHostCsp"
      },
      {
        "anchorId": "interface_skyux-config-host-frame-options-none",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "blackbaud",
            "type": "false"
          },
          { "kind": "interface-property", "name": "none", "type": "true" },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "self",
            "type": "false"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "urls",
            "type": "string[]"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigHostFrameOptionsNone"
      },
      {
        "anchorId": "interface_skyux-config-host-frame-options-others",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "blackbaud",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "none",
            "type": "false"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "self",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "urls",
            "type": "string[]"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigHostFrameOptionsOthers"
      },
      {
        "anchorId": "interface_skyux-config-library-settings",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "whitelistedNonPeerDependencies",
            "type": "string[]"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigLibrarySettings"
      },
      {
        "anchorId": "interface_skyux-config-test-settings",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "e2e",
            "type": "SkyuxConfigE2ETestSettings"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "unit",
            "type": "SkyuxConfigUnitTestSettings"
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigTestSettings"
      },
      {
        "anchorId": "interface_skyux-config-unit-test-settings",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "browserSet",
            "type": "\"speedy\" | \"quirky\" | \"paranoid\""
          }
        ],
        "filePath": "lib/config.ts",
        "kind": "interface",
        "name": "SkyuxConfigUnitTestSettings"
      },
      {
        "anchorId": "type-alias_skyux-config-app-supported-theme",
        "filePath": "lib/config.ts",
        "kind": "type-alias",
        "name": "SkyuxConfigAppSupportedTheme",
        "type": "\"default\" | \"modern\""
      },
      {
        "anchorId": "type-alias_skyux-config-host-csp-directives",
        "filePath": "lib/config.ts",
        "kind": "type-alias",
        "name": "SkyuxConfigHostCspDirectives",
        "type": "Record<string, string[]>"
      },
      {
        "anchorId": "class_sky-app-runtime-config-params-provider",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppRuntimeConfigParamsProvider"
          },
          {
            "kind": "class-property",
            "name": "params",
            "type": "SkyAppRuntimeConfigParams"
          }
        ],
        "deprecationReason": "Use `SkyAppConfig.runtime.params` instead.",
        "description": "Provides methods to interact with runtime config query parameters.",
        "filePath": "lib/params-provider.ts",
        "isDeprecated": true,
        "kind": "service",
        "name": "SkyAppRuntimeConfigParamsProvider"
      },
      {
        "anchorId": "class_sky-app-runtime-config-params",
        "children": [
          {
            "description": "Returns the decoded value of the requested param.",
            "kind": "class-method",
            "name": "get",
            "parameters": [
              {
                "description": "The parameter's key.",
                "name": "key",
                "type": "string"
              }
            ],
            "type": "undefined | string"
          },
          {
            "description": "Returns the params object.",
            "kind": "class-method",
            "name": "getAll",
            "parameters": [
              {
                "description": "Exclude params that have default values",
                "isOptional": true,
                "name": "excludeDefaults",
                "type": "boolean"
              }
            ],
            "type": "Record<string, string>"
          },
          {
            "description": "Returns all keys for current params.",
            "kind": "class-method",
            "name": "getAllKeys",
            "parameters": [],
            "type": "string[]"
          },
          {
            "description": "Adds the current params to the supplied link URL.",
            "kind": "class-method",
            "name": "getLinkUrl",
            "parameters": [
              {
                "description": "The url to update.",
                "name": "url",
                "type": "string"
              },
              {
                "isOptional": true,
                "name": "options",
                "type": "SkyConfigGetLinkUrlOptions"
              }
            ],
            "type": "string"
          },
          {
            "description": "Adds the current params to the supplied URL.",
            "kind": "class-method",
            "name": "getUrl",
            "parameters": [{ "name": "url", "type": "string" }],
            "type": "string"
          },
          {
            "description": "Does the key exist",
            "kind": "class-method",
            "name": "has",
            "parameters": [{ "name": "key", "type": "string" }],
            "type": "boolean"
          },
          {
            "description": "Are all the required params defined?",
            "kind": "class-method",
            "name": "hasAllRequiredParams",
            "parameters": [],
            "type": "boolean"
          },
          {
            "description": "Returns a flag indicating whether a parameter is required.",
            "kind": "class-method",
            "name": "isRequired",
            "parameters": [{ "name": "key", "type": "string" }],
            "type": "boolean"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppRuntimeConfigParams"
          },
          {
            "description": "Returns the decoded value of the requested param.",
            "kind": "class-property",
            "name": "get",
            "type": "undefined | string"
          },
          {
            "description": "Returns the params object.",
            "kind": "class-property",
            "name": "getAll",
            "type": "Record<string, string>"
          },
          {
            "description": "Returns all keys for current params.",
            "kind": "class-property",
            "name": "getAllKeys",
            "type": "string[]"
          },
          {
            "description": "Adds the current params to the supplied link URL.",
            "kind": "class-property",
            "name": "getLinkUrl",
            "type": "string"
          },
          {
            "description": "Adds the current params to the supplied URL.",
            "kind": "class-property",
            "name": "getUrl",
            "type": "string"
          },
          {
            "description": "Does the key exist",
            "kind": "class-property",
            "name": "has",
            "type": "boolean"
          },
          {
            "description": "Are all the required params defined?",
            "kind": "class-property",
            "name": "hasAllRequiredParams",
            "type": "boolean"
          },
          {
            "description": "Returns a flag indicating whether a parameter is required.",
            "kind": "class-property",
            "name": "isRequired",
            "type": "boolean"
          }
        ],
        "filePath": "lib/params.ts",
        "kind": "class",
        "name": "SkyAppRuntimeConfigParams"
      },
      {
        "anchorId": "interface_sky-config-get-link-url-options",
        "children": [
          {
            "kind": "interface-property",
            "name": "queryParams",
            "type": "SkyConfigQueryParams"
          }
        ],
        "description": "Options used to create link URLs.",
        "filePath": "lib/types/get-link-url-options.ts",
        "kind": "interface",
        "name": "SkyConfigGetLinkUrlOptions"
      },
      {
        "anchorId": "type-alias_sky-config-query-params",
        "description": "A collection of query URL parameters.",
        "filePath": "lib/types/query-params.ts",
        "kind": "type-alias",
        "name": "SkyConfigQueryParams",
        "type": "Record<string, string | undefined>"
      }
    ],
    "@skyux/errors": [
      {
        "anchorId": "class_sky-error-action-component",
        "description": "Specifies an interactive element to include with the error message. For example, you can include a button to reload the page or to refresh data.",
        "filePath": "libs/components/errors/src/lib/modules/error/error-action.component.ts",
        "kind": "component",
        "name": "SkyErrorActionComponent",
        "selector": "sky-error-action"
      },
      {
        "anchorId": "class_sky-error-description-component",
        "children": [
          {
            "description": "Whether to replace the default description. If `false`, the content from this component is added after the default description.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "replaceDefaultDescription",
            "type": "void"
          }
        ],
        "description": "Specifies a description to provide additional details about the error.",
        "filePath": "libs/components/errors/src/lib/modules/error/error-description.component.ts",
        "kind": "component",
        "name": "SkyErrorDescriptionComponent",
        "selector": "sky-error-description"
      },
      {
        "anchorId": "class_sky-error-image-component",
        "description": "Specifies an image to display with the error message.",
        "filePath": "libs/components/errors/src/lib/modules/error/error-image.component.ts",
        "kind": "component",
        "name": "SkyErrorImageComponent",
        "selector": "sky-error-image"
      },
      {
        "anchorId": "class_error-modal-config",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "ErrorModalConfig"
          },
          {
            "description": "The label for the action button that closes the modal error message.",
            "kind": "class-property",
            "name": "errorCloseText",
            "type": "undefined | string"
          },
          {
            "description": "The description to provide additional details in the modal error message.",
            "kind": "class-property",
            "name": "errorDescription",
            "type": "undefined | string"
          },
          {
            "description": "The title to display in the modal error message.",
            "kind": "class-property",
            "name": "errorTitle",
            "type": "undefined | string"
          }
        ],
        "deprecationReason": "We recommend using a standard modal with an error component instead.",
        "filePath": "libs/components/errors/src/lib/modules/error/error-modal-config.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "ErrorModalConfig"
      },
      {
        "anchorId": "class_sky-error-modal-service",
        "children": [
          {
            "deprecationReason": "We recommend using a standard modal with an error component instead.",
            "description": "Text for the the error message, including title, description, and action label.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "open",
            "parameters": [{ "name": "config", "type": "ErrorModalConfig" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyErrorModalService"
          },
          {
            "deprecationReason": "We recommend using a standard modal with an error component instead.",
            "description": "Text for the the error message, including title, description, and action label.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "open",
            "type": "void"
          }
        ],
        "deprecationReason": "We recommend using a standard modal with an error component instead.",
        "description": "Opens a modal to display a SKY UX-themed error message.",
        "filePath": "libs/components/errors/src/lib/modules/error/error-modal.service.ts",
        "isDeprecated": true,
        "kind": "service",
        "name": "SkyErrorModalService"
      },
      {
        "anchorId": "class_sky-error-title-component",
        "children": [
          {
            "description": "Whether to replace the default title. If `false`, the content from this component is added after the default title.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "replaceDefaultTitle",
            "type": "void"
          }
        ],
        "description": "Specifies a title to display with the error message.",
        "filePath": "libs/components/errors/src/lib/modules/error/error-title.component.ts",
        "kind": "component",
        "name": "SkyErrorTitleComponent",
        "selector": "sky-error-title"
      },
      {
        "anchorId": "type-alias_sky-error-type",
        "description": "The type of error to display.",
        "filePath": "libs/components/errors/src/lib/modules/error/error-type.ts",
        "kind": "type-alias",
        "name": "SkyErrorType",
        "type": "\"broken\" | \"construction\" | \"notfound\" | \"security\""
      },
      {
        "anchorId": "class_sky-error-component",
        "children": [
          {
            "description": "Whether to display the error image.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "showImage",
            "type": "undefined | boolean"
          },
          {
            "description": "The set of pre-defined values for the image, title, and description.",
            "kind": "directive-input",
            "name": "errorType",
            "type": "undefined | SkyErrorType"
          }
        ],
        "description": "Displays a SKY UX-themed error message.",
        "filePath": "libs/components/errors/src/lib/modules/error/error.component.ts",
        "kind": "component",
        "name": "SkyErrorComponent",
        "selector": "sky-error"
      },
      {
        "anchorId": "class_sky-error-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyErrorModule"
          }
        ],
        "filePath": "libs/components/errors/src/lib/modules/error/error.module.ts",
        "kind": "module",
        "name": "SkyErrorModule"
      }
    ],
    "@skyux/errors/testing": [
      {
        "anchorId": "class_sky-error-fixture",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyErrorFixture"
          },
          {
            "description": "The error's current type.",
            "kind": "class-property",
            "name": "errorType",
            "type": "undefined | string"
          }
        ],
        "description": "Allows interaction with a SKY UX error component.",
        "filePath": "libs/components/errors/testing/src/legacy/error-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyErrorFixture"
      },
      {
        "anchorId": "class_sky-error-modal-harness",
        "children": [
          {
            "description": "Clicks the error modal close button.",
            "kind": "class-method",
            "name": "clickCloseButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the text of the error modal close button.",
            "kind": "class-method",
            "name": "getCloseText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the description of the error modal.",
            "kind": "class-method",
            "name": "getDescription",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the title of the error modal.",
            "kind": "class-method",
            "name": "getTitle",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyErrorModalHarness"
          },
          {
            "defaultValue": "'sky-modal:has(.sky-error-modal-container)'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the error modal close button.",
            "kind": "class-property",
            "name": "clickCloseButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the text of the error modal close button.",
            "kind": "class-property",
            "name": "getCloseText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the description of the error modal.",
            "kind": "class-property",
            "name": "getDescription",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the title of the error modal.",
            "kind": "class-property",
            "name": "getTitle",
            "type": "Promise<string>"
          }
        ],
        "description": "Harness for interacting with an error modal component in tests.",
        "filePath": "libs/components/errors/testing/src/modules/error/error-modal-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyErrorModalHarness"
      }
    ],
    "@skyux/flyout": [
      {
        "anchorId": "class_sky-flyout-instance",
        "children": [
          {
            "description": "Closes the flyout instance and emits its `closed` event.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              {
                "description": "Arguments used when closing the flyout.",
                "isOptional": true,
                "name": "args",
                "type": "SkyFlyoutCloseArgs"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFlyoutInstance<T>"
          },
          {
            "description": "An event that the flyout instance emits when it closes.",
            "kind": "class-property",
            "name": "closed",
            "type": "EventEmitter<void>"
          },
          {
            "description": "The instance of the component to display in the flyout.",
            "kind": "class-property",
            "name": "componentInstance",
            "type": "T"
          },
          {
            "description": "A `boolean` value that returns `true` if the flyout is open.",
            "defaultValue": "true",
            "kind": "class-property",
            "name": "isOpen",
            "type": "boolean"
          },
          {
            "description": "An event that the modal instance emits when it is about to close. If a subscription exists for this event, the modal does not close until the subscriber calls the handler's `closeModal` method.",
            "kind": "class-property",
            "name": "beforeClose",
            "type": "Observable<SkyFlyoutBeforeCloseHandler>"
          },
          {
            "description": "Used to communicate with the host component.",
            "kind": "class-property",
            "name": "hostController",
            "type": "Subject<SkyFlyoutMessage>"
          },
          {
            "description": "An event that the flyout instance emits when users click the next iterator button.",
            "kind": "class-property",
            "name": "iteratorNextButtonClick",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Disables the next iterator button.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "iteratorNextButtonDisabled",
            "type": "boolean"
          },
          {
            "description": "An event that the flyout instance emits when users click the previous iterator button.",
            "kind": "class-property",
            "name": "iteratorPreviousButtonClick",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Disables the previous iterator button.",
            "defaultValue": "false",
            "kind": "class-property",
            "name": "iteratorPreviousButtonDisabled",
            "type": "boolean"
          },
          {
            "description": "Closes the flyout instance and emits its `closed` event.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          }
        ],
        "description": "Represents a single displayed flyout.",
        "filePath": "lib/modules/flyout/flyout-instance.ts",
        "kind": "class",
        "name": "SkyFlyoutInstance",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "class_sky-flyout-component",
        "filePath": "lib/modules/flyout/flyout.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyFlyoutComponent",
        "selector": "sky-flyout"
      },
      {
        "anchorId": "class_sky-flyout-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFlyoutModule"
          }
        ],
        "filePath": "lib/modules/flyout/flyout.module.ts",
        "kind": "module",
        "name": "SkyFlyoutModule"
      },
      {
        "anchorId": "class_sky-flyout-legacy-service",
        "children": [
          {
            "description": "Closes the flyout. This method also removes the flyout's HTML elements from the DOM.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              {
                "description": "Arguments used when closing the flyout.",
                "isOptional": true,
                "name": "args",
                "type": "SkyFlyoutCloseArgs"
              }
            ],
            "type": "void"
          },
          {
            "description": "Opens a flyout and displays the specified component.",
            "kind": "class-method",
            "name": "open",
            "parameters": [
              {
                "description": "Specifies the component to render.",
                "name": "component",
                "type": "Type<T>"
              },
              {
                "description": "Specifies the flyout configuration passed to the specified component's constructor.",
                "isOptional": true,
                "name": "config",
                "type": "SkyFlyoutConfig"
              }
            ],
            "type": "SkyFlyoutInstance<T>",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFlyoutLegacyService"
          },
          {
            "description": "Closes the flyout. This method also removes the flyout's HTML elements from the DOM.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Opens a flyout and displays the specified component.",
            "kind": "class-property",
            "name": "open",
            "type": "SkyFlyoutInstance<T>"
          }
        ],
        "deprecationReason": "Use `SkyFlyoutService` to open a standalone component instead.",
        "description": "Launches flyouts and provides a common look and feel. This service dynamically generates the flyout component and appends it directly to the document's `body` element. The `SkyFlyoutInstance` class watches for and triggers flyout events.",
        "filePath": "lib/modules/flyout/flyout.service.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "SkyFlyoutLegacyService"
      },
      {
        "anchorId": "class_sky-flyout-service",
        "children": [
          {
            "description": "Closes the flyout. This method also removes the flyout's HTML elements from the DOM.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              {
                "description": "Arguments used when closing the flyout.",
                "isOptional": true,
                "name": "args",
                "type": "SkyFlyoutCloseArgs"
              }
            ],
            "type": "void"
          },
          {
            "description": "Opens a flyout and displays the specified component.",
            "kind": "class-method",
            "name": "open",
            "parameters": [
              {
                "description": "Specifies the component to render.",
                "name": "component",
                "type": "Type<T>"
              },
              {
                "description": "Specifies the flyout configuration passed to the specified component's constructor.",
                "isOptional": true,
                "name": "config",
                "type": "SkyFlyoutConfig"
              }
            ],
            "type": "SkyFlyoutInstance<T>",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFlyoutService"
          },
          {
            "description": "Closes the flyout. This method also removes the flyout's HTML elements from the DOM.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Opens a flyout and displays the specified component.",
            "kind": "class-property",
            "name": "open",
            "type": "SkyFlyoutInstance<T>"
          }
        ],
        "description": "Launches flyouts and provides a common look and feel. This service dynamically generates the flyout component and appends it directly to the document's `body` element. The `SkyFlyoutInstance` class watches for and triggers flyout events.",
        "filePath": "lib/modules/flyout/flyout.service.ts",
        "kind": "service",
        "name": "SkyFlyoutService"
      },
      {
        "anchorId": "interface_sky-flyout-action",
        "children": [
          {
            "description": "The callback function to execute when the button is clicked.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "callback",
            "type": "Function"
          },
          {
            "description": "Whether to close the flyout after the button is clicked.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "closeAfterInvoking",
            "type": "boolean"
          },
          {
            "description": "The button's label.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/flyout/types/flyout-action.ts",
        "kind": "interface",
        "name": "SkyFlyoutAction"
      },
      {
        "anchorId": "class_sky-flyout-before-close-handler",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFlyoutBeforeCloseHandler"
          },
          {
            "description": "Function which should be called to close the flyout. This should be called once any intervening actions have completed.",
            "kind": "class-property",
            "name": "closeFlyout",
            "type": "Function"
          }
        ],
        "description": "Handler for notifying the flyout when it is appropriate to close the flyout. This will be returned from the flyout instance's `beforeClose` observable.",
        "filePath": "lib/modules/flyout/types/flyout-before-close-handler.ts",
        "kind": "class",
        "name": "SkyFlyoutBeforeCloseHandler"
      },
      {
        "anchorId": "interface_sky-flyout-close-args",
        "children": [
          {
            "description": "Whether the `SkyFlyoutBeforeCloseHandler` is ignored when closing a flyout.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ignoreBeforeClose",
            "type": "boolean"
          }
        ],
        "description": "Arguments used when closing a flyout programmatically.",
        "filePath": "lib/modules/flyout/types/flyout-close-args.ts",
        "kind": "interface",
        "name": "SkyFlyoutCloseArgs"
      },
      {
        "anchorId": "interface_sky-flyout-config",
        "children": [
          {
            "description": "The HTML element ID of the element that describes the flyout. This sets the flyout's `aria-describedby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). The description typically includes text on the flyout but not on items that users interact with, such as buttons and forms. For more information about the `aria-describedby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-describedby).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaDescribedBy",
            "type": "string"
          },
          {
            "description": "The ARIA label for the flyout. This sets the flyouts's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the flyout includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaLabel",
            "type": "string"
          },
          {
            "description": "The HTML element ID of the element that labels the flyout. This sets the flyout's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the flyout does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaLabelledBy",
            "type": "string"
          },
          {
            "deprecationReason": "Since version `5.1.0`. Consumers should use the default `dialog` role to ensure a\nproper accessibility implementation.",
            "description": "The ARIA role for the flyout [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) by indicating how the flyout functions and what it controls. For information about how an ARIA role indicates what an item represents on a web page, see the [WAI-ARIA roles model](https://www.w3.org/WAI/PF/aria/#roles).",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaRole",
            "type": "string"
          },
          {
            "description": "The default width of the flyout container. If you do not provide a width, the flyout defaults to half the width of its container.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "defaultWidth",
            "type": "number"
          },
          {
            "description": "Disables the next iterator button in the flyout header that accesses the next record in a record set.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "iteratorNextButtonDisabled",
            "type": "boolean"
          },
          {
            "description": "Disables the previous iterator button in the flyout header that accesses the previous record in a record set.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "iteratorPreviousButtonDisabled",
            "type": "boolean"
          },
          {
            "description": "The maximum resize width of the flyout container.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "maxWidth",
            "type": "number"
          },
          {
            "description": "The minimum resize width of the flyout container.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "minWidth",
            "type": "number"
          },
          {
            "description": "Displays a permalink button in the flyout header that navigates users to the URL (or application route) representative of the flyout's contents.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "permalink",
            "type": "SkyFlyoutPermalink"
          },
          {
            "description": "Displays a configurable button in the flyout header.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "primaryAction",
            "type": "SkyFlyoutAction"
          },
          {
            "description": "The array of custom providers to pass to the component's constructor.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "providers",
            "type": "any[]"
          },
          {
            "description": "The unique key for the UI Config Service to retrieve stored settings from a database. The UI Config Service saves configuration settings for users to preserve the width of the flyout. For more information about the UI Config Service, see [the sticky settings documentation](https://developer.blackbaud.com/skyux/learn/develop/sticky-settings).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "settingsKey",
            "type": "string"
          },
          {
            "description": "Whether to display iterator buttons in the flyout header to access the next and previous records in a record set.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "showIterator",
            "type": "boolean"
          }
        ],
        "description": "Specifies the configuration options to set up a flyout.",
        "filePath": "lib/modules/flyout/types/flyout-config.ts",
        "kind": "interface",
        "name": "SkyFlyoutConfig"
      },
      {
        "anchorId": "enum_sky-flyout-message-type",
        "filePath": "lib/modules/flyout/types/flyout-message-type.ts",
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          { "kind": "enum-member", "name": "Close", "type": "1" },
          {
            "kind": "enum-member",
            "name": "DisableIteratorNextButton",
            "type": "4"
          },
          {
            "kind": "enum-member",
            "name": "DisableIteratorPreviousButton",
            "type": "5"
          },
          {
            "kind": "enum-member",
            "name": "EnableIteratorNextButton",
            "type": "2"
          },
          {
            "kind": "enum-member",
            "name": "EnableIteratorPreviousButton",
            "type": "3"
          },
          { "kind": "enum-member", "name": "Open", "type": "0" }
        ],
        "name": "SkyFlyoutMessageType"
      },
      {
        "anchorId": "interface_sky-flyout-message",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "Object"
          },
          {
            "kind": "interface-property",
            "name": "type",
            "type": "SkyFlyoutMessageType"
          }
        ],
        "filePath": "lib/modules/flyout/types/flyout-message.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyFlyoutMessage"
      },
      {
        "anchorId": "interface_sky-flyout-permalink",
        "children": [
          {
            "description": "The text label for the permalink button.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The object that represents the [Angular application route](https://angular.io/api/router/Router#navigate). The object includes two properties that are mapped to Angular's `Router.navigate(commands, extras?)` method.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "route",
            "type": "Object"
          },
          {
            "description": "The external URL for the permalink.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "url",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/flyout/types/flyout-permalink.ts",
        "kind": "interface",
        "name": "SkyFlyoutPermalink"
      }
    ],
    "@skyux/layout": [
      {
        "anchorId": "class_sky-action-button-container-component",
        "children": [
          {
            "description": "How to display the action buttons inside the action button container. Options are `\"center\"` or `\"left\"`.",
            "defaultValue": "\"center\"",
            "kind": "directive-input",
            "name": "alignItems",
            "type": "SkyActionButtonContainerAlignItemsType"
          }
        ],
        "description": "Wraps action buttons to ensures that they have consistent height and spacing.",
        "filePath": "libs/components/layout/src/lib/modules/action-button/action-button-container.component.ts",
        "kind": "component",
        "name": "SkyActionButtonContainerComponent",
        "selector": "sky-action-button-container"
      },
      {
        "anchorId": "class_sky-action-button-details-component",
        "description": "Specifies a description to display on an action button.",
        "filePath": "libs/components/layout/src/lib/modules/action-button/action-button-details.component.ts",
        "kind": "component",
        "name": "SkyActionButtonDetailsComponent",
        "selector": "sky-action-button-details"
      },
      {
        "anchorId": "class_sky-action-button-header-component",
        "description": "Specifies a header to display on an action button.",
        "filePath": "libs/components/layout/src/lib/modules/action-button/action-button-header.component.ts",
        "kind": "component",
        "name": "SkyActionButtonHeaderComponent",
        "selector": "sky-action-button-header"
      },
      {
        "anchorId": "class_sky-action-button-icon-component",
        "children": [
          {
            "description": "The icon from the [Font Awesome library](https://fontawesome.com/v4.7.0/). For example, to display the `fa-filter` icon on the action button, set `iconType` to `filter`. SKY UX supports version 4.7.0 of Font Awesome. For more information about icons in SKY UX, see the [icon component](https://developer.blackbaud.com/skyux/components/icon).",
            "kind": "directive-input",
            "name": "iconType",
            "type": "undefined | string"
          }
        ],
        "description": "Specifies an icon to display on the action button.",
        "filePath": "libs/components/layout/src/lib/modules/action-button/action-button-icon.component.ts",
        "kind": "component",
        "name": "SkyActionButtonIconComponent",
        "selector": "sky-action-button-icon"
      },
      {
        "anchorId": "interface_sky-action-button-permalink",
        "children": [
          {
            "description": "The Angular router link for the action button. This property accepts a custom object with a `commands` property to specify router commands and an `extras` property to specify [Angular `NavigationExtras`](https://angular.io/api/router/NavigationExtras). This property passes the following properties: - `permalink.route?.extras?.fragment` to [`fragment`](https://angular.io/api/router/NavigationExtras#fragment) - `permalink.route?.extras?.queryParams` to [`queryParams`](https://angular.io/api/router/NavigationExtras#queryParams) - `permalink.route?.extras?.queryParamsHandling` to [`queryParamsHandling`](https://angular.io/api/router/NavigationExtras#queryParamsHandling) - `permalink.route?.commands` to [`routerLink`](https://angular.io/api/router/RouterLink)",
            "isOptional": true,
            "kind": "interface-property",
            "name": "route",
            "type": "Object"
          },
          {
            "description": "The direct link for the action button.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Specifies an Angular router link with the `route` property or a direct link with the `url` property. If it provides both, the action button uses the `route` property.",
        "filePath": "libs/components/layout/src/lib/modules/action-button/action-button-permalink.ts",
        "kind": "interface",
        "name": "SkyActionButtonPermalink"
      },
      {
        "anchorId": "class_sky-action-button-component",
        "children": [
          {
            "description": "The link for the action button.",
            "kind": "directive-input",
            "name": "permalink",
            "type": "undefined | SkyActionButtonPermalink"
          },
          {
            "description": "Fires when users select the action button.",
            "kind": "directive-output",
            "name": "actionClick",
            "type": "EventEmitter<any>"
          }
        ],
        "description": "Creates a button to present users with an option to move forward with tasks.",
        "filePath": "libs/components/layout/src/lib/modules/action-button/action-button.component.ts",
        "kind": "component",
        "name": "SkyActionButtonComponent",
        "selector": "sky-action-button"
      },
      {
        "anchorId": "class_sky-action-button-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyActionButtonModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/action-button/action-button.module.ts",
        "kind": "module",
        "name": "SkyActionButtonModule"
      },
      {
        "anchorId": "type-alias_sky-action-button-container-align-items-type",
        "filePath": "libs/components/layout/src/lib/modules/action-button/types/action-button-container-align-items-type.ts",
        "kind": "type-alias",
        "name": "SkyActionButtonContainerAlignItemsType",
        "type": "\"center\" | \"left\""
      },
      {
        "anchorId": "enum_sky-action-button-container-align-items",
        "deprecationReason": "Use `SkyActionButtonContainerAlignItemsType` instead.",
        "filePath": "libs/components/layout/src/lib/modules/action-button/types/action-button-container-align-items.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "Displays the action buttons as center-aligned.",
            "kind": "enum-member",
            "name": "Center",
            "type": "\"center\""
          },
          {
            "description": "Displays the action buttons as left-aligned.",
            "kind": "enum-member",
            "name": "Left",
            "type": "\"left\""
          }
        ],
        "name": "SkyActionButtonContainerAlignItems"
      },
      {
        "anchorId": "class_sky-back-to-top-component",
        "filePath": "libs/components/layout/src/lib/modules/back-to-top/back-to-top.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyBackToTopComponent",
        "selector": "sky-back-to-top"
      },
      {
        "anchorId": "class_sky-back-to-top-directive",
        "children": [
          {
            "description": "Configuration options for the back to top component.",
            "kind": "directive-input",
            "name": "skyBackToTop",
            "type": "void"
          },
          {
            "description": "The observable to send commands to the back to top component. The commands respect the `SkyBackToTopMessage` type.",
            "kind": "directive-input",
            "name": "skyBackToTopMessageStream",
            "type": "void"
          }
        ],
        "description": "Associates a button with an element on the page and displays that button to return to the element after users scroll away.",
        "filePath": "libs/components/layout/src/lib/modules/back-to-top/back-to-top.directive.ts",
        "kind": "directive",
        "name": "SkyBackToTopDirective",
        "selector": "[skyBackToTop]"
      },
      {
        "anchorId": "class_sky-back-to-top-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyBackToTopModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/back-to-top/back-to-top.module.ts",
        "kind": "module",
        "name": "SkyBackToTopModule"
      },
      {
        "anchorId": "enum_sky-back-to-top-message-type",
        "description": "The type of message to send to the back to top component.",
        "filePath": "libs/components/layout/src/lib/modules/back-to-top/models/back-to-top-message-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Scrolls the element back to the top.",
            "kind": "enum-member",
            "name": "BackToTop",
            "type": "0"
          }
        ],
        "name": "SkyBackToTopMessageType"
      },
      {
        "anchorId": "interface_sky-back-to-top-message",
        "children": [
          {
            "description": "The type of message to send.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "BackToTop"
          }
        ],
        "description": "Specifies messages to send to the back to top component.",
        "filePath": "libs/components/layout/src/lib/modules/back-to-top/models/back-to-top-message.ts",
        "kind": "interface",
        "name": "SkyBackToTopMessage"
      },
      {
        "anchorId": "interface_sky-back-to-top-options",
        "children": [
          {
            "description": "Whether to hide the back to top button.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttonHidden",
            "type": "boolean"
          }
        ],
        "description": "Specifies options for the back to top component.",
        "filePath": "libs/components/layout/src/lib/modules/back-to-top/models/back-to-top-options.ts",
        "kind": "interface",
        "name": "SkyBackToTopOptions"
      },
      {
        "anchorId": "class_sky-box-content-component",
        "description": "Specifies the body content to display inside the box and provides padding around that content.",
        "filePath": "libs/components/layout/src/lib/modules/box/box-content.component.ts",
        "kind": "component",
        "name": "SkyBoxContentComponent",
        "selector": "sky-box-content"
      },
      {
        "anchorId": "class_sky-box-controls-component",
        "description": "Specifies the controls to display in upper right corner of the box. These buttons typically let users edit the box content.",
        "filePath": "libs/components/layout/src/lib/modules/box/box-controls.component.ts",
        "kind": "component",
        "name": "SkyBoxControlsComponent",
        "selector": "sky-box-controls"
      },
      {
        "anchorId": "class_sky-box-header-component",
        "deprecationReason": "Use `headingText` input on the `sky-box` component instead.",
        "description": "Specifies a header for the box.",
        "filePath": "libs/components/layout/src/lib/modules/box/box-header.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyBoxHeaderComponent",
        "selector": "sky-box-header"
      },
      {
        "anchorId": "type-alias_sky-box-heading-level",
        "filePath": "libs/components/layout/src/lib/modules/box/box-heading-level.ts",
        "kind": "type-alias",
        "name": "SkyBoxHeadingLevel",
        "type": "2 | 3 | 4 | 5"
      },
      {
        "anchorId": "type-alias_sky-box-heading-style",
        "filePath": "libs/components/layout/src/lib/modules/box/box-heading-style.ts",
        "kind": "type-alias",
        "name": "SkyBoxHeadingStyle",
        "type": "2 | 3 | 4 | 5"
      },
      {
        "anchorId": "class_sky-box-component",
        "children": [
          {
            "deprecationReason": "Use `headingText` instead.",
            "description": "The ARIA label for the box. This sets the box's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the box includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Use `headingText` instead.",
            "description": "The HTML element ID of the element that labels the box. This sets the box's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the box does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "The ARIA role for the box [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) by indicating what the box contains. For information about how an ARIA role indicates what an item represents on a web page, see the [WAI-ARIA roles model](https://www.w3.org/WAI/PF/aria/#roles).",
            "kind": "directive-input",
            "name": "ariaRole",
            "type": "undefined | string"
          },
          {
            "description": "Indicates whether to hide the `headingText`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "headingHidden",
            "type": "boolean"
          },
          {
            "description": "The semantic heading level in the document structure. The default is 2.",
            "defaultValue": "2",
            "kind": "directive-input",
            "name": "headingLevel",
            "type": "SkyBoxHeadingLevel"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the box heading. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the box heading. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The heading [font style](https://developer.blackbaud.com/skyux/design/styles/typography#headings).",
            "defaultValue": "2",
            "kind": "directive-input",
            "name": "headingStyle",
            "type": "void"
          },
          {
            "description": "The text to display as the box's heading.",
            "kind": "directive-input",
            "name": "headingText",
            "type": "undefined | string"
          }
        ],
        "description": "Provides a common look-and-feel for box content with options to display a common box header, specify body content, and display common box controls.",
        "filePath": "libs/components/layout/src/lib/modules/box/box.component.ts",
        "kind": "component",
        "name": "SkyBoxComponent",
        "selector": "sky-box"
      },
      {
        "anchorId": "class_sky-box-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyBoxModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/box/box.module.ts",
        "kind": "module",
        "name": "SkyBoxModule"
      },
      {
        "anchorId": "class_sky-card-actions-component",
        "description": "Specifies an action that users can perform on the card.",
        "filePath": "libs/components/layout/src/lib/modules/card/card-actions.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyCardActionsComponent",
        "selector": "sky-card-actions"
      },
      {
        "anchorId": "class_sky-card-content-component",
        "description": "Specifies the content to display in the body of the card.",
        "filePath": "libs/components/layout/src/lib/modules/card/card-content.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyCardContentComponent",
        "selector": "sky-card-content"
      },
      {
        "anchorId": "class_sky-card-title-component",
        "description": "Specifies a title to identify what the card represents.",
        "filePath": "libs/components/layout/src/lib/modules/card/card-title.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyCardTitleComponent",
        "selector": "sky-card-title"
      },
      {
        "anchorId": "class_sky-card-component",
        "children": [
          {
            "description": "Whether to display a checkbox to the right of the card title. Users can select multiple checkboxes and perform actions on the selected cards.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "selectable",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether the card is selected. This only applies to card where `selectable` is set to `true`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "selected",
            "type": "undefined | boolean"
          },
          {
            "description": "The size of the card. The valid options are `\"large\"` and `\"small\"`.",
            "defaultValue": "\"large\"",
            "kind": "directive-input",
            "name": "size",
            "type": "string"
          },
          {
            "description": "Fires when users select or deselect the card.",
            "kind": "directive-output",
            "name": "selectedChange",
            "type": "EventEmitter<boolean>"
          }
        ],
        "deprecationReason": "`SkyCardComponent` is deprecated. For other SKY UX components that group and list content, see the content containers guidelines. For more information, see https://developer.blackbaud.com/skyux/design/guidelines/content-containers.",
        "description": "Creates a a small container to highlight important information.",
        "filePath": "libs/components/layout/src/lib/modules/card/card.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyCardComponent",
        "selector": "sky-card"
      },
      {
        "anchorId": "class_sky-card-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCardModule"
          }
        ],
        "deprecationReason": "`SkyCardModule` is deprecated. For other SKY UX components that group and list content, see the content containers guidelines. For more information, see https://developer.blackbaud.com/skyux/design/guidelines/content-containers.",
        "filePath": "libs/components/layout/src/lib/modules/card/card.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyCardModule"
      },
      {
        "anchorId": "class_sky-definition-list-content-component",
        "description": "Wraps the label-value pairs in the definition list.",
        "filePath": "libs/components/layout/src/lib/modules/definition-list/definition-list-content.component.ts",
        "kind": "component",
        "name": "SkyDefinitionListContentComponent",
        "selector": "sky-definition-list-content"
      },
      {
        "anchorId": "class_sky-definition-list-heading-component",
        "description": "Specifies a title for the definition list.",
        "filePath": "libs/components/layout/src/lib/modules/definition-list/definition-list-heading.component.ts",
        "kind": "component",
        "name": "SkyDefinitionListHeadingComponent",
        "selector": "sky-definition-list-heading"
      },
      {
        "anchorId": "class_sky-definition-list-label-component",
        "description": "Specifies the label in a label-value pair.",
        "filePath": "libs/components/layout/src/lib/modules/definition-list/definition-list-label.component.ts",
        "kind": "component",
        "name": "SkyDefinitionListLabelComponent",
        "selector": "sky-definition-list-label"
      },
      {
        "anchorId": "class_sky-definition-list-value-component",
        "description": "Specifies the value in a label-value pair.",
        "filePath": "libs/components/layout/src/lib/modules/definition-list/definition-list-value.component.ts",
        "kind": "component",
        "name": "SkyDefinitionListValueComponent",
        "selector": "sky-definition-list-value"
      },
      {
        "anchorId": "class_sky-definition-list-component",
        "children": [
          {
            "description": "The default value to display when no value is provided for a label-value pair.",
            "defaultValue": "\"None found\"",
            "kind": "directive-input",
            "name": "defaultValue",
            "type": "void"
          },
          {
            "description": "The width of the label portion of the definition list.",
            "defaultValue": "\"90px\"",
            "kind": "directive-input",
            "name": "labelWidth",
            "type": "void"
          }
        ],
        "description": "Creates a definition list to display label-value pairs.",
        "filePath": "libs/components/layout/src/lib/modules/definition-list/definition-list.component.ts",
        "kind": "component",
        "name": "SkyDefinitionListComponent",
        "selector": "sky-definition-list"
      },
      {
        "anchorId": "class_sky-definition-list-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDefinitionListModule"
          }
        ],
        "deprecationReason": "Use `SkyDescriptionListModule` instead.",
        "filePath": "libs/components/layout/src/lib/modules/definition-list/definition-list.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyDefinitionListModule"
      },
      {
        "anchorId": "class_sky-description-list-content-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the description list content label. Clicking the button invokes global help as configured by the application.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the description list content. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          }
        ],
        "description": "Wraps the term-description pairs in the description list.",
        "filePath": "libs/components/layout/src/lib/modules/description-list/description-list-content.component.ts",
        "kind": "component",
        "name": "SkyDescriptionListContentComponent",
        "selector": "sky-description-list-content"
      },
      {
        "anchorId": "class_sky-description-list-description-component",
        "description": "Specifies the description in a term-description pair.",
        "filePath": "libs/components/layout/src/lib/modules/description-list/description-list-description.component.ts",
        "kind": "component",
        "name": "SkyDescriptionListDescriptionComponent",
        "selector": "sky-description-list-description"
      },
      {
        "anchorId": "class_sky-description-list-term-component",
        "description": "Specifies the term in a term-description pair. To display a help button beside the term, include a help button element in the sky-description-list-term element and a sky-control-help CSS class on that element.",
        "filePath": "libs/components/layout/src/lib/modules/description-list/description-list-term.component.ts",
        "kind": "component",
        "name": "SkyDescriptionListTermComponent",
        "selector": "sky-description-list-term"
      },
      {
        "anchorId": "class_sky-description-list-component",
        "children": [
          {
            "description": "The width of term-description pairs when `mode` is set to `\"horizontal\"`. By default, the width is responsive based on the width of the container element.",
            "kind": "directive-input",
            "name": "listItemWidth",
            "type": "undefined | string"
          },
          {
            "description": "The default description to display when no description is provided for a term-description pair.",
            "defaultValue": "\"None found\"",
            "kind": "directive-input",
            "name": "defaultDescription",
            "type": "void"
          },
          {
            "description": "How to display term-description pairs within the description list.",
            "defaultValue": "\"vertical\"",
            "kind": "directive-input",
            "name": "mode",
            "type": "SkyDescriptionListModeType"
          }
        ],
        "description": "Creates a description list to display term-description pairs.",
        "filePath": "libs/components/layout/src/lib/modules/description-list/description-list.component.ts",
        "kind": "component",
        "name": "SkyDescriptionListComponent",
        "selector": "sky-description-list"
      },
      {
        "anchorId": "class_sky-description-list-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDescriptionListModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/description-list/description-list.module.ts",
        "kind": "module",
        "name": "SkyDescriptionListModule"
      },
      {
        "anchorId": "type-alias_sky-description-list-mode-type",
        "description": "How to display the term-description pairs within a description list.",
        "filePath": "libs/components/layout/src/lib/modules/description-list/types/description-list-mode-type.ts",
        "kind": "type-alias",
        "name": "SkyDescriptionListModeType",
        "type": "\"horizontal\" | \"longDescription\" | \"vertical\""
      },
      {
        "anchorId": "enum_sky-description-list-mode",
        "deprecationReason": "Use `SkyDescriptionListModeType` instead.\n\nHow to display the term-description pairs within a description list.",
        "filePath": "libs/components/layout/src/lib/modules/description-list/types/description-list-mode.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "Displays term-description pairs side by side in a horizontal list. This mode provides a responsive layout.",
            "kind": "enum-member",
            "name": "horizontal",
            "type": "\"horizontal\""
          },
          {
            "description": "Displays terms and descriptions side by side with the term on the left and the description on the right. This mode includes room for long descriptions and uses a responsive layout that stacks term-description pairs vertically.",
            "kind": "enum-member",
            "name": "longDescription",
            "type": "\"longDescription\""
          },
          {
            "description": "Displays term-description pairs in a vertical list.",
            "kind": "enum-member",
            "name": "vertical",
            "type": "\"vertical\""
          }
        ],
        "name": "SkyDescriptionListMode"
      },
      {
        "anchorId": "class_sky-column-component",
        "children": [
          {
            "description": "The number of columns (1-12) on large screens (more than 1200px). If you do not specify a value, the column inherits the `screenMedium` value.",
            "kind": "directive-input",
            "name": "screenLarge",
            "type": "undefined | number"
          },
          {
            "description": "The number of columns (1-12) on medium screens (992-1199px). If you do not specify a value, the column inherits the `screenSmall` value.",
            "kind": "directive-input",
            "name": "screenMedium",
            "type": "undefined | number"
          },
          {
            "description": "The number of columns (1-12) on small screens (768-991px). If you do not specify a value, the column inherits the `screenXSmall` value.",
            "kind": "directive-input",
            "name": "screenSmall",
            "type": "undefined | number"
          },
          {
            "description": "The number of columns (1-12) on extra-small screens (less than 768px). If you do not specify a value, the fluid grid displays the column at the full width of the screen.",
            "defaultValue": "12",
            "kind": "directive-input",
            "name": "screenXSmall",
            "type": "number"
          }
        ],
        "description": "Displays a column within a row of the fluid grid.",
        "filePath": "libs/components/layout/src/lib/modules/fluid-grid/column.component.ts",
        "kind": "component",
        "name": "SkyColumnComponent",
        "selector": "sky-column"
      },
      {
        "anchorId": "class_sky-fluid-grid-component",
        "children": [
          {
            "description": "Disables the outer left and right margin of the fluid grid container.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disableMargin",
            "type": "undefined | boolean"
          },
          {
            "description": "The type that defines the size of the padding between columns.",
            "defaultValue": "\"large\"",
            "kind": "directive-input",
            "name": "gutterSize",
            "type": "SkyFluidGridGutterSizeType"
          }
        ],
        "description": "Wraps the fluid grid to ensure proper spacing. Without the wrapper, the alignment, padding, and margins do not behave as expected.",
        "filePath": "libs/components/layout/src/lib/modules/fluid-grid/fluid-grid.component.ts",
        "kind": "component",
        "name": "SkyFluidGridComponent",
        "selector": "sky-fluid-grid"
      },
      {
        "anchorId": "class_sky-fluid-grid-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFluidGridModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/fluid-grid/fluid-grid.module.ts",
        "kind": "module",
        "name": "SkyFluidGridModule"
      },
      {
        "anchorId": "class_sky-row-component",
        "children": [
          {
            "description": "Whether to reverse the display order for columns in the row.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "reverseColumnOrder",
            "type": "undefined | boolean"
          }
        ],
        "description": "Displays a row within the `sky-fluid-grid` wrapper. Previously, you could display a row without a wrapper, but we no longer officially support that option.",
        "filePath": "libs/components/layout/src/lib/modules/fluid-grid/row.component.ts",
        "kind": "component",
        "name": "SkyRowComponent",
        "selector": "sky-row"
      },
      {
        "anchorId": "type-alias_sky-fluid-grid-gutter-size-type",
        "filePath": "libs/components/layout/src/lib/modules/fluid-grid/types/fluid-grid-gutter-size-type.ts",
        "kind": "type-alias",
        "name": "SkyFluidGridGutterSizeType",
        "type": "\"small\" | \"medium\" | \"large\""
      },
      {
        "anchorId": "interface_sky-format-item",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "templateRef",
            "type": "TemplateRef<any>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "text",
            "type": "string"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/format/format-item.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyFormatItem"
      },
      {
        "anchorId": "class_sky-format-component",
        "children": [
          {
            "description": "An array of `TemplateRef` objects to be placed in the template, where the `nth` item is placed at the `{n}` location in the template.",
            "kind": "directive-input",
            "name": "args",
            "type": "undefined | TemplateRef<any>[]"
          },
          {
            "description": "The tokenized string that represents the template. Tokens use the `{n}` notation where `n` is the ordinal of the item to replace the token.",
            "kind": "directive-input",
            "name": "text",
            "type": "undefined | string"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/format/format.component.ts",
        "kind": "component",
        "name": "SkyFormatComponent",
        "selector": "sky-format"
      },
      {
        "anchorId": "class_sky-format-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFormatModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/format/format.module.ts",
        "kind": "module",
        "name": "SkyFormatModule"
      },
      {
        "anchorId": "enum_sky-inline-delete-type",
        "description": "The type of inline delete that is shown.",
        "filePath": "libs/components/layout/src/lib/modules/inline-delete/inline-delete-type.ts",
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "The styling for inline delete components which are used in card components.",
            "kind": "enum-member",
            "name": "Card",
            "type": "\"card\""
          },
          {
            "description": "The standard styling for inline deletes.",
            "kind": "enum-member",
            "name": "Standard",
            "type": "\"standard\""
          }
        ],
        "name": "SkyInlineDeleteType"
      },
      {
        "anchorId": "class_sky-inline-delete-component",
        "children": [
          {
            "description": "Whether the deletion is pending.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "pending",
            "type": "undefined | boolean"
          },
          {
            "description": "Fires when users click the cancel button.",
            "kind": "directive-output",
            "name": "cancelTriggered",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when users click the delete button.",
            "kind": "directive-output",
            "name": "deleteTriggered",
            "type": "EventEmitter<void>"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/inline-delete/inline-delete.component.ts",
        "kind": "component",
        "name": "SkyInlineDeleteComponent",
        "selector": "sky-inline-delete"
      },
      {
        "anchorId": "class_sky-inline-delete-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInlineDeleteModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/inline-delete/inline-delete.module.ts",
        "kind": "module",
        "name": "SkyInlineDeleteModule"
      },
      {
        "anchorId": "class_sky-page-summary-alert-component",
        "description": "Displays messages that require immediate attention as [alerts](https://developer.blackbaud.com/skyux/components/alert) within the page summary.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary-alert.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummaryAlertComponent",
        "selector": "sky-page-summary-alert"
      },
      {
        "anchorId": "class_sky-page-summary-content-component",
        "description": "Displays content in the arbitrary section of the page summary.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary-content.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummaryContentComponent",
        "selector": "sky-page-summary-content"
      },
      {
        "anchorId": "class_sky-page-summary-image-component",
        "description": "Displays an image in the page summary to identify a record or help users complete a core task.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary-image.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummaryImageComponent",
        "selector": "sky-page-summary-image"
      },
      {
        "anchorId": "class_sky-page-summary-key-info-component",
        "description": "Highlights important information about a page in the key information section of the page summary.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary-key-info.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummaryKeyInfoComponent",
        "selector": "sky-page-summary-key-info"
      },
      {
        "anchorId": "class_sky-page-summary-status-component",
        "description": "Displays [labels](https://developer.blackbaud.com/skyux/components/label) to highlight important status information about a page's content.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary-status.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummaryStatusComponent",
        "selector": "sky-page-summary-status"
      },
      {
        "anchorId": "class_sky-page-summary-subtitle-component",
        "description": "Specifies a subtitle to identify the page content.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary-subtitle.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummarySubtitleComponent",
        "selector": "sky-page-summary-subtitle"
      },
      {
        "anchorId": "class_sky-page-summary-title-component",
        "description": "Specifies a title to identify the page content.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary-title.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummaryTitleComponent",
        "selector": "sky-page-summary-title"
      },
      {
        "anchorId": "class_sky-page-summary-component",
        "deprecationReason": "`SkyPageSummaryComponent` is deprecated. For page templates and techniques to summarize page content, see the page design guidelines. For more information, see https://developer.blackbaud.com/skyux/design/guidelines/page-layouts.",
        "description": "Specifies the components to display in the page summary.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageSummaryComponent",
        "selector": "sky-page-summary"
      },
      {
        "anchorId": "class_sky-page-summary-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPageSummaryModule"
          }
        ],
        "deprecationReason": "`SkyPageSummaryModule` is deprecated. For page templates and techniques to summarize page content, see the page design guidelines. For more information, see https://developer.blackbaud.com/skyux/design/guidelines/page-layouts.",
        "filePath": "libs/components/layout/src/lib/modules/page-summary/page-summary.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyPageSummaryModule"
      },
      {
        "anchorId": "type-alias_sky-page-layout-type",
        "deprecationReason": "Use `SkyPageLayoutType` in `@skyux/pages` instead.",
        "filePath": "libs/components/layout/src/lib/modules/page/page-layout-type.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "SkyPageLayoutType",
        "type": "\"auto\" | \"fit\""
      },
      {
        "anchorId": "class_sky-page-component",
        "children": [
          {
            "description": "The page layout. Use `auto` to allow the page contents to expand beyond the bottom of the browser window. Use `fit` to constrain the page contents to the available viewport.",
            "kind": "directive-input",
            "name": "layout",
            "type": "SkyPageLayoutType"
          }
        ],
        "deprecationReason": "Use the `sky-page` component in `@skyux/pages` instead.",
        "description": "Displays page contents using the specified layout.",
        "filePath": "libs/components/layout/src/lib/modules/page/page.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyPageComponent",
        "selector": "sky-page"
      },
      {
        "anchorId": "class_sky-page-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPageModule"
          }
        ],
        "deprecationReason": "Use the SkyPageModule in `@skyux/pages` instead.",
        "filePath": "libs/components/layout/src/lib/modules/page/page.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyPageModule"
      },
      {
        "anchorId": "class_sky-text-expand-repeater-component",
        "children": [
          {
            "description": "The template for items in the list.",
            "kind": "directive-input",
            "name": "itemTemplate",
            "type": "undefined | TemplateRef<unknown>"
          },
          {
            "description": "The style of bullet to use",
            "defaultValue": "\"unordered\"",
            "kind": "directive-input",
            "name": "listStyle",
            "type": "undefined | SkyTextExpandRepeaterListStyleType"
          },
          {
            "description": "The data to truncate.",
            "kind": "directive-input",
            "name": "data",
            "type": "undefined | any[]"
          },
          {
            "description": "The number of items to display before truncating the list. If not supplied, all items are shown.",
            "kind": "directive-input",
            "name": "maxItems",
            "type": "undefined | number"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/text-expand-repeater/text-expand-repeater.component.ts",
        "kind": "component",
        "name": "SkyTextExpandRepeaterComponent",
        "selector": "sky-text-expand-repeater"
      },
      {
        "anchorId": "class_sky-text-expand-repeater-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTextExpandRepeaterModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/text-expand-repeater/text-expand-repeater.module.ts",
        "kind": "module",
        "name": "SkyTextExpandRepeaterModule"
      },
      {
        "anchorId": "type-alias_sky-text-expand-repeater-list-style-type",
        "filePath": "libs/components/layout/src/lib/modules/text-expand-repeater/types/text-expand-repeater-list-style-type.ts",
        "kind": "type-alias",
        "name": "SkyTextExpandRepeaterListStyleType",
        "type": "\"unordered\" | \"ordered\" | \"unstyled\""
      },
      {
        "anchorId": "class_sky-text-expand-component",
        "children": [
          {
            "description": "The title to display when the component expands the full text in a modal.",
            "defaultValue": "\"Expanded view\"",
            "kind": "directive-input",
            "name": "expandModalTitle",
            "type": "undefined | string"
          },
          {
            "description": "Whether to replace newline characters in truncated text with spaces.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "truncateNewlines",
            "type": "boolean"
          },
          {
            "description": "The maximum number of text characters to display inline when users select the link to expand the full text. If the text exceeds this limit, then the component expands the full text in a modal instead.",
            "defaultValue": "600",
            "kind": "directive-input",
            "name": "maxExpandedLength",
            "type": "number"
          },
          {
            "description": "The maximum number of newline characters to display inline when users select the link to expand the full text. If the text exceeds this limit, then the component expands the full text in a modal view instead.",
            "defaultValue": "2",
            "kind": "directive-input",
            "name": "maxExpandedNewlines",
            "type": "number"
          },
          {
            "description": "The number of text characters to display before truncating the text. To avoid truncating text in the middle of a word, the component looks for a space in the 10 characters before the last character.",
            "defaultValue": "200",
            "kind": "directive-input",
            "name": "maxLength",
            "type": "number"
          },
          {
            "description": "The text to truncate.",
            "kind": "directive-input",
            "name": "text",
            "type": "string"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/text-expand/text-expand.component.ts",
        "kind": "component",
        "name": "SkyTextExpandComponent",
        "selector": "sky-text-expand"
      },
      {
        "anchorId": "class_sky-text-expand-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTextExpandModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/text-expand/text-expand.module.ts",
        "kind": "module",
        "name": "SkyTextExpandModule"
      },
      {
        "anchorId": "class_sky-toolbar-item-component",
        "description": "Specifies a container for an item in the toolbar.",
        "filePath": "libs/components/layout/src/lib/modules/toolbar/toolbar-item.component.ts",
        "kind": "component",
        "name": "SkyToolbarItemComponent",
        "selector": "sky-toolbar-item"
      },
      {
        "anchorId": "class_sky-toolbar-section-component",
        "description": "Specifies a section to group items within the toolbar. The section displays items in a separate horizontal row.",
        "filePath": "libs/components/layout/src/lib/modules/toolbar/toolbar-section.component.ts",
        "kind": "component",
        "name": "SkyToolbarSectionComponent",
        "selector": "sky-toolbar-section"
      },
      {
        "anchorId": "class_sky-toolbar-view-actions-component",
        "description": "Adds a section on the right side of the toolbar for items that substantially alter the view of the content container. This includes simple filters and view switchers.",
        "filePath": "libs/components/layout/src/lib/modules/toolbar/toolbar-view-actions.component.ts",
        "kind": "component",
        "name": "SkyToolbarViewActionsComponent",
        "selector": "sky-toolbar-view-actions"
      },
      {
        "anchorId": "class_sky-toolbar-component",
        "children": [
          {
            "description": "A descriptor for the items that the toolbar manipulates. Use a plural term. The descriptor helps set the toolbar's `aria-label` attributes for search inputs, sort buttons, and filter buttons to provide text equivalents for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility). For example, when the descriptor is \"constituents,\" the search input's `aria-label` is \"Search constituents.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "listDescriptor",
            "type": "void"
          }
        ],
        "description": "Displays actions for lists, records, and tiles.",
        "filePath": "libs/components/layout/src/lib/modules/toolbar/toolbar.component.ts",
        "kind": "component",
        "name": "SkyToolbarComponent",
        "selector": "sky-toolbar"
      },
      {
        "anchorId": "class_sky-toolbar-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToolbarModule"
          }
        ],
        "filePath": "libs/components/layout/src/lib/modules/toolbar/toolbar.module.ts",
        "kind": "module",
        "name": "SkyToolbarModule"
      }
    ],
    "@skyux/layout/testing": [
      {
        "anchorId": "class_sky-action-button-fixture",
        "children": [
          {
            "description": "Clicks the action button.",
            "kind": "class-method",
            "name": "actionClick",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyActionButtonFixture"
          },
          {
            "description": "The action button's current details text.",
            "kind": "class-property",
            "name": "detailsText",
            "type": "undefined | string"
          },
          {
            "description": "The action button's current header text.",
            "kind": "class-property",
            "name": "headerText",
            "type": "undefined | string"
          },
          {
            "description": "The action button's current icon type.",
            "kind": "class-property",
            "name": "iconType",
            "type": "undefined | string"
          },
          {
            "description": "Clicks the action button.",
            "kind": "class-property",
            "name": "actionClick",
            "type": "void"
          }
        ],
        "description": "Allows interaction with a SKY UX action button component.",
        "filePath": "libs/components/layout/testing/src/legacy/action-button-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyActionButtonFixture"
      },
      {
        "anchorId": "class_sky-card-fixture",
        "children": [
          {
            "description": "Deselects the card.",
            "kind": "class-method",
            "name": "deselect",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Selects the card.",
            "kind": "class-method",
            "name": "select",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCardFixture"
          },
          {
            "description": "The card's current content text.",
            "kind": "class-property",
            "name": "contentText",
            "type": "undefined | string"
          },
          {
            "description": "A flag indicating whether the user can select the card.",
            "kind": "class-property",
            "name": "selectable",
            "type": "boolean"
          },
          {
            "description": "A flag indicating whether the card is currently selected.  If the card is not selectable, an error is thrown.",
            "kind": "class-property",
            "name": "selected",
            "type": "boolean"
          },
          {
            "description": "The card's current title.",
            "kind": "class-property",
            "name": "titleText",
            "type": "undefined | string"
          },
          {
            "description": "Deselects the card.",
            "kind": "class-property",
            "name": "deselect",
            "type": "void"
          },
          {
            "description": "Selects the card.",
            "kind": "class-property",
            "name": "select",
            "type": "void"
          }
        ],
        "description": "Allows interaction with a SKY UX avatar component.",
        "filePath": "libs/components/layout/testing/src/legacy/card-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyCardFixture"
      },
      {
        "anchorId": "class_sky-page-summary-fixture",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPageSummaryFixture"
          },
          {
            "description": "The page summary's current content text.",
            "kind": "class-property",
            "name": "contentText",
            "type": "undefined | string"
          },
          {
            "description": "The page summary's current subtitle text.",
            "kind": "class-property",
            "name": "subtitleText",
            "type": "undefined | string"
          },
          {
            "description": "The page summary's current title text.",
            "kind": "class-property",
            "name": "titleText",
            "type": "undefined | string"
          }
        ],
        "description": "Allows interaction with a SKY UX page summary component.",
        "filePath": "libs/components/layout/testing/src/legacy/page-summary-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyPageSummaryFixture"
      },
      {
        "anchorId": "interface_sky-box-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyBoxHarness` instances.",
        "filePath": "libs/components/layout/testing/src/modules/box/box-harness.filters.ts",
        "kind": "interface",
        "name": "SkyBoxHarnessFilters"
      },
      {
        "anchorId": "class_sky-box-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the aria-label property of the box",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the aria-labelledby property of the box",
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the aria-role property of the box",
            "kind": "class-method",
            "name": "getAriaRole",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-method",
            "name": "getHeadingHidden",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the checkbox group. Returns undefined if heading level is not set.",
            "kind": "class-method",
            "name": "getHeadingLevel",
            "parameters": [],
            "type": "Promise<undefined | SkyBoxHeadingLevel>"
          },
          {
            "description": "The heading style used for the checkbox group.",
            "kind": "class-method",
            "name": "getHeadingStyle",
            "parameters": [],
            "type": "Promise<SkyBoxHeadingStyle>"
          },
          {
            "description": "Gets the box's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-method",
            "name": "getHeadingText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyBoxHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyBoxHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyBoxHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyBoxHarness"
          },
          {
            "defaultValue": "'sky-box'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the aria-label property of the box",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the aria-labelledby property of the box",
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the aria-role property of the box",
            "kind": "class-property",
            "name": "getAriaRole",
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-property",
            "name": "getHeadingHidden",
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the checkbox group. Returns undefined if heading level is not set.",
            "kind": "class-property",
            "name": "getHeadingLevel",
            "type": "Promise<undefined | SkyBoxHeadingLevel>"
          },
          {
            "description": "The heading style used for the checkbox group.",
            "kind": "class-property",
            "name": "getHeadingStyle",
            "type": "Promise<SkyBoxHeadingStyle>"
          },
          {
            "description": "Gets the box's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-property",
            "name": "getHeadingText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyBoxHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyBoxHarness>"
          }
        ],
        "filePath": "libs/components/layout/testing/src/modules/box/box-harness.ts",
        "kind": "class",
        "name": "SkyBoxHarness"
      },
      {
        "anchorId": "interface_sky-column-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyColumnHarness` instances.",
        "filePath": "libs/components/layout/testing/src/modules/fluid-grid/column-harness-filters.ts",
        "kind": "interface",
        "name": "SkyColumnHarnessFilters"
      },
      {
        "anchorId": "class_sky-column-harness",
        "children": [
          {
            "description": "Gets the size of the column in a Large responsive context.",
            "kind": "class-method",
            "name": "getLargeSize",
            "parameters": [],
            "type": "Promise<number>"
          },
          {
            "description": "Gets the size of the column in a Medium responsive context.",
            "kind": "class-method",
            "name": "getMediumSize",
            "parameters": [],
            "type": "Promise<number>"
          },
          {
            "description": "Gets the size of the column in a Small responsive context.",
            "kind": "class-method",
            "name": "getSmallSize",
            "parameters": [],
            "type": "Promise<number>"
          },
          {
            "description": "Gets the size of the column in an XSmall responsive context.",
            "kind": "class-method",
            "name": "getXSmallSize",
            "parameters": [],
            "type": "Promise<number>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyColumnHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyColumnHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyColumnHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyColumnHarness"
          },
          {
            "defaultValue": "'sky-column'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the size of the column in a Large responsive context.",
            "kind": "class-property",
            "name": "getLargeSize",
            "type": "Promise<number>"
          },
          {
            "description": "Gets the size of the column in a Medium responsive context.",
            "kind": "class-property",
            "name": "getMediumSize",
            "type": "Promise<number>"
          },
          {
            "description": "Gets the size of the column in a Small responsive context.",
            "kind": "class-property",
            "name": "getSmallSize",
            "type": "Promise<number>"
          },
          {
            "description": "Gets the size of the column in an XSmall responsive context.",
            "kind": "class-property",
            "name": "getXSmallSize",
            "type": "Promise<number>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyColumnHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyColumnHarness>"
          }
        ],
        "description": "Harness for interacting with a fluid grid column component in tests.",
        "filePath": "libs/components/layout/testing/src/modules/fluid-grid/column-harness.ts",
        "kind": "class",
        "name": "SkyColumnHarness"
      },
      {
        "anchorId": "interface_sky-fluid-grid-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyFluidGridHarness` instances.",
        "filePath": "libs/components/layout/testing/src/modules/fluid-grid/fluid-grid-harness-filters.ts",
        "kind": "interface",
        "name": "SkyFluidGridHarnessFilters"
      },
      {
        "anchorId": "class_sky-fluid-grid-harness",
        "children": [
          {
            "description": "Gets the gutter size for the grid.",
            "kind": "class-method",
            "name": "getGutterSize",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets all of the rows in the grid.",
            "kind": "class-method",
            "name": "getRows",
            "parameters": [],
            "type": "Promise<SkyRowHarness[]>"
          },
          {
            "description": "Whether the fluid grid has margin enabled.",
            "kind": "class-method",
            "name": "hasMargin",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFluidGridHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyFluidGridHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyFluidGridHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFluidGridHarness"
          },
          {
            "defaultValue": "'sky-fluid-grid'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the gutter size for the grid.",
            "kind": "class-property",
            "name": "getGutterSize",
            "type": "Promise<string>"
          },
          {
            "description": "Gets all of the rows in the grid.",
            "kind": "class-property",
            "name": "getRows",
            "type": "Promise<SkyRowHarness[]>"
          },
          {
            "description": "Whether the fluid grid has margin enabled.",
            "kind": "class-property",
            "name": "hasMargin",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFluidGridHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyFluidGridHarness>"
          }
        ],
        "description": "Harness for interacting with a fluid grid component in tests.",
        "filePath": "libs/components/layout/testing/src/modules/fluid-grid/fluid-grid-harness.ts",
        "kind": "class",
        "name": "SkyFluidGridHarness"
      },
      {
        "anchorId": "interface_sky-row-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyRowHarness` instances.",
        "filePath": "libs/components/layout/testing/src/modules/fluid-grid/row-harness-filters.ts",
        "kind": "interface",
        "name": "SkyRowHarnessFilters"
      },
      {
        "anchorId": "class_sky-row-harness",
        "children": [
          {
            "description": "Gets the ordering of the columns in the row.",
            "kind": "class-method",
            "name": "getColumnOrder",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets all of the columns in the row.",
            "kind": "class-method",
            "name": "getColumns",
            "parameters": [],
            "type": "Promise<SkyColumnHarness[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRowHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyRowHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyRowHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRowHarness"
          },
          {
            "defaultValue": "'sky-row'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the ordering of the columns in the row.",
            "kind": "class-property",
            "name": "getColumnOrder",
            "type": "Promise<string>"
          },
          {
            "description": "Gets all of the columns in the row.",
            "kind": "class-property",
            "name": "getColumns",
            "type": "Promise<SkyColumnHarness[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRowHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyRowHarness>"
          }
        ],
        "description": "Harness for interacting with a fluid grid column component in tests.",
        "filePath": "libs/components/layout/testing/src/modules/fluid-grid/row-harness.ts",
        "kind": "class",
        "name": "SkyRowHarness"
      }
    ],
    "@skyux/lookup": [
      {
        "anchorId": "class_sky-autocomplete-input-directive",
        "children": [
          {
            "deprecationReason": "SKY UX only supports browser autofill on components where the direct input matches the return value. This input may not behave as expected due to the dropdown selection interaction.",
            "description": "The value for the `autocomplete` attribute on the form input.",
            "defaultValue": "\"off\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "autocompleteAttribute",
            "type": "string"
          },
          {
            "description": "Whether to disable the autocomplete field on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/autocomplete-input.directive.ts",
        "kind": "directive",
        "name": "SkyAutocompleteInputDirective",
        "selector": "input[skyAutocomplete], textarea[skyAutocomplete]"
      },
      {
        "anchorId": "class_sky-autocomplete-component",
        "children": [
          {
            "description": "The HTML element ID of the element that labels the autocomplete text input. This sets the input's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "The text to display when no search results are found.",
            "defaultValue": "\"No matches found\"",
            "kind": "directive-input",
            "name": "noResultsFoundText",
            "type": "undefined | string"
          },
          {
            "description": "Allows async search to be disabled even when a listener is specified for the `searchAsync` output.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "searchAsyncDisabled",
            "type": "undefined | boolean"
          },
          {
            "description": "The template that formats each search result in the dropdown list. The autocomplete component injects search result values into the template as `item` variables that reference all of the object properties of the search results.",
            "kind": "directive-input",
            "name": "searchResultTemplate",
            "type": "undefined | TemplateRef<unknown>"
          },
          {
            "kind": "directive-input",
            "name": "wrapperClass",
            "type": "undefined | string"
          },
          {
            "description": "The static data source for the autocomplete component to search when users enter text. For a dynamic data source such as an array that changes due to server calls, use `search` or `searchAsync` instead.",
            "kind": "directive-input",
            "name": "data",
            "type": "any[]"
          },
          {
            "description": "How many milliseconds to wait before searching while users enter text in the autocomplete field.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "debounceTime",
            "type": "number"
          },
          {
            "description": "The object property to display in the text input after users select an item in the dropdown list.",
            "defaultValue": "\"name\"",
            "kind": "directive-input",
            "name": "descriptorProperty",
            "type": "string"
          },
          {
            "description": "Whether to display a button in the dropdown that opens a picker where users can view all options.",
            "kind": "directive-input",
            "name": "enableShowMore",
            "type": "boolean"
          },
          {
            "description": "The observable of `SkyAutocompleteMessage` that can close the dropdown.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkyAutocompleteMessage>"
          },
          {
            "deprecationReason": "We recommend against using this property. To search specific properties, use the `searchAsync` event instead.",
            "description": "The object properties to search.",
            "defaultValue": "[\"name\"]",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "propertiesToSearch",
            "type": "string[]"
          },
          {
            "deprecationReason": "We recommend against using this property. To call a remote data source, use the `searchAsync` event instead.",
            "description": "The function that dynamically manages the data source when users change the text in the autocomplete field. The search function must return an array or a promise of an array. The `search` property is particularly useful when the data source does not live in the source code.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "search",
            "type": "undefined | SkyAutocompleteSearchFunction"
          },
          {
            "deprecationReason": "We recommend against using this property. To filter results, use the `searchAsync` event instead.",
            "description": "The array of functions to call against each search result in order to filter the search results when using the default search function. When using the `search` property to specify a custom search function, you must manually apply filters inside that function. The function must return `true` or `false` for each result to indicate whether to display it in the dropdown list.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "searchFilters",
            "type": "undefined | SkyAutocompleteSearchFunctionFilter[]"
          },
          {
            "description": "The maximum number of search results to display in the dropdown list. By default, the component displays all matching results.",
            "kind": "directive-input",
            "name": "searchResultsLimit",
            "type": "number"
          },
          {
            "description": "The minimum number of characters that users must enter before the autocomplete component searches the data source and displays search results in the dropdown list.",
            "defaultValue": "1",
            "kind": "directive-input",
            "name": "searchTextMinimumCharacters",
            "type": "number"
          },
          {
            "description": "Whether to display a button that lets users add options to the data source.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showAddButton",
            "type": "boolean"
          },
          {
            "description": "Fires when users select the button to add options to the data source.",
            "kind": "directive-output",
            "name": "addClick",
            "type": "EventEmitter<void>"
          },
          {
            "kind": "directive-output",
            "name": "openChange",
            "type": "EventEmitter<boolean>"
          },
          {
            "description": "Fires when users enter new search information and allows results to be returned via an observable.",
            "kind": "directive-output",
            "name": "searchAsync",
            "type": "EventEmitter<SkyAutocompleteSearchAsyncArgs>"
          },
          {
            "description": "Fires when users select items in the dropdown list.",
            "kind": "directive-output",
            "name": "selectionChange",
            "type": "EventEmitter<SkyAutocompleteSelectionChange>"
          },
          {
            "description": "Fires when users select the button to view all options.",
            "kind": "directive-output",
            "name": "showMoreClick",
            "type": "EventEmitter<SkyAutocompleteShowMoreArgs>"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/autocomplete.component.ts",
        "kind": "component",
        "name": "SkyAutocompleteComponent",
        "selector": "sky-autocomplete"
      },
      {
        "anchorId": "class_sky-autocomplete-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAutocompleteModule"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/autocomplete.module.ts",
        "kind": "module",
        "name": "SkyAutocompleteModule"
      },
      {
        "anchorId": "interface_sky-autocomplete-default-search-function-options",
        "children": [
          {
            "kind": "interface-property",
            "name": "propertiesToSearch",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchFilters",
            "type": "SkyAutocompleteSearchFunctionFilter[]"
          },
          {
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "searchResultsLimit",
            "type": "number"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-default-search-function-options.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyAutocompleteDefaultSearchFunctionOptions"
      },
      {
        "anchorId": "interface_sky-autocomplete-input-text-change",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "value",
            "type": "string"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-input-text-change.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyAutocompleteInputTextChange"
      },
      {
        "anchorId": "interface_sky-autocomplete-search-args",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "context",
            "type": "SkyAutocompleteSearchContext"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-args.ts",
        "kind": "interface",
        "name": "SkyAutocompleteSearchArgs"
      },
      {
        "anchorId": "interface_sky-autocomplete-search-async-args",
        "children": [
          {
            "description": "A continuation token which can be set and then will be passed back with any future searches. This is helpful for applications which utilize a token instead of an offset when fetching data.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "continuationData",
            "type": "unknown"
          },
          {
            "description": "How the search results will be displayed. Use this value to determine how many results to return.",
            "kind": "interface-property",
            "name": "displayType",
            "type": "AutocompleteSearchAsyncResultDisplayType"
          },
          {
            "description": "The offset index of the first result to return. When search is executed as a result of an infinite scroll event, for example, offset will be set to the number of items already displayed.",
            "kind": "interface-property",
            "name": "offset",
            "type": "number"
          },
          {
            "description": "An Observable representing the search results. Consumers should set this when the event fires so the autocomplete or lookup component can subscribe to it and then display the results.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "result",
            "type": "Observable<SkyAutocompleteSearchAsyncResult>"
          },
          {
            "description": "The search text entered by the user.",
            "kind": "interface-property",
            "name": "searchText",
            "type": "string"
          }
        ],
        "description": "Arguments passed when an asynchronous search is executed from the autocomplete or lookup component.",
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-async-args.ts",
        "kind": "interface",
        "name": "SkyAutocompleteSearchAsyncArgs"
      },
      {
        "anchorId": "type-alias_autocomplete-search-async-result-display-type",
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-async-result-display-type.ts",
        "kind": "type-alias",
        "name": "AutocompleteSearchAsyncResultDisplayType",
        "type": "\"popover\" | \"modal\""
      },
      {
        "anchorId": "interface_sky-autocomplete-search-async-result",
        "children": [
          {
            "description": "Data provided on \"load more\" search result requests. Use this property for information such as a continuation token for paged database queries.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "continuationData",
            "type": "unknown"
          },
          {
            "description": "Whether there are more results that match the search criteria.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "hasMore",
            "type": "boolean"
          },
          {
            "description": "A list of items matching the search criteria. When there are more items that match the search criteria, set the `hasMore` property to `true` more records can be lazy-loaded as the user scrolls through the search results.",
            "kind": "interface-property",
            "name": "items",
            "type": "unknown[]"
          },
          {
            "description": "The total number of records that match the search criteria, including items not returned in the current list of items.",
            "kind": "interface-property",
            "name": "totalCount",
            "type": "number"
          }
        ],
        "description": "The result of searching for items to display in an autocomplete or lookup field.",
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-async-result.ts",
        "kind": "interface",
        "name": "SkyAutocompleteSearchAsyncResult"
      },
      {
        "anchorId": "type-alias_sky-autocomplete-search-context",
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-context.ts",
        "kind": "type-alias",
        "name": "SkyAutocompleteSearchContext",
        "type": "\"popover\" | \"modal\""
      },
      {
        "anchorId": "type-alias_sky-autocomplete-search-function-filter",
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-function-filter.ts",
        "kind": "type-alias",
        "name": "SkyAutocompleteSearchFunctionFilter",
        "type": "Function"
      },
      {
        "anchorId": "type-alias_sky-autocomplete-search-function-response",
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-function-response.ts",
        "kind": "type-alias",
        "name": "SkyAutocompleteSearchFunctionResponse",
        "type": "any[] | Promise<any[]>"
      },
      {
        "anchorId": "type-alias_sky-autocomplete-search-function",
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-search-function.ts",
        "kind": "type-alias",
        "name": "SkyAutocompleteSearchFunction",
        "type": "Function"
      },
      {
        "anchorId": "interface_sky-autocomplete-selection-change",
        "children": [
          {
            "description": "The search result object that users select in the dropdown list.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectedItem",
            "type": "any"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/autocomplete/types/autocomplete-selection-change.ts",
        "kind": "interface",
        "name": "SkyAutocompleteSelectionChange"
      },
      {
        "anchorId": "class_sky-country-field-component",
        "children": [
          {
            "deprecationReason": "SKY UX only supports browser autofill on components where the direct input matches the return value. This input may not behave as expected due to the dropdown selection interaction.",
            "description": "The value for the HTML `autocomplete` attribute on the form input.",
            "defaultValue": "'off'",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "autocompleteAttribute",
            "type": "undefined | string"
          },
          {
            "description": "The [International Organization for Standardization Alpha 2](https://www.nationsonline.org/oneworld/country_code_list.htm) country code for the default country. When search results include the default country, it appears at the top of the list.",
            "defaultValue": "\"us\"",
            "kind": "directive-input",
            "name": "defaultCountry",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the country field on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Whether to hide the flag in the input element.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "hideSelectedCountryFlag",
            "type": "boolean"
          },
          {
            "description": "Whether to include phone information in the selected country and country dropdown.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "includePhoneInfo",
            "type": "boolean"
          },
          {
            "description": "The [International Organization for Standardization Alpha 2](https://www.nationsonline.org/oneworld/country_code_list.htm) country codes for the countries that users can select. By default, all countries are available.",
            "kind": "directive-input",
            "name": "supportedCountryISOs",
            "type": "string[]"
          },
          {
            "description": "Fires when the selected country changes.",
            "kind": "directive-output",
            "name": "selectedCountryChange",
            "type": "EventEmitter<SkyCountryFieldCountry>"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/country-field/country-field.component.ts",
        "kind": "component",
        "name": "SkyCountryFieldComponent",
        "selector": "sky-country-field"
      },
      {
        "anchorId": "class_sky-country-field-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCountryFieldModule"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/country-field/country-field.module.ts",
        "kind": "module",
        "name": "SkyCountryFieldModule"
      },
      {
        "anchorId": "variable_sky-country-field-context",
        "filePath": "libs/components/lookup/src/lib/modules/country-field/types/country-field-context-token.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "SKY_COUNTRY_FIELD_CONTEXT",
        "type": "InjectionToken<SkyCountryFieldContext>"
      },
      {
        "anchorId": "interface_sky-country-field-context",
        "children": [
          {
            "kind": "interface-property",
            "name": "showPlaceholderText",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/country-field/types/country-field-context.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyCountryFieldContext"
      },
      {
        "anchorId": "interface_sky-country-field-country",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "areaCodes",
            "type": "string[]"
          },
          {
            "description": "The country's international dial code. This property will only be set if the `includePhoneInfo` input is set.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "dialCode",
            "type": "string"
          },
          {
            "description": "The [International Organization for Standardization Alpha 2](https://www.nationsonline.org/oneworld/country_code_list.htm) country code for the country.",
            "kind": "interface-property",
            "name": "iso2",
            "type": "string"
          },
          {
            "description": "The name of the country.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "name",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "priority",
            "type": "number"
          }
        ],
        "description": "Represents the data for a given country.",
        "filePath": "libs/components/lookup/src/lib/modules/country-field/types/country.ts",
        "kind": "interface",
        "name": "SkyCountryFieldCountry"
      },
      {
        "anchorId": "class_sky-lookup-component",
        "children": [
          {
            "deprecationReason": "Use the input box `labelText` input instead.",
            "description": "The ARIA label for the typeahead search input. This sets the input's `aria-label` attribute to provide a text equivalent for [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the input includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Use the input box `labelText` input instead.",
            "description": "The HTML element ID of the element that labels the typeahead search input. This sets the input's `aria-labelledby` attribute to provide a text equivalent for [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the input does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "SKY UX only supports browser autofill on components where the direct input matches the return value. This input may not behave as expected due to the dropdown selection interaction.",
            "description": "The value for the `autocomplete` attribute on the form input.",
            "defaultValue": "'off'",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "autocompleteAttribute",
            "type": "undefined | string"
          },
          {
            "description": "How many milliseconds to wait before searching while users enter text in the lookup field.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "debounceTime",
            "type": "undefined | number"
          },
          {
            "description": "The object property that represents the object's unique identifier. Specifying this property enables token animations and more efficient rendering. This property is required when using `enableShowMore` and `searchAsync` together.",
            "kind": "directive-input",
            "name": "idProperty",
            "type": "undefined | string"
          },
          {
            "description": "Placeholder text to display in the lookup field.",
            "kind": "directive-input",
            "name": "placeholderText",
            "type": "undefined | string"
          },
          {
            "description": "The maximum number of search results to display in the dropdown list. By default, the lookup component displays all matching results. This property has no effect on the results in the \"Show more\" picker.",
            "kind": "directive-input",
            "name": "searchResultsLimit",
            "type": "undefined | number"
          },
          {
            "description": "The template that formats each option in the dropdown list. The lookup component injects values into the template as `item` variables that reference all the object properties of the options.",
            "kind": "directive-input",
            "name": "searchResultTemplate",
            "type": "undefined | TemplateRef<unknown>"
          },
          {
            "description": "The minimum number of characters that users must enter before the lookup component searches the data source and displays search results in the dropdown list.",
            "defaultValue": "1",
            "kind": "directive-input",
            "name": "searchTextMinimumCharacters",
            "type": "undefined | number"
          },
          {
            "description": "Configuration options for the picker that displays all options.",
            "kind": "directive-input",
            "name": "showMoreConfig",
            "type": "undefined | SkyLookupShowMoreConfig"
          },
          {
            "kind": "directive-input",
            "name": "wrapperClass",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Use the `searchAsync` event emitter and callback instead to provide data to the lookup component.",
            "description": "The data source for the lookup component to search when users enter text. You can specify static data such as an array of objects, or you can pull data from a database.",
            "defaultValue": "[]",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "data",
            "type": "any[]"
          },
          {
            "description": "The object property to display in the text input after users select an item in the dropdown list.",
            "defaultValue": "\"name\"",
            "kind": "directive-input",
            "name": "descriptorProperty",
            "type": "string"
          },
          {
            "description": "Whether to disable the lookup field on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "Whether to enable users to open a picker where they can view all options.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "enableShowMore",
            "type": "boolean"
          },
          {
            "deprecationReason": "Use the `searchAsync` event emitter and callback instead to provide data to the lookup component.",
            "description": "The array of object properties to search when utilizing the `data` property and the built-in search function.",
            "defaultValue": "[\"name\"]",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "propertiesToSearch",
            "type": "string[]"
          },
          {
            "description": "Whether the lookup field is required.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "required",
            "type": "boolean"
          },
          {
            "deprecationReason": "Use the `searchAsync` event emitter and callback instead to provide searched data to the lookup component.",
            "description": "The function to dynamically manage the data source when users change the text in the lookup field. The search function must return an array or a promise of an array. The `search` property is particularly useful when the data source does not live in the source code.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "search",
            "type": "undefined | SkyAutocompleteSearchFunction"
          },
          {
            "deprecationReason": "Use the `searchAsync` event emitter and callback instead to provide searched data to the lookup component.",
            "description": "The array of functions to call against each search result in order to filter the search results when using the `data` input and the default search function. When using a custom search function via the `search` property filters must be applied manually inside that function. The function must return `true` or `false` for each result to indicate whether to display it in the dropdown list.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "searchFilters",
            "type": "undefined | SkyAutocompleteSearchFunctionFilter[]"
          },
          {
            "description": "The ability for users to select one option or multiple options.",
            "defaultValue": "\"multiple\"",
            "kind": "directive-input",
            "name": "selectMode",
            "type": "SkyLookupSelectModeType"
          },
          {
            "description": "Whether to display a button that lets users add options to the list.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showAddButton",
            "type": "boolean"
          },
          {
            "description": "Fires when users select the button to add options to the list.",
            "kind": "directive-output",
            "name": "addClick",
            "type": "EventEmitter<SkyLookupAddClickEventArgs>"
          },
          {
            "kind": "directive-output",
            "name": "openChange",
            "type": "EventEmitter<boolean>"
          },
          {
            "description": "Fires when users enter new search information and allows results to be returned via an observable. The event is also fired with empty search text when the \"Show more\" picker is opened without search text.",
            "kind": "directive-output",
            "name": "searchAsync",
            "type": "EventEmitter<SkyAutocompleteSearchAsyncArgs>"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/lookup/lookup.component.ts",
        "kind": "component",
        "name": "SkyLookupComponent",
        "selector": "sky-lookup"
      },
      {
        "anchorId": "class_sky-lookup-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLookupModule"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/lookup/lookup.module.ts",
        "kind": "module",
        "name": "SkyLookupModule"
      },
      {
        "anchorId": "interface_sky-lookup-add-callback-args",
        "children": [
          {
            "description": "The new state of the data source for the lookup component to search when users enter text. If not specified, the component will use the current state of the lookup component's `data` input; however, if this is not yet updated the new item will not be automatically selected.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "any[]"
          },
          {
            "description": "The new item which has been added to the data. This item will be automatically selected.",
            "kind": "interface-property",
            "name": "item",
            "type": "any"
          }
        ],
        "description": "Specifies the information for the callback used when adding a new item to the lookup component.",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-add-click-callback-args.ts",
        "kind": "interface",
        "name": "SkyLookupAddCallbackArgs"
      },
      {
        "anchorId": "interface_sky-lookup-add-click-event-args",
        "children": [
          {
            "description": "A callback function for the consumer to use to notify the lookup that a new item has been added.",
            "kind": "interface-property",
            "name": "itemAdded",
            "type": "Function"
          }
        ],
        "description": "Specifies a callback function for the consumer to use to notify the lookup that a new item has been added.",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-add-click-event-args.ts",
        "kind": "interface",
        "name": "SkyLookupAddClickEventArgs"
      },
      {
        "anchorId": "type-alias_sky-lookup-select-mode-type",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-select-mode-type.ts",
        "kind": "type-alias",
        "name": "SkyLookupSelectModeType",
        "type": "\"single\" | \"multiple\""
      },
      {
        "anchorId": "enum_sky-lookup-select-mode",
        "deprecationReason": "Use `SkyLookupSelectModeType` instead.",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-select-mode.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "Allows users to select multiple items.",
            "kind": "enum-member",
            "name": "multiple",
            "type": "\"multiple\""
          },
          {
            "description": "Restricts users to a single selection.",
            "kind": "enum-member",
            "name": "single",
            "type": "\"single\""
          }
        ],
        "name": "SkyLookupSelectMode"
      },
      {
        "anchorId": "interface_sky-lookup-show-more-config",
        "children": [
          {
            "description": "The configuration object to display a custom picker.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "customPicker",
            "type": "SkyLookupShowMoreCustomPicker"
          },
          {
            "description": "Configuration options for the native picker.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "nativePickerConfig",
            "type": "SkyLookupShowMoreNativePickerConfig"
          }
        ],
        "description": "Specifies configuration options for the picker to display when users select the button to view all options. You can use a native, out-of-the-box modal picker, or you can create a custom picker. If you provide configuration options for both, the lookup component uses the custom configuration.",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-show-more-config.ts",
        "kind": "interface",
        "name": "SkyLookupShowMoreConfig"
      },
      {
        "anchorId": "class_sky-lookup-show-more-custom-picker-context",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLookupShowMoreCustomPickerContext"
          },
          {
            "description": "Search text to filter the contents of the custom picker.",
            "kind": "class-property",
            "name": "initialSearch",
            "type": "string"
          },
          {
            "description": "The current selections in the lookup field.",
            "kind": "class-property",
            "name": "initialValue",
            "type": "any"
          },
          {
            "description": "The options that users can select in the custom picker.",
            "kind": "class-property",
            "name": "items",
            "type": "any[]"
          }
        ],
        "description": "Specifies configuration options to launch a custom picker when users select the button to view all options.",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-show-more-custom-picker-context.ts",
        "kind": "class",
        "name": "SkyLookupShowMoreCustomPickerContext"
      },
      {
        "anchorId": "interface_sky-lookup-show-more-custom-picker",
        "children": [
          { "kind": "interface-property", "name": "open", "type": "Function" }
        ],
        "description": "Defines a custom picker to display when users select the button to view all options.",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-show-more-custom-picker.ts",
        "kind": "interface",
        "name": "SkyLookupShowMoreCustomPicker"
      },
      {
        "anchorId": "interface_sky-lookup-show-more-native-picker-config",
        "children": [
          {
            "description": "The template that formats each option in the picker. The lookup component injects values into the template as `item` variables that reference all the object properties of the options. If you do not specify a template, the picker uses the same template as the dropdown list.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "itemTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "description": "A descriptor for the item or items being selected. Use a plural term when the lookup's `selectMode` is set to `'multiple'`; otherwise, use a singular term. The descriptor helps set the picker's `aria-label` attributes for the multiselect toolbar controls, the search input, and the save button to provide text equivalents for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility). For example, when the descriptor is \"constituents,\" the search input's `aria-label` is \"Search constituents.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectionDescriptor",
            "type": "string"
          },
          {
            "deprecationReason": "Use the `selectionDescriptor` input to give context to the title and accessibility labels instead.",
            "description": "The title for the picker.",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "title",
            "type": "string"
          }
        ],
        "description": "Specifies configuration options to display the native picker when users select the button to view all options.",
        "filePath": "libs/components/lookup/src/lib/modules/lookup/types/lookup-show-more-native-picker-config.ts",
        "kind": "interface",
        "name": "SkyLookupShowMoreNativePickerConfig"
      },
      {
        "anchorId": "class_sky-search-component",
        "children": [
          {
            "description": "The ARIA label for the search input. This sets the search input's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). Use a context-sensitive label, such as \"Search constituents.\" Context is especially important when multiple search inputs are in close proximity. In toolbars, search inputs use the `listDescriptor` to provide context, and the ARIA label defaults to \"Search <listDescriptor>.\" If the box includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "The HTML element ID of the element that labels the search. This sets the search's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the box does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "Placeholder text to display in the search input until users enter search criteria.",
            "defaultValue": "\"Find in this list\"",
            "kind": "directive-input",
            "name": "placeholderText",
            "type": "undefined | string"
          },
          {
            "description": "Default search criteria for the input.",
            "kind": "directive-input",
            "name": "searchText",
            "type": "undefined | string"
          },
          {
            "description": "How many milliseconds to wait before searching after users enter text in the search input.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "debounceTime",
            "type": "number"
          },
          {
            "description": "Whether to disable the filter button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The expand mode for the search input. The valid options include `\"responsive\"` to collapse the search input into a button on mobile devices, `\"none\"` to *not* collapse the search input on mobile devices, and `\"fit\"` to extend the search input to fit the width of its container.",
            "defaultValue": "\"responsive\"",
            "kind": "directive-input",
            "name": "expandMode",
            "type": "string"
          },
          {
            "description": "Fires when the search text is applied.",
            "kind": "directive-output",
            "name": "searchApply",
            "type": "EventEmitter<string>"
          },
          {
            "description": "Fires when the search text is changed.",
            "kind": "directive-output",
            "name": "searchChange",
            "type": "EventEmitter<string>"
          },
          {
            "description": "Fires when the search text is cleared.",
            "kind": "directive-output",
            "name": "searchClear",
            "type": "EventEmitter<void>"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/search/search.component.ts",
        "kind": "component",
        "name": "SkySearchComponent",
        "selector": "sky-search"
      },
      {
        "anchorId": "class_sky-search-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySearchModule"
          }
        ],
        "filePath": "libs/components/lookup/src/lib/modules/search/search.module.ts",
        "kind": "module",
        "name": "SkySearchModule"
      },
      {
        "anchorId": "class_sky-selection-modal-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySelectionModalModule"
          }
        ],
        "deprecationReason": "The `SkySelectionModalModule` is no longer needed and can be removed from your application.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/selection-modal.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkySelectionModalModule"
      },
      {
        "anchorId": "class_sky-selection-modal-service",
        "children": [
          {
            "description": "Opens the selection modal.",
            "kind": "class-method",
            "name": "open",
            "parameters": [
              {
                "description": "Parameters for the selection modal.",
                "name": "args",
                "type": "SkySelectionModalOpenArgs"
              }
            ],
            "type": "SkySelectionModalInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySelectionModalService"
          },
          {
            "description": "Opens the selection modal.",
            "kind": "class-property",
            "name": "open",
            "type": "SkySelectionModalInstance"
          }
        ],
        "description": "Displays a modal for selecting one or more values.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/selection-modal.service.ts",
        "kind": "service",
        "name": "SkySelectionModalService"
      },
      {
        "anchorId": "interface_sky-selection-modal-add-callback-args",
        "children": [
          {
            "description": "The new item which has been added to the data. This item will be automatically selected.",
            "kind": "interface-property",
            "name": "item",
            "type": "any"
          }
        ],
        "description": "Specifies the information for the callback used when adding a new item to a selection modal instance.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/types/selection-modal-add-click-callback-args.ts",
        "kind": "interface",
        "name": "SkySelectionModalAddCallbackArgs"
      },
      {
        "anchorId": "interface_sky-selection-modal-add-click-event-args",
        "children": [
          {
            "description": "A callback function for the consumer to use to notify the selection modal that a new item has been added.",
            "kind": "interface-property",
            "name": "itemAdded",
            "type": "Function"
          }
        ],
        "description": "Specifies a callback function for the consumer to use to notify the selection modal that a new item has been added.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/types/selection-modal-add-click-event-args.ts",
        "kind": "interface",
        "name": "SkySelectionModalAddClickEventArgs"
      },
      {
        "anchorId": "interface_sky-selection-modal-close-args",
        "children": [
          {
            "description": "Indicates why the selection modal was closed.",
            "kind": "interface-property",
            "name": "reason",
            "type": "\"cancel\" | \"close\" | \"save\""
          },
          {
            "description": "A collection of items the user selected. This property is only set when the `result` property is set to `save`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectedItems",
            "type": "unknown[]"
          }
        ],
        "description": "The result from the selection modal.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/types/selection-modal-close-args.ts",
        "kind": "interface",
        "name": "SkySelectionModalCloseArgs"
      },
      {
        "anchorId": "interface_sky-selection-modal-open-args",
        "children": [
          {
            "description": "Called when users select the button to add options to the list.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "addClick",
            "type": "Function"
          },
          {
            "description": "Specifies an object property to display in the text input after users select an item in the dropdown list.",
            "kind": "interface-property",
            "name": "descriptorProperty",
            "type": "string"
          },
          {
            "description": "An object property that represents the object's unique identifier.",
            "kind": "interface-property",
            "name": "idProperty",
            "type": "string"
          },
          {
            "description": "The initial search text.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "initialSearch",
            "type": "string"
          },
          {
            "description": "The template to format each option in the search results. The selection modal injects values into the template as `item` variables that reference all the object properties of the options. If you do not specify a template, the item's descriptor property value is displayed.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "itemTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "description": "Called when users enter new search information and returns results via an observable.",
            "kind": "interface-property",
            "name": "searchAsync",
            "type": "Function"
          },
          {
            "description": "A descriptor for the item or items being selected. Use a plural term when `selectMode` is set to `multiple`; otherwise, use a singular term. The descriptor helps set the selection modal's `aria-label` attributes for the multiselect toolbar controls, the search input, and the save button to provide text equivalents for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility). For example, when the descriptor is \"constituents,\" the search input's `aria-label` is \"Search constituents.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectionDescriptor",
            "type": "string"
          },
          {
            "description": "Specifies whether users can select one option or multiple options.",
            "kind": "interface-property",
            "name": "selectMode",
            "type": "SkyLookupSelectModeType"
          },
          {
            "description": "Whether to display a button that lets users add options to the list.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "showAddButton",
            "type": "boolean"
          },
          {
            "deprecationReason": "Use the `selectionDescriptor` input to give context to the title and accessibility labels instead.",
            "description": "The title for the selection modal.",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "title",
            "type": "string"
          },
          {
            "description": "The initial value for the selection modal.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "value",
            "type": "unknown[]"
          },
          {
            "description": "The CSS class to add to the modal, such as `ag-custom-component-popup` for using a modal as part of a cell editor in Data Entry Grid.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "wrapperClass",
            "type": "string"
          }
        ],
        "description": "Parameters for the selection modal.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/types/selection-modal-open-args.ts",
        "kind": "interface",
        "name": "SkySelectionModalOpenArgs"
      },
      {
        "anchorId": "interface_sky-selection-modal-result",
        "children": [
          {
            "description": "Indicates whether the user saved or canceled the modal.",
            "kind": "interface-property",
            "name": "result",
            "type": "\"cancel\" | \"save\""
          },
          {
            "description": "A collection of items the user selected. This property is only set when the `result` property is set to `save`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectedItems",
            "type": "unknown[]"
          }
        ],
        "description": "The result from the selection modal.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/types/selection-modal-result.ts",
        "kind": "interface",
        "name": "SkySelectionModalResult"
      },
      {
        "anchorId": "interface_sky-selection-modal-search-args",
        "children": [
          {
            "description": "A continuation token which can be set and then will be passed back with any future searches. This is helpful for applications which utilize a token instead of an offset when fetching data.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "continuationData",
            "type": "unknown"
          },
          {
            "description": "The offset index of the first result to return. When search is executed as a result of an infinite scroll event, for example, offset will be set to the number of items already displayed.",
            "kind": "interface-property",
            "name": "offset",
            "type": "number"
          },
          {
            "description": "The search text entered by the user.",
            "kind": "interface-property",
            "name": "searchText",
            "type": "string"
          }
        ],
        "description": "Arguments passed when an asynchronous search is executed from the selection modal service.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/types/selection-modal-search-args.ts",
        "kind": "interface",
        "name": "SkySelectionModalSearchArgs"
      },
      {
        "anchorId": "interface_sky-selection-modal-search-result",
        "children": [
          {
            "description": "Data provided on \"load more\" search result requests. Use this property for information such as a continuation token for paged database queries.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "continuationData",
            "type": "unknown"
          },
          {
            "description": "Indicates whether there are more results that match the search criteria.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "hasMore",
            "type": "boolean"
          },
          {
            "description": "A list of items matching the search criteria. When there are more items that match the search criteria, set the `hasMore` property to `true` more records can be lazy-loaded as the user scrolls through the search results.",
            "kind": "interface-property",
            "name": "items",
            "type": "unknown[]"
          },
          {
            "description": "The total number of records that match the search criteria, including items not returned in the current list of items.",
            "kind": "interface-property",
            "name": "totalCount",
            "type": "number"
          }
        ],
        "description": "The result of searching for items to display in a selection modal.",
        "filePath": "libs/components/lookup/src/lib/modules/selection-modal/types/selection-modal-search-result.ts",
        "kind": "interface",
        "name": "SkySelectionModalSearchResult"
      }
    ],
    "@skyux/lookup/testing": [
      {
        "anchorId": "class_sky-country-field-fixture",
        "children": [
          {
            "description": "Clears the country selection and input field.",
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Enters the search text into the input field displaying search results, but making no selection.",
            "kind": "class-method",
            "name": "search",
            "parameters": [
              {
                "description": "The name of the country to select.",
                "name": "searchText",
                "type": "string"
              }
            ],
            "type": "Promise<string[]>"
          },
          {
            "description": "Enters the search text into the input field and selects the first result (if any).",
            "kind": "class-method",
            "name": "searchAndSelectFirstResult",
            "parameters": [
              {
                "description": "The name of the country to select.",
                "name": "searchText",
                "type": "string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCountryFieldFixture"
          },
          {
            "deprecationReason": "The country field component's `autocompleteAttribute` is deprecated.",
            "description": "The value of the input field's autocomplete attribute.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "autocompleteAttribute",
            "type": "null | string"
          },
          {
            "description": "A flag indicating if the country flag is currently visible. The flag will be visible only if a selection has been made and if the hideSelectedCountryFlag option is false.",
            "kind": "class-property",
            "name": "countryFlagIsVisible",
            "type": "boolean"
          },
          {
            "description": "A flag indicating whether or not the input has been disabled.",
            "kind": "class-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The value of the input field.",
            "kind": "class-property",
            "name": "searchText",
            "type": "string"
          },
          {
            "description": "Clears the country selection and input field.",
            "kind": "class-property",
            "name": "clear",
            "type": "Promise<void>"
          },
          {
            "description": "Enters the search text into the input field displaying search results, but making no selection.",
            "kind": "class-property",
            "name": "search",
            "type": "Promise<string[]>"
          },
          {
            "description": "Enters the search text into the input field and selects the first result (if any).",
            "kind": "class-property",
            "name": "searchAndSelectFirstResult",
            "type": "Promise<void>"
          }
        ],
        "description": "Allows interaction with a SKY UX country field component.",
        "filePath": "libs/components/lookup/testing/src/legacy/country-field/country-field-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyCountryFieldFixture"
      },
      {
        "anchorId": "class_sky-country-field-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCountryFieldTestingModule"
          }
        ],
        "filePath": "libs/components/lookup/testing/src/legacy/country-field/country-field-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyCountryFieldTestingModule"
      },
      {
        "anchorId": "class_sky-search-fixture",
        "children": [
          {
            "description": "Applies the specified search text, invoking the search.",
            "kind": "class-method",
            "name": "apply",
            "parameters": [
              {
                "description": "The search text to apply.  If none is specified, the search's current search text will be applied.",
                "isOptional": true,
                "name": "searchText",
                "type": "string"
              }
            ],
            "type": "void"
          },
          {
            "description": "Clears the current search text. If there is no search text or the search text is not currently applied, an error is thrown.",
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySearchFixture"
          },
          {
            "description": "Gets the search's current placeholder text.",
            "kind": "class-property",
            "name": "placeholderText",
            "type": "string"
          },
          {
            "description": "Gets the search's current text.",
            "kind": "class-property",
            "name": "searchText",
            "type": "string"
          },
          {
            "description": "Applies the specified search text, invoking the search.",
            "kind": "class-property",
            "name": "apply",
            "type": "void"
          },
          {
            "description": "Clears the current search text. If there is no search text or the search text is not currently applied, an error is thrown.",
            "kind": "class-property",
            "name": "clear",
            "type": "void"
          }
        ],
        "deprecationReason": "Use `SkySearchHarness` instead.",
        "description": "Allows interaction with a SKY UX search component.",
        "filePath": "libs/components/lookup/testing/src/legacy/search/search-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkySearchFixture"
      },
      {
        "anchorId": "class_sky-search-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySearchTestingModule"
          }
        ],
        "filePath": "libs/components/lookup/testing/src/legacy/search/search-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkySearchTestingModule"
      },
      {
        "anchorId": "interface_sky-autocomplete-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyAutocompleteHarness instances.",
        "filePath": "libs/components/lookup/testing/src/modules/autocomplete/autocomplete-harness-filters.ts",
        "kind": "interface",
        "name": "SkyAutocompleteHarnessFilters"
      },
      {
        "anchorId": "class_sky-autocomplete-harness",
        "children": [
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).blur()` instead.",
            "description": "Blurs the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).clear()` instead.",
            "description": "Clears the autocomplete input value.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).setValue()` instead.",
            "description": "Enters text into the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "enterText",
            "parameters": [{ "name": "value", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).focus()` instead.",
            "description": "Focuses the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "focus",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the autocomplete `aria-labelledby` value.",
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the autocomplete input harness.",
            "kind": "class-method",
            "name": "getControl",
            "parameters": [],
            "type": "Promise<SkyAutocompleteInputHarness>"
          },
          {
            "description": "Gets the text displayed when no search results are found.",
            "kind": "class-method",
            "name": "getNoResultsFoundText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Returns autocomplete search result harnesses.",
            "kind": "class-method",
            "name": "getSearchResults",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyAutocompleteSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<SkyAutocompleteSearchResultHarness[]>"
          },
          {
            "description": "Returns the text content for each autocomplete search result.",
            "kind": "class-method",
            "name": "getSearchResultsText",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyAutocompleteSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<string[]>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).getValue()` instead.",
            "description": "Gets the value of the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getValue",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).isDisabled()` instead.",
            "description": "Whether the autocomplete input is disabled.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).isFocused()` instead.",
            "description": "Whether the autocomplete input is focused.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the autocomplete is open.",
            "kind": "class-method",
            "name": "isOpen",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects a search result.",
            "kind": "class-method",
            "name": "selectSearchResult",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyAutocompleteSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAutocompleteHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyAutocompleteHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyAutocompleteHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAutocompleteHarness"
          },
          {
            "defaultValue": "'sky-autocomplete'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).blur()` instead.",
            "description": "Blurs the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).clear()` instead.",
            "description": "Clears the autocomplete input value.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "clear",
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).setValue()` instead.",
            "description": "Enters text into the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "enterText",
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).focus()` instead.",
            "description": "Focuses the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "focus",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the autocomplete `aria-labelledby` value.",
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the autocomplete input harness.",
            "kind": "class-property",
            "name": "getControl",
            "type": "Promise<SkyAutocompleteInputHarness>"
          },
          {
            "description": "Gets the text displayed when no search results are found.",
            "kind": "class-property",
            "name": "getNoResultsFoundText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Returns autocomplete search result harnesses.",
            "kind": "class-property",
            "name": "getSearchResults",
            "type": "Promise<SkyAutocompleteSearchResultHarness[]>"
          },
          {
            "description": "Returns the text content for each autocomplete search result.",
            "kind": "class-property",
            "name": "getSearchResultsText",
            "type": "Promise<string[]>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).getValue()` instead.",
            "description": "Gets the value of the autocomplete input.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getValue",
            "type": "Promise<string>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).isDisabled()` instead.",
            "description": "Whether the autocomplete input is disabled.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "deprecationReason": "Call `await (await autocomplete.getControl()).isFocused()` instead.",
            "description": "Whether the autocomplete input is focused.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the autocomplete is open.",
            "kind": "class-property",
            "name": "isOpen",
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects a search result.",
            "kind": "class-property",
            "name": "selectSearchResult",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAutocompleteHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyAutocompleteHarness>"
          }
        ],
        "description": "Harness for interacting with an autocomplete component in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/autocomplete/autocomplete-harness.ts",
        "kind": "class",
        "name": "SkyAutocompleteHarness"
      },
      {
        "anchorId": "interface_sky-autocomplete-search-result-harness-filters",
        "children": [
          {
            "description": "Only find instances whose content matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "text",
            "type": "string | RegExp"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of SkyAutocompleteSearchResultHarness instances.",
        "filePath": "libs/components/lookup/testing/src/modules/autocomplete/autocomplete-search-result-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyAutocompleteSearchResultHarnessFilters"
      },
      {
        "anchorId": "class_sky-autocomplete-search-result-harness",
        "children": [
          {
            "description": "Returns the value of the search result's descriptor property. This value is set by the autocomplete's `descriptorProperty` input.",
            "kind": "class-method",
            "name": "getDescriptorValue",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Returns the text of the search result.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Selects the search result.",
            "kind": "class-method",
            "name": "select",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAutocompleteSearchResultHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyAutocompleteSearchResultHarnessFilters"
              }
            ],
            "type": "HarnessPredicate<SkyAutocompleteSearchResultHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAutocompleteSearchResultHarness"
          },
          {
            "defaultValue": "'.sky-autocomplete-result'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Returns the value of the search result's descriptor property. This value is set by the autocomplete's `descriptorProperty` input.",
            "kind": "class-property",
            "name": "getDescriptorValue",
            "type": "Promise<string>"
          },
          {
            "description": "Returns the text of the search result.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          },
          {
            "description": "Selects the search result.",
            "kind": "class-property",
            "name": "select",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyAutocompleteSearchResultHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyAutocompleteSearchResultHarness>"
          }
        ],
        "description": "Harness for interacting with an autocomplete search result in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/autocomplete/autocomplete-search-result-harness.ts",
        "kind": "class",
        "name": "SkyAutocompleteSearchResultHarness"
      },
      {
        "anchorId": "interface_sky-country-field-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyCountryFieldHarness` instances.",
        "filePath": "libs/components/lookup/testing/src/modules/country-field/country-field-harness-filters.ts",
        "kind": "interface",
        "name": "SkyCountryFieldHarnessFilters"
      },
      {
        "anchorId": "class_sky-country-field-harness",
        "children": [
          {
            "description": "Blurs the country field input.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears the country field input value.",
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the country field input.",
            "kind": "class-method",
            "name": "enterText",
            "parameters": [{ "name": "value", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the country field input.",
            "kind": "class-method",
            "name": "focus",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the country field  `aria-labelledby` value. This is not needed for country field because the id is generated internally, and the method is marked internal to prevent it from being documented publicly.",
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the autocomplete input harness.",
            "kind": "class-method",
            "name": "getControl",
            "parameters": [],
            "type": "Promise<SkyAutocompleteInputHarness>"
          },
          {
            "description": "Gets the text displayed when no search results are found. For a country field, this is always the default text and the method is marked internal to prevent it from being documented publicly.",
            "kind": "class-method",
            "name": "getNoResultsFoundText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Returns country field search result harnesses.",
            "kind": "class-method",
            "name": "getSearchResults",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyCountryFieldSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<SkyCountryFieldSearchResultHarness[]>"
          },
          {
            "description": "Returns the text content for each country field search result.",
            "kind": "class-method",
            "name": "getSearchResultsText",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyCountryFieldSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets the value of the country field input.",
            "kind": "class-method",
            "name": "getValue",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the country field input is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the country field input is focused.",
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the country field is open.",
            "kind": "class-method",
            "name": "isOpen",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects a search result.",
            "kind": "class-method",
            "name": "selectSearchResult",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyCountryFieldSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCountryFieldHarness` that meets certain criteria. These filters only work for standalone country fields. For country fields wrapped inside `sky-input-box`, place filters on the input box instead, and query the country field using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyCountryFieldHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyCountryFieldHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCountryFieldHarness"
          },
          {
            "description": "Finds a standard country field component, or a country field component that is wrapped by an input box component. For input box implementations, we need to use the `.sky-input-box` selector since the `sky-country-field` element is removed from the DOM.",
            "defaultValue": "'sky-country-field,.sky-country-field-container'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Blurs the country field input.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "description": "Clears the country field input value.",
            "kind": "class-property",
            "name": "clear",
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the country field input.",
            "kind": "class-property",
            "name": "enterText",
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the country field input.",
            "kind": "class-property",
            "name": "focus",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the country field  `aria-labelledby` value. This is not needed for country field because the id is generated internally, and the method is marked internal to prevent it from being documented publicly.",
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the autocomplete input harness.",
            "kind": "class-property",
            "name": "getControl",
            "type": "Promise<SkyAutocompleteInputHarness>"
          },
          {
            "description": "Gets the text displayed when no search results are found. For a country field, this is always the default text and the method is marked internal to prevent it from being documented publicly.",
            "kind": "class-property",
            "name": "getNoResultsFoundText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Returns country field search result harnesses.",
            "kind": "class-property",
            "name": "getSearchResults",
            "type": "Promise<SkyCountryFieldSearchResultHarness[]>"
          },
          {
            "description": "Returns the text content for each country field search result.",
            "kind": "class-property",
            "name": "getSearchResultsText",
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets the value of the country field input.",
            "kind": "class-property",
            "name": "getValue",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the country field input is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the country field input is focused.",
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the country field is open.",
            "kind": "class-property",
            "name": "isOpen",
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects a search result.",
            "kind": "class-property",
            "name": "selectSearchResult",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCountryFieldHarness` that meets certain criteria. These filters only work for standalone country fields. For country fields wrapped inside `sky-input-box`, place filters on the input box instead, and query the country field using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyCountryFieldHarness>"
          }
        ],
        "description": "Harness for interacting with a country field component in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/country-field/country-field-harness.ts",
        "kind": "class",
        "name": "SkyCountryFieldHarness"
      },
      {
        "anchorId": "interface_sky-country-field-search-result-harness-filters",
        "children": [
          {
            "description": "Only find instances whose content matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "text",
            "type": "string | RegExp"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of SkyAutocompleteSearchResultHarness instances.",
        "filePath": "libs/components/lookup/testing/src/modules/country-field/country-field-search-result-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyCountryFieldSearchResultHarnessFilters"
      },
      {
        "anchorId": "class_sky-country-field-search-result-harness",
        "children": [
          {
            "description": "Returns the value of the search result's descriptor property. This is not needed by country field because it is always set to the country name, and the method is marked internal to prevent it from being documented publicly.",
            "kind": "class-method",
            "name": "getDescriptorValue",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Returns the text of the search result.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Selects the search result.",
            "kind": "class-method",
            "name": "select",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCountryFieldSearchResultHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyCountryFieldSearchResultHarnessFilters"
              }
            ],
            "type": "HarnessPredicate<SkyCountryFieldSearchResultHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCountryFieldSearchResultHarness"
          },
          {
            "defaultValue": "'.sky-autocomplete-result'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Returns the value of the search result's descriptor property. This is not needed by country field because it is always set to the country name, and the method is marked internal to prevent it from being documented publicly.",
            "kind": "class-property",
            "name": "getDescriptorValue",
            "type": "Promise<string>"
          },
          {
            "description": "Returns the text of the search result.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          },
          {
            "description": "Selects the search result.",
            "kind": "class-property",
            "name": "select",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCountryFieldSearchResultHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyCountryFieldSearchResultHarness>"
          }
        ],
        "description": "Harness for interacting with an autocomplete search result in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/country-field/country-field-search-result-harness.ts",
        "kind": "class",
        "name": "SkyCountryFieldSearchResultHarness"
      },
      {
        "anchorId": "interface_sky-lookup-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyLookupHarness` instances.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyLookupHarnessFilters"
      },
      {
        "anchorId": "class_sky-lookup-harness",
        "children": [
          {
            "description": "Blurs the lookup input.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears the lookup input value.",
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the \"Add\" button on the search results panel.",
            "kind": "class-method",
            "name": "clickAddButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the \"Show more\" button on the search results panel.",
            "kind": "class-method",
            "name": "clickShowMoreButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Dismisses the selections made with a multiselect lookup.",
            "kind": "class-method",
            "name": "dismissSelections",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the lookup input.",
            "kind": "class-method",
            "name": "enterText",
            "parameters": [{ "name": "value", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the lookup input.",
            "kind": "class-method",
            "name": "focus",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Don't use this property. It returns a value from a deprecated input that lookup no longer uses.",
            "description": "Gets the lookup `aria-labelledby` value.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the autocomplete input harness.",
            "kind": "class-method",
            "name": "getControl",
            "parameters": [],
            "type": "Promise<SkyAutocompleteInputHarness>"
          },
          {
            "description": "Gets the text displayed when no search results are found.",
            "kind": "class-method",
            "name": "getNoResultsFoundText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Returns lookup search result harnesses.",
            "kind": "class-method",
            "name": "getSearchResults",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyLookupSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<SkyLookupSearchResultHarness[]>"
          },
          {
            "description": "Returns the text content for each lookup search result.",
            "kind": "class-method",
            "name": "getSearchResultsText",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyLookupSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets a list of selections made with a multiselect lookup.",
            "kind": "class-method",
            "name": "getSelections",
            "parameters": [],
            "type": "Promise<SkyLookupSelectionHarness[]>"
          },
          {
            "description": "Gets the text content of all selections made with a multiselect lookup.",
            "kind": "class-method",
            "name": "getSelectionsText",
            "parameters": [],
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets the \"Show more\" picker harness.",
            "kind": "class-method",
            "name": "getShowMorePicker",
            "parameters": [],
            "type": "Promise<SkyLookupShowMorePickerHarness>"
          },
          {
            "description": "Gets the value of the lookup input.",
            "kind": "class-method",
            "name": "getValue",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the lookup input is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the lookup input is focused.",
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the lookup allows for multiple selections.",
            "kind": "class-method",
            "name": "isMultiselect",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the lookup is open.",
            "kind": "class-method",
            "name": "isOpen",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects a search result.",
            "kind": "class-method",
            "name": "selectSearchResult",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyLookupSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLookupHarness` that meets certain criteria.  These filters only work for standalone lookups. For lookups wrapped inside `sky-input-box`, place filters on the input box instead and query the datepicker using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyLookupHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyLookupHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLookupHarness"
          },
          {
            "description": "Finds a standard lookup component, or a lookup component that is wrapped by an input box component. For input box implementations, we need to use the `.sky-input-box` selector since the `sky-lookup` element is removed from the DOM.",
            "defaultValue": "'sky-lookup,.sky-input-box'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Blurs the lookup input.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "description": "Clears the lookup input value.",
            "kind": "class-property",
            "name": "clear",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the \"Add\" button on the search results panel.",
            "kind": "class-property",
            "name": "clickAddButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the \"Show more\" button on the search results panel.",
            "kind": "class-property",
            "name": "clickShowMoreButton",
            "type": "Promise<void>"
          },
          {
            "description": "Dismisses the selections made with a multiselect lookup.",
            "kind": "class-property",
            "name": "dismissSelections",
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the lookup input.",
            "kind": "class-property",
            "name": "enterText",
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the lookup input.",
            "kind": "class-property",
            "name": "focus",
            "type": "Promise<void>"
          },
          {
            "deprecationReason": "Don't use this property. It returns a value from a deprecated input that lookup no longer uses.",
            "description": "Gets the lookup `aria-labelledby` value.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the autocomplete input harness.",
            "kind": "class-property",
            "name": "getControl",
            "type": "Promise<SkyAutocompleteInputHarness>"
          },
          {
            "description": "Gets the text displayed when no search results are found.",
            "kind": "class-property",
            "name": "getNoResultsFoundText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Returns lookup search result harnesses.",
            "kind": "class-property",
            "name": "getSearchResults",
            "type": "Promise<SkyLookupSearchResultHarness[]>"
          },
          {
            "description": "Returns the text content for each lookup search result.",
            "kind": "class-property",
            "name": "getSearchResultsText",
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets a list of selections made with a multiselect lookup.",
            "kind": "class-property",
            "name": "getSelections",
            "type": "Promise<SkyLookupSelectionHarness[]>"
          },
          {
            "description": "Gets the text content of all selections made with a multiselect lookup.",
            "kind": "class-property",
            "name": "getSelectionsText",
            "type": "Promise<string[]>"
          },
          {
            "description": "Gets the \"Show more\" picker harness.",
            "kind": "class-property",
            "name": "getShowMorePicker",
            "type": "Promise<SkyLookupShowMorePickerHarness>"
          },
          {
            "description": "Gets the value of the lookup input.",
            "kind": "class-property",
            "name": "getValue",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the lookup input is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the lookup input is focused.",
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the lookup allows for multiple selections.",
            "kind": "class-property",
            "name": "isMultiselect",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the lookup is open.",
            "kind": "class-property",
            "name": "isOpen",
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects a search result.",
            "kind": "class-property",
            "name": "selectSearchResult",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLookupHarness` that meets certain criteria.  These filters only work for standalone lookups. For lookups wrapped inside `sky-input-box`, place filters on the input box instead and query the datepicker using a `SkyInputBoxHarness`. For the input box implementation, see the code example.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyLookupHarness>"
          }
        ],
        "description": "Harness for interacting with a lookup component in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-harness.ts",
        "kind": "class",
        "name": "SkyLookupHarness"
      },
      {
        "anchorId": "interface_sky-lookup-selection-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyLookupSelectionHarness` instances.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-selection-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyLookupSelectionHarnessFilters"
      },
      {
        "anchorId": "class_sky-lookup-selection-harness",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLookupSelectionHarness"
          }
        ],
        "description": "Harness for interacting with a multiselect lookup selection in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-selection-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyLookupSelectionHarness"
      },
      {
        "anchorId": "class_sky-lookup-selections-list-harness",
        "children": [
          {
            "description": "Dismisses the selections in the list.",
            "kind": "class-method",
            "name": "dismissSelections",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a list of selections.",
            "kind": "class-method",
            "name": "getSelections",
            "parameters": [],
            "type": "Promise<SkyLookupSelectionHarness[]>"
          },
          {
            "description": "Gets the text content of all selections in the list.",
            "kind": "class-method",
            "name": "getSelectionsText",
            "parameters": [],
            "type": "Promise<string[]>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLookupSelectionsListHarness"
          },
          {
            "description": "Dismisses the selections in the list.",
            "kind": "class-property",
            "name": "dismissSelections",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a list of selections.",
            "kind": "class-property",
            "name": "getSelections",
            "type": "Promise<SkyLookupSelectionHarness[]>"
          },
          {
            "description": "Gets the text content of all selections in the list.",
            "kind": "class-property",
            "name": "getSelectionsText",
            "type": "Promise<string[]>"
          }
        ],
        "description": "Harness for interacting with multiselect lookup selections in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-selections-list-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyLookupSelectionsListHarness"
      },
      {
        "anchorId": "interface_sky-lookup-show-more-picker-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyLookupShowMorePickerHarness` instances.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-show-more-picker-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyLookupShowMorePickerHarnessFilters"
      },
      {
        "anchorId": "class_sky-lookup-show-more-picker-harness",
        "children": [
          {
            "description": "Closes the picker without saving any selections made.",
            "kind": "class-method",
            "name": "cancel",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears all selections made.",
            "kind": "class-method",
            "name": "clearAll",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears the text of the search input.",
            "kind": "class-method",
            "name": "clearSearchText",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the add button.",
            "kind": "class-method",
            "name": "clickAddButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the search input and performs a search.",
            "kind": "class-method",
            "name": "enterSearchText",
            "parameters": [{ "name": "value", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the clear all button's aria-label.",
            "kind": "class-method",
            "name": "getClearAllButtonAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the \"Only show selected\" checkbox's aria-label",
            "kind": "class-method",
            "name": "getOnlyShowSelectedAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the save button's aria-label.",
            "kind": "class-method",
            "name": "getSaveButtonAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the search input's aria-label.",
            "kind": "class-method",
            "name": "getSearchAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a list of search results.",
            "kind": "class-method",
            "name": "getSearchResults",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyLookupShowMorePickerSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<SkyLookupShowMorePickerSearchResultHarness[]>"
          },
          {
            "description": "Gets the select all button's aria-label.",
            "kind": "class-method",
            "name": "getSelectAllButtonAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the selection modal is configured to show the add button.",
            "kind": "class-method",
            "name": "hasAddButton",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the selection modal is configured to allow multiple selections.",
            "kind": "class-method",
            "name": "isMultiselect",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Loads more results in the picker.",
            "kind": "class-method",
            "name": "loadMore",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Saves any selections made and closes the modal.",
            "kind": "class-method",
            "name": "saveAndClose",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Selects all search results.",
            "kind": "class-method",
            "name": "selectAll",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Selects multiple search results based on a set of criteria.",
            "kind": "class-method",
            "name": "selectSearchResult",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyLookupShowMorePickerSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLookupShowMorePickerHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyLookupShowMorePickerHarnessFilters"
              }
            ],
            "type": "HarnessPredicate<SkyLookupShowMorePickerHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLookupShowMorePickerHarness"
          },
          {
            "defaultValue": "'.sky-lookup-show-more-modal'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Closes the picker without saving any selections made.",
            "kind": "class-property",
            "name": "cancel",
            "type": "Promise<void>"
          },
          {
            "description": "Clears all selections made.",
            "kind": "class-property",
            "name": "clearAll",
            "type": "Promise<void>"
          },
          {
            "description": "Clears the text of the search input.",
            "kind": "class-property",
            "name": "clearSearchText",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the add button.",
            "kind": "class-property",
            "name": "clickAddButton",
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the search input and performs a search.",
            "kind": "class-property",
            "name": "enterSearchText",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the clear all button's aria-label.",
            "kind": "class-property",
            "name": "getClearAllButtonAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the \"Only show selected\" checkbox's aria-label",
            "kind": "class-property",
            "name": "getOnlyShowSelectedAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the save button's aria-label.",
            "kind": "class-property",
            "name": "getSaveButtonAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the search input's aria-label.",
            "kind": "class-property",
            "name": "getSearchAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a list of search results.",
            "kind": "class-property",
            "name": "getSearchResults",
            "type": "Promise<SkyLookupShowMorePickerSearchResultHarness[]>"
          },
          {
            "description": "Gets the select all button's aria-label.",
            "kind": "class-property",
            "name": "getSelectAllButtonAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the selection modal is configured to show the add button.",
            "kind": "class-property",
            "name": "hasAddButton",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the selection modal is configured to allow multiple selections.",
            "kind": "class-property",
            "name": "isMultiselect",
            "type": "Promise<boolean>"
          },
          {
            "description": "Loads more results in the picker.",
            "kind": "class-property",
            "name": "loadMore",
            "type": "Promise<void>"
          },
          {
            "description": "Saves any selections made and closes the modal.",
            "kind": "class-property",
            "name": "saveAndClose",
            "type": "Promise<void>"
          },
          {
            "description": "Selects all search results.",
            "kind": "class-property",
            "name": "selectAll",
            "type": "Promise<void>"
          },
          {
            "description": "Selects multiple search results based on a set of criteria.",
            "kind": "class-property",
            "name": "selectSearchResult",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLookupShowMorePickerHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyLookupShowMorePickerHarness>"
          }
        ],
        "description": "Harness for interacting with a lookup's \"Show more\" picker in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-show-more-picker-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyLookupShowMorePickerHarness"
      },
      {
        "anchorId": "interface_sky-lookup-show-more-picker-search-result-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyLookupShowMorePickerSearchResultHarness` instances.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-show-more-picker-search-result-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyLookupShowMorePickerSearchResultHarnessFilters"
      },
      {
        "anchorId": "class_sky-lookup-show-more-picker-search-result-harness",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLookupShowMorePickerSearchResultHarness"
          }
        ],
        "description": "Harness for interacting with a lookup's \"Show more\" picker search results in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/lookup/lookup-show-more-picker-search-result-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyLookupShowMorePickerSearchResultHarness"
      },
      {
        "anchorId": "interface_sky-search-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkySearchHarness` instances.",
        "filePath": "libs/components/lookup/testing/src/modules/search/search-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkySearchHarnessFilters"
      },
      {
        "anchorId": "class_sky-search-harness",
        "children": [
          {
            "description": "Blurs the search input.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears the search input.",
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the search input clear button.",
            "kind": "class-method",
            "name": "clickClearButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks search dismiss button to collapse search back to a button.",
            "kind": "class-method",
            "name": "clickDismissSearchButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the search icon button that opens search input when it is collapsed.",
            "kind": "class-method",
            "name": "clickOpenSearchButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the search submit button.",
            "kind": "class-method",
            "name": "clickSubmitButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the search input and performs a search.",
            "kind": "class-method",
            "name": "enterText",
            "parameters": [{ "name": "value", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the search input.",
            "kind": "class-method",
            "name": "focus",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the search input's `aria-label`.",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the search's aria-labelledby.",
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the value of the input's placeholder attribute.",
            "kind": "class-method",
            "name": "getPlaceholderText",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the value of the search input.",
            "kind": "class-method",
            "name": "getValue",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the search input is collapsed.",
            "kind": "class-method",
            "name": "isCollapsed",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the search input is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the search input is focused.",
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkySearchHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkySearchHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkySearchHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySearchHarness"
          },
          {
            "defaultValue": "'sky-search'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Blurs the search input.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "description": "Clears the search input.",
            "kind": "class-property",
            "name": "clear",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the search input clear button.",
            "kind": "class-property",
            "name": "clickClearButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks search dismiss button to collapse search back to a button.",
            "kind": "class-property",
            "name": "clickDismissSearchButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the search icon button that opens search input when it is collapsed.",
            "kind": "class-property",
            "name": "clickOpenSearchButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the search submit button.",
            "kind": "class-property",
            "name": "clickSubmitButton",
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the search input and performs a search.",
            "kind": "class-property",
            "name": "enterText",
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the search input.",
            "kind": "class-property",
            "name": "focus",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the search input's `aria-label`.",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the search's aria-labelledby.",
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the value of the input's placeholder attribute.",
            "kind": "class-property",
            "name": "getPlaceholderText",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the value of the search input.",
            "kind": "class-property",
            "name": "getValue",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the search input is collapsed.",
            "kind": "class-property",
            "name": "isCollapsed",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the search input is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the search input is focused.",
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkySearchHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkySearchHarness>"
          }
        ],
        "description": "Harness for interacting with a search component in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/search/search-harness.ts",
        "kind": "class",
        "name": "SkySearchHarness"
      },
      {
        "anchorId": "class_sky-selection-modal-harness",
        "children": [
          {
            "description": "Closes the picker without saving any selections made.",
            "kind": "class-method",
            "name": "cancel",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears all selections made.",
            "kind": "class-method",
            "name": "clearAll",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears the text of the search input.",
            "kind": "class-method",
            "name": "clearSearchText",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the add button.",
            "kind": "class-method",
            "name": "clickAddButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the search input and performs a search.",
            "kind": "class-method",
            "name": "enterSearchText",
            "parameters": [{ "name": "value", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the clear all button's aria-label.",
            "kind": "class-method",
            "name": "getClearAllButtonAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the \"Only show selected\" checkbox's aria-label",
            "kind": "class-method",
            "name": "getOnlyShowSelectedAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the save button's aria-label.",
            "kind": "class-method",
            "name": "getSaveButtonAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the search input's aria-label.",
            "kind": "class-method",
            "name": "getSearchAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a list of search results.",
            "kind": "class-method",
            "name": "getSearchResults",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkySelectionModalSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<SkySelectionModalSearchResultHarness[]>"
          },
          {
            "description": "Gets the select all button's aria-label.",
            "kind": "class-method",
            "name": "getSelectAllButtonAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the selection modal is configured to show the add button.",
            "kind": "class-method",
            "name": "hasAddButton",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the selection modal is configured to allow multiple selections.",
            "kind": "class-method",
            "name": "isMultiselect",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Loads more results in the picker.",
            "kind": "class-method",
            "name": "loadMore",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Saves any selections made and closes the modal.",
            "kind": "class-method",
            "name": "saveAndClose",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Selects all search results.",
            "kind": "class-method",
            "name": "selectAll",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Selects multiple search results based on a set of criteria.",
            "kind": "class-method",
            "name": "selectSearchResult",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkySelectionModalSearchResultHarnessFilters"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySelectionModalHarness"
          },
          {
            "defaultValue": "'.sky-lookup-show-more-modal'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Closes the picker without saving any selections made.",
            "kind": "class-property",
            "name": "cancel",
            "type": "Promise<void>"
          },
          {
            "description": "Clears all selections made.",
            "kind": "class-property",
            "name": "clearAll",
            "type": "Promise<void>"
          },
          {
            "description": "Clears the text of the search input.",
            "kind": "class-property",
            "name": "clearSearchText",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the add button.",
            "kind": "class-property",
            "name": "clickAddButton",
            "type": "Promise<void>"
          },
          {
            "description": "Enters text into the search input and performs a search.",
            "kind": "class-property",
            "name": "enterSearchText",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the clear all button's aria-label.",
            "kind": "class-property",
            "name": "getClearAllButtonAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the \"Only show selected\" checkbox's aria-label",
            "kind": "class-property",
            "name": "getOnlyShowSelectedAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the save button's aria-label.",
            "kind": "class-property",
            "name": "getSaveButtonAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the search input's aria-label.",
            "kind": "class-property",
            "name": "getSearchAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a list of search results.",
            "kind": "class-property",
            "name": "getSearchResults",
            "type": "Promise<SkySelectionModalSearchResultHarness[]>"
          },
          {
            "description": "Gets the select all button's aria-label.",
            "kind": "class-property",
            "name": "getSelectAllButtonAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the selection modal is configured to show the add button.",
            "kind": "class-property",
            "name": "hasAddButton",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the selection modal is configured to allow multiple selections.",
            "kind": "class-property",
            "name": "isMultiselect",
            "type": "Promise<boolean>"
          },
          {
            "description": "Loads more results in the picker.",
            "kind": "class-property",
            "name": "loadMore",
            "type": "Promise<void>"
          },
          {
            "description": "Saves any selections made and closes the modal.",
            "kind": "class-property",
            "name": "saveAndClose",
            "type": "Promise<void>"
          },
          {
            "description": "Selects all search results.",
            "kind": "class-property",
            "name": "selectAll",
            "type": "Promise<void>"
          },
          {
            "description": "Selects multiple search results based on a set of criteria.",
            "kind": "class-property",
            "name": "selectSearchResult",
            "type": "Promise<void>"
          }
        ],
        "description": "Harness for interacting with a selection modal in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/selection-modal/selection-modal-harness.ts",
        "kind": "class",
        "name": "SkySelectionModalHarness"
      },
      {
        "anchorId": "interface_sky-selection-modal-search-result-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkySelectionModalSearchResultHarness` instances.",
        "filePath": "libs/components/lookup/testing/src/modules/selection-modal/selection-modal-search-result-harness-filters.ts",
        "kind": "interface",
        "name": "SkySelectionModalSearchResultHarnessFilters"
      },
      {
        "anchorId": "class_sky-selection-modal-search-result-harness",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySelectionModalSearchResultHarness"
          }
        ],
        "description": "Harness for interacting with a selection modal's search results in tests.",
        "filePath": "libs/components/lookup/testing/src/modules/selection-modal/selection-modal-search-result-harness.ts",
        "kind": "class",
        "name": "SkySelectionModalSearchResultHarness"
      }
    ],
    "@skyux/modals": [
      {
        "anchorId": "type-alias_sky-confirm-button-action",
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-button-action.ts",
        "isInternal": true,
        "kind": "type-alias",
        "name": "SkyConfirmButtonAction",
        "type": "\"ok\" | \"yes\" | \"no\" | \"cancel\""
      },
      {
        "anchorId": "interface_sky-confirm-button-config",
        "children": [
          {
            "description": "The identifier to return when users select the button to close the dialog. This is useful to determine which button users select.",
            "kind": "interface-property",
            "name": "action",
            "type": "string"
          },
          {
            "deprecationReason": "The confirm component automatically focuses the first interactive\nelement of the dialog.",
            "description": "Whether to place focus on this button by default.",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "autofocus",
            "type": "boolean"
          },
          {
            "description": "The style to apply to the button. The valid options are `primary` for the button that triggers the recommended or most-common action, `default` for buttons that trigger less-common actions, and `link` for a button that closes the dialog.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "styleType",
            "type": "string"
          },
          {
            "description": "The label for the button.",
            "kind": "interface-property",
            "name": "text",
            "type": "string"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-button-config.ts",
        "kind": "interface",
        "name": "SkyConfirmButtonConfig"
      },
      {
        "anchorId": "type-alias_sky-confirm-button-style-type",
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-button-style-type.ts",
        "kind": "type-alias",
        "name": "SkyConfirmButtonStyleType",
        "type": "\"primary\" | \"default\" | \"link\" | \"danger\""
      },
      {
        "anchorId": "interface_sky-confirm-close-event-args",
        "children": [
          {
            "description": "The identifier for the button that users selected to close the dialog.",
            "kind": "interface-property",
            "name": "action",
            "type": "string"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-closed-event-args.ts",
        "kind": "interface",
        "name": "SkyConfirmCloseEventArgs"
      },
      {
        "anchorId": "interface_sky-confirm-config",
        "children": [
          {
            "description": "Secondary text to display under the primary message.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "body",
            "type": "string"
          },
          {
            "description": "The list of buttons to display when the `type` property is set to `SkyConfirmType.Custom`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttons",
            "type": "SkyConfirmButtonConfig[]"
          },
          {
            "description": "The message to display in bold at the top of the dialog.",
            "kind": "interface-property",
            "name": "message",
            "type": "string"
          },
          {
            "description": "Whether to preserve whitespace and new lines inside the dialog.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "preserveWhiteSpace",
            "type": "boolean"
          },
          {
            "description": "The preset button configuration for the dialog.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "SkyConfirmType"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-config.ts",
        "kind": "interface",
        "name": "SkyConfirmConfig"
      },
      {
        "anchorId": "class_sky-confirm-instance",
        "children": [
          {
            "description": "Closes the confirm instance.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              {
                "description": "Specifies an object to emit to subscribers of the `closed` event of the confirm instance.",
                "name": "args",
                "type": "SkyConfirmCloseEventArgs"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyConfirmInstance"
          },
          {
            "description": "Fires when users select an action to close the dialog. This event returns a `SkyConfirmCloseEventArgs` object with information about the button that users select. It returns the `'cancel'` action when users press the <kbd>Escape</kbd> key.",
            "kind": "class-property",
            "name": "closed",
            "type": "Observable<SkyConfirmCloseEventArgs>"
          },
          {
            "description": "Closes the confirm instance.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-instance.ts",
        "kind": "class",
        "name": "SkyConfirmInstance"
      },
      {
        "anchorId": "interface_sky-confirm-service-interface",
        "children": [
          {
            "kind": "interface-property",
            "name": "open",
            "type": "SkyConfirmInstance"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-service-interface.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyConfirmServiceInterface"
      },
      {
        "anchorId": "enum_sky-confirm-type",
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Allows you to define your own buttons using the `buttons` property of `SkyConfirmConfig`.",
            "kind": "enum-member",
            "name": "Custom",
            "type": "0"
          },
          {
            "description": "Displays one button with an **OK** label and an `'ok'` action.",
            "kind": "enum-member",
            "name": "OK",
            "type": "1"
          },
          {
            "deprecationReason": "Use the `Custom` type to follow the guidance that labels\nshould clearly indicate the actions that occur when users select buttons.",
            "description": "Displays two buttons with **Yes** and **Cancel** labels.",
            "isDeprecated": true,
            "kind": "enum-member",
            "name": "YesCancel",
            "type": "2"
          },
          {
            "deprecationReason": "Use the `Custom` type to follow the guidance that labels\nshould clearly indicate the actions that occur when users select buttons.",
            "description": "Displays three buttons with **Yes**, **No**, and **Cancel** labels.",
            "isDeprecated": true,
            "kind": "enum-member",
            "name": "YesNoCancel",
            "type": "3"
          }
        ],
        "name": "SkyConfirmType"
      },
      {
        "anchorId": "class_sky-confirm-component",
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyConfirmComponent",
        "selector": "sky-confirm"
      },
      {
        "anchorId": "class_sky-confirm-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyConfirmModule"
          }
        ],
        "deprecationReason": "The `SkyConfirmModule` is no longer needed and can be removed from your application.",
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyConfirmModule"
      },
      {
        "anchorId": "class_sky-confirm-service",
        "children": [
          {
            "description": "Opens a dialog using the specified options.",
            "kind": "class-method",
            "name": "open",
            "parameters": [
              {
                "description": "Specifies configuration options for the dialog.",
                "name": "config",
                "type": "SkyConfirmConfig"
              }
            ],
            "type": "SkyConfirmInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyConfirmService"
          },
          {
            "description": "Opens a dialog using the specified options.",
            "kind": "class-property",
            "name": "open",
            "type": "SkyConfirmInstance"
          }
        ],
        "description": "Launches a dialog.",
        "filePath": "libs/components/modals/src/lib/modules/confirm/confirm.service.ts",
        "kind": "service",
        "name": "SkyConfirmService"
      },
      {
        "anchorId": "class_sky-modal-before-close-handler",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalBeforeCloseHandler"
          },
          {
            "description": "The object that would be emitted by a modal's `closed` event. This object can be used to determine whether to prompt the user for confirmation, such as when the user closes a modal form after entering data.",
            "kind": "class-property",
            "name": "closeArgs",
            "type": "SkyModalCloseArgs"
          },
          {
            "description": "Function to call to close the modal. Neglecting to call this function effectively cancels the close modal action.",
            "kind": "class-property",
            "name": "closeModal",
            "type": "Function"
          }
        ],
        "description": "Properties about the modal close action and a method to close the modal.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-before-close-handler.ts",
        "kind": "class",
        "name": "SkyModalBeforeCloseHandler"
      },
      {
        "anchorId": "class_sky-modal-close-args",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalCloseArgs"
          },
          {
            "description": "The data passed from users when the modal is closed.",
            "kind": "class-property",
            "name": "data",
            "type": "any"
          },
          {
            "description": "The reason the modal was closed. Options include `\"close\"`, `\"save\"`, and `\"cancel\"`.",
            "kind": "class-property",
            "name": "reason",
            "type": "undefined | string"
          }
        ],
        "description": "Contains an object with the data passed from users when a modal is closed and the reason that the modal was closed.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-close-args.ts",
        "kind": "class",
        "name": "SkyModalCloseArgs"
      },
      {
        "anchorId": "class_sky-modal-configuration",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalConfiguration"
          },
          {
            "isDeprecated": true,
            "kind": "class-property",
            "name": "ariaDescribedBy",
            "type": "string"
          },
          {
            "isDeprecated": true,
            "kind": "class-property",
            "name": "ariaLabelledBy",
            "type": "string"
          },
          { "kind": "class-property", "name": "ariaRole", "type": "string" },
          { "kind": "class-property", "name": "fullPage", "type": "boolean" },
          {
            "isDeprecated": true,
            "kind": "class-property",
            "name": "helpKey",
            "type": "string"
          },
          { "kind": "class-property", "name": "size", "type": "string" },
          {
            "isDeprecated": true,
            "kind": "class-property",
            "name": "tiledBody",
            "type": "boolean"
          },
          { "kind": "class-property", "name": "wrapperClass", "type": "string" }
        ],
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-configuration.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyModalConfiguration"
      },
      {
        "anchorId": "class_sky-modal-content-component",
        "description": "Specifies content to display in the modal's body.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-content.component.ts",
        "kind": "component",
        "name": "SkyModalContentComponent",
        "selector": "sky-modal-content"
      },
      {
        "anchorId": "interface_sky-modal-error",
        "children": [
          {
            "description": "The error message to display.",
            "kind": "interface-property",
            "name": "message",
            "type": "string"
          }
        ],
        "description": "Contains an object with properties for displaying form-level errors in the modal.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-error.ts",
        "kind": "interface",
        "name": "SkyModalError"
      },
      {
        "anchorId": "class_sky-modal-errors-service",
        "children": [
          {
            "kind": "class-method",
            "name": "updateErrors",
            "parameters": [
              { "name": "value", "type": "undefined | SkyModalError[]" }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalErrorsService"
          },
          {
            "kind": "class-property",
            "name": "formErrors",
            "type": "Observable<undefined | SkyModalError[]>"
          },
          { "kind": "class-property", "name": "updateErrors", "type": "void" }
        ],
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-errors.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyModalErrorsService"
      },
      {
        "anchorId": "class_sky-modal-footer-component",
        "description": "Specifies content to display in the modal's footer.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-footer.component.ts",
        "kind": "component",
        "name": "SkyModalFooterComponent",
        "selector": "sky-modal-footer"
      },
      {
        "anchorId": "class_sky-modal-header-component",
        "description": "Specifies a header for the modal.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-header.component.ts",
        "kind": "component",
        "name": "SkyModalHeaderComponent",
        "selector": "sky-modal-header"
      },
      {
        "anchorId": "class_sky-modal-host-service",
        "children": [
          {
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "getModalZIndex",
            "parameters": [],
            "type": "number"
          },
          {
            "kind": "class-method",
            "name": "onClose",
            "parameters": [],
            "type": "void"
          },
          {
            "isDeprecated": true,
            "kind": "class-method",
            "name": "onOpenHelp",
            "parameters": [{ "name": "helpKey", "type": "string" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalHostService"
          },
          {
            "kind": "class-property",
            "name": "close",
            "type": "Subject<void>"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "fullPage",
            "type": "boolean"
          },
          {
            "isDeprecated": true,
            "kind": "class-property",
            "name": "openHelp",
            "type": "Subject<string>"
          },
          { "kind": "class-property", "name": "zIndex", "type": "number" },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "backdropZIndex",
            "type": "number"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "fullPageModalCount",
            "type": "number"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "openModalCount",
            "type": "number"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "topModal",
            "type": "SkyModalHostService"
          },
          { "kind": "class-property", "name": "destroy", "type": "void" },
          {
            "kind": "class-property",
            "name": "getModalZIndex",
            "type": "number"
          },
          { "kind": "class-property", "name": "onClose", "type": "void" },
          {
            "isDeprecated": true,
            "kind": "class-property",
            "name": "onOpenHelp",
            "type": "void"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-host.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyModalHostService"
      },
      {
        "anchorId": "class_sky-modal-instance",
        "children": [
          {
            "description": "Closes the modal instance with `reason=\"cancel\"`.",
            "kind": "class-method",
            "name": "cancel",
            "parameters": [
              {
                "description": "Specifies an object to emit to subscribers of the `closed` event of the modal instance. The `SkyModalInstance` provider can be injected into a component's constructor so that this cancel function can be called from a button in the `sky-modal-footer`.",
                "isOptional": true,
                "name": "result",
                "type": "any"
              }
            ],
            "type": "void"
          },
          {
            "description": "Closes the modal instance.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              {
                "description": "Specifies an object to emit to subscribers of the `closed` event of the modal instance. The `SkyModalInstance` provider can be injected into a component's constructor so that this `close` function can be called from a button in the `sky-modal-footer`.",
                "isOptional": true,
                "name": "result",
                "type": "any"
              },
              {
                "description": "Specifies the reason for the modal closing, with the default reason of `\"close\"`.",
                "isOptional": true,
                "name": "reason",
                "type": "string"
              },
              {
                "description": "Indicates whether to ignore the modal instance's `beforeClose` event.",
                "isOptional": true,
                "name": "ignoreBeforeClose",
                "type": "boolean"
              }
            ],
            "type": "void"
          },
          {
            "description": "Triggers the `helpOpened` event that broadcasts a `helpKey` parameter to open when users click the <i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> button.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "openHelp",
            "parameters": [
              {
                "description": "Specifies a string to emit to subscribers of the modal instance's `helpOpened` event. Consumers can inject the `SkyModalInstance` provider into a component's constructor to call the `openHelp` function in the modal template.",
                "name": "helpKey",
                "type": "string"
              }
            ],
            "type": "void"
          },
          {
            "description": "Closes the modal instance with `reason=\"save\"`.",
            "kind": "class-method",
            "name": "save",
            "parameters": [
              {
                "description": "Specifies an object to emit to subscribers of the `closed` event of the modal instance. The `SkyModalInstance` provider can be injected into a component's constructor so that this `save` function can be called from a button in `the sky-modal-footer`.",
                "isOptional": true,
                "name": "result",
                "type": "any"
              }
            ],
            "type": "void"
          },
          {
            "description": "Scrolls the modal content area to the top of its scrollable area.",
            "kind": "class-method",
            "name": "scrollContentToTop",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalInstance"
          },
          {
            "description": "A direct reference to the provided component's class.",
            "kind": "class-property",
            "name": "componentInstance",
            "type": "any"
          },
          {
            "description": "Sets the component adapter for the instance. This is used internally for actions such as scrolling the content.",
            "kind": "class-property",
            "name": "adapter",
            "type": "void"
          },
          {
            "description": "An event that the modal instance emits when it is about to close. It emits a `SkyModalBeforeCloseHandler` object with a `closeModal` method that closes the modal. If a subscription exists for this event, the modal does not close until the subscriber calls the `closeModal` method.",
            "kind": "class-property",
            "name": "beforeClose",
            "type": "Observable<SkyModalBeforeCloseHandler>"
          },
          {
            "description": "An event that the modal instance emits when it closes. It emits a `SkyModalCloseArgs` object with a `data` property that includes data passed from users on close or save and a `reason` property that indicates whether the modal was saved or closed without saving. The `reason` property accepts any string value. Common examples include `\"cancel\"`, `\"close\"`, and `\"save\"`.",
            "kind": "class-property",
            "name": "closed",
            "type": "Observable<SkyModalCloseArgs>"
          },
          {
            "description": "Sets the component ref for the instance. This is used to extract the component instance for the public API and the element ref for internal use.",
            "kind": "class-property",
            "name": "componentRef",
            "type": "void"
          },
          {
            "description": "An event that the modal instance emits when users click the <i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> button. If a `helpKey` parameter was specified, the `helpOpened` event broadcasts the `helpKey`.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "helpOpened",
            "type": "Observable<string>"
          },
          {
            "description": "Closes the modal instance with `reason=\"cancel\"`.",
            "kind": "class-property",
            "name": "cancel",
            "type": "void"
          },
          {
            "description": "Closes the modal instance.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          },
          {
            "description": "Triggers the `helpOpened` event that broadcasts a `helpKey` parameter to open when users click the <i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> button.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "openHelp",
            "type": "void"
          },
          {
            "description": "Closes the modal instance with `reason=\"save\"`.",
            "kind": "class-property",
            "name": "save",
            "type": "void"
          },
          {
            "description": "Scrolls the modal content area to the top of its scrollable area.",
            "kind": "class-property",
            "name": "scrollContentToTop",
            "type": "void"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-instance.ts",
        "kind": "class",
        "name": "SkyModalInstance"
      },
      {
        "anchorId": "class_sky-modal-is-dirty-directive",
        "children": [
          {
            "description": "Whether the user edited an input on the modal.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "isDirty",
            "type": "boolean",
            "isRequired": true
          }
        ],
        "description": "Provides a way to mark a modal as \"dirty\" and displays a confirmation message when a user closes the modal without saving.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-is-dirty.directive.ts",
        "kind": "directive",
        "name": "SkyModalIsDirtyDirective",
        "selector": "sky-modal[isDirty]"
      },
      {
        "anchorId": "interface_sky-modal-service-interface",
        "children": [
          {
            "kind": "interface-property",
            "name": "open",
            "type": "SkyModalInstance"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/modal/modal-service-interface.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyModalServiceInterface"
      },
      {
        "anchorId": "class_sky-modal-component",
        "children": [
          {
            "description": "The text to display as the modal's heading.",
            "kind": "directive-input",
            "name": "headingText",
            "type": "undefined | string"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the modal header. Clicking the button invokes global help as configured by the application. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the modal header. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "tiledBody",
            "type": "undefined | boolean"
          },
          {
            "description": "Used by the confirm component to set descriptive text without using a modal header.",
            "kind": "directive-input",
            "name": "ariaDescribedBy",
            "type": "undefined | string"
          },
          {
            "description": "Used by the confirm component to set descriptive text without using a modal header.",
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "Used by the confirm component to set a different role for the modal.",
            "kind": "directive-input",
            "name": "ariaRole",
            "type": "void"
          },
          {
            "description": "A list of form-level errors to display to the user.",
            "kind": "directive-input",
            "name": "formErrors",
            "type": "void"
          }
        ],
        "description": "Provides a common look-and-feel for modal content with options to display a common modal header, specify body content, and display a common modal footer and buttons.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal.component.ts",
        "kind": "component",
        "name": "SkyModalComponent",
        "selector": "sky-modal"
      },
      {
        "anchorId": "interface_sky-modal-configuration-interface",
        "children": [
          {
            "deprecationReason": "Set `headingText` on the modal component instead.",
            "description": "The HTML element ID of the element that describes the modal. This sets the modal's `aria-describedby` attribute to provide a text equivalent for [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). The description typically includes text on the modal but not on items that users interact with, such as buttons and forms. If you do not specify an ID, the default description is the content of the `sky-modal-content` component. For more information about the `aria-describedby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-describedby).",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaDescribedBy",
            "type": "string"
          },
          {
            "deprecationReason": "Set `headingText` on the modal component instead.",
            "description": "The HTML element ID of the element that labels the modal. This sets the `aria-labelledby` attribute for the modal to provide a text equivalent for [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). This is typically a header element, and if you do not specify an ID, the default value is the content of the `sky-modal-header` component. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaLabelledBy",
            "type": "string"
          },
          {
            "description": "The ARIA role for the modal [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) by indicating how the modal functions and what it controls. For information about how an ARIA role indicates what an item represents on a web page, see the [WAI-ARIA roles model](http://www.w3.org/WAI/PF/aria/#roles). By default, modals set the ARIA role to `dialog`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaRole",
            "type": "string"
          },
          {
            "description": "Whether to display the modal full screen. This property defaults to `false`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "fullPage",
            "type": "boolean"
          },
          {
            "deprecationReason": "To display a help button in the modal header, set either the\n`helpKey` or `helpPopoverContent` inputs on the modal component.",
            "description": "The `helpKey` string. This property displays the <i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i> button in the modal header. When users click this button, the `helpOpened` event broadcasts the `helpKey` parameter. Blackbaud developers can use the Help Widget, which is for internal Blackbaud use only, to [display help content in a flyout panel](https://docs.blackbaud.com/bb-help-docs/components/modal-header).",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "helpKey",
            "type": "string"
          },
          {
            "description": "An array property of `providers`. In Angular, a provider is something that can create or deliver a service. This property can be used to pass context values from the component that launches the modal to the modal component.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "providers",
            "type": "StaticProvider[]"
          },
          {
            "description": "The size for the modal. The valid options are `small`, `medium`, and `large`. This property defaults to `medium`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "size",
            "type": "string"
          },
          {
            "deprecationReason": "Tiles inside modals are no longer a recommended design pattern. For complex forms, use [sectioned forms](https://developer.blackbaud.com/skyux/components/sectioned-form) or [other form containers](https://developer.blackbaud.com/skyux/design/guidelines/form-design) instead.",
            "description": "Whether the modal uses tiles. When set to `true`, the modal's background switches to `$sky-background-color-neutral-light` and tile headings are styled as subsection headings. This property defaults to `false`.",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "tiledBody",
            "type": "boolean"
          },
          {
            "description": "The CSS class to add to the modal, such as `ag-custom-component-popup` for using a modal as part of a cell editor in Data Entry Grid.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "wrapperClass",
            "type": "string"
          }
        ],
        "description": "Specifies configuration options for creating a modal.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal.interface.ts",
        "kind": "interface",
        "name": "SkyModalConfigurationInterface"
      },
      {
        "anchorId": "class_sky-modal-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalModule"
          }
        ],
        "filePath": "libs/components/modals/src/lib/modules/modal/modal.module.ts",
        "kind": "module",
        "name": "SkyModalModule"
      },
      {
        "anchorId": "class_sky-modal-legacy-service",
        "children": [
          {
            "description": "Removes the modal host from the DOM.",
            "kind": "class-method",
            "name": "dispose",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Opens a modal using the specified component.",
            "kind": "class-method",
            "name": "open",
            "parameters": [
              {
                "description": "Determines the component to render.",
                "name": "component",
                "type": "any"
              },
              {
                "description": "Specifies configuration options for the modal.",
                "isOptional": true,
                "name": "config",
                "type": "any[] | SkyModalConfigurationInterface"
              }
            ],
            "type": "SkyModalInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalLegacyService"
          },
          {
            "description": "Removes the modal host from the DOM.",
            "kind": "class-property",
            "name": "dispose",
            "type": "void"
          },
          {
            "description": "Opens a modal using the specified component.",
            "kind": "class-property",
            "name": "open",
            "type": "SkyModalInstance"
          }
        ],
        "deprecationReason": "Use `SkyModalService` to open a standalone component instead.",
        "description": "A service that launches modals.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal.service.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "SkyModalLegacyService"
      },
      {
        "anchorId": "class_sky-modal-service",
        "children": [
          {
            "description": "Removes the modal host from the DOM.",
            "kind": "class-method",
            "name": "dispose",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Opens a modal using the specified component.",
            "kind": "class-method",
            "name": "open",
            "parameters": [
              {
                "description": "Determines the component to render.",
                "name": "component",
                "type": "any"
              },
              {
                "description": "Specifies configuration options for the modal.",
                "isOptional": true,
                "name": "config",
                "type": "any[] | SkyModalConfigurationInterface"
              }
            ],
            "type": "SkyModalInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalService"
          },
          {
            "description": "Removes the modal host from the DOM.",
            "kind": "class-property",
            "name": "dispose",
            "type": "void"
          },
          {
            "description": "Opens a modal using the specified component.",
            "kind": "class-property",
            "name": "open",
            "type": "SkyModalInstance"
          }
        ],
        "description": "A service that launches modals.",
        "filePath": "libs/components/modals/src/lib/modules/modal/modal.service.ts",
        "kind": "service",
        "name": "SkyModalService"
      }
    ],
    "@skyux/modals/testing": [
      {
        "anchorId": "class_sky-modal-fixture",
        "children": [
          {
            "description": "Clicks the modal header's \"close\" button.",
            "kind": "class-method",
            "name": "clickHeaderCloseButton",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Clicks the modal header's \"help\" button.",
            "kind": "class-method",
            "name": "clickHelpButton",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Returns the modal's content element.",
            "kind": "class-method",
            "name": "getModalContentEl",
            "parameters": [],
            "type": "any"
          },
          {
            "description": "Returns the main modal element.",
            "kind": "class-method",
            "name": "getModalDiv",
            "parameters": [],
            "type": "any"
          },
          {
            "description": "Returns the modal's footer element.",
            "kind": "class-method",
            "name": "getModalFooterEl",
            "parameters": [],
            "type": "any"
          },
          {
            "description": "Returns the modal's header element.",
            "kind": "class-method",
            "name": "getModalHeaderEl",
            "parameters": [],
            "type": "any"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalFixture"
          },
          {
            "description": "The modal component's ARIA describedby attribute.",
            "kind": "class-property",
            "name": "ariaDescribedBy",
            "type": "undefined | string"
          },
          {
            "description": "The modal component's ARIA labelledby attribute.",
            "kind": "class-property",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "The modal component's role attribute.",
            "kind": "class-property",
            "name": "ariaRole",
            "type": "undefined | string"
          },
          {
            "description": "Whether or not the modal is a full page modal.",
            "kind": "class-property",
            "name": "fullPage",
            "type": "boolean"
          },
          {
            "description": "The size of the modal.",
            "kind": "class-property",
            "name": "size",
            "type": "undefined | string"
          },
          {
            "description": "Whether or not the modal is set up for tiled content.",
            "kind": "class-property",
            "name": "tiledBody",
            "type": "boolean"
          },
          {
            "description": "Clicks the modal header's \"close\" button.",
            "kind": "class-property",
            "name": "clickHeaderCloseButton",
            "type": "void"
          },
          {
            "description": "Clicks the modal header's \"help\" button.",
            "kind": "class-property",
            "name": "clickHelpButton",
            "type": "void"
          },
          {
            "description": "Returns the modal's content element.",
            "kind": "class-property",
            "name": "getModalContentEl",
            "type": "any"
          },
          {
            "description": "Returns the main modal element.",
            "kind": "class-property",
            "name": "getModalDiv",
            "type": "any"
          },
          {
            "description": "Returns the modal's footer element.",
            "kind": "class-property",
            "name": "getModalFooterEl",
            "type": "any"
          },
          {
            "description": "Returns the modal's header element.",
            "kind": "class-property",
            "name": "getModalHeaderEl",
            "type": "any"
          }
        ],
        "description": "Allows interaction with a SKY UX modal component.",
        "filePath": "libs/components/modals/testing/src/legacy/modal-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyModalFixture"
      },
      {
        "anchorId": "interface_sky-confirm-button-harness-filters",
        "children": [
          {
            "description": "Only find instances whose style matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "styleType",
            "type": "string"
          },
          {
            "description": "Only find instances whose content matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "text",
            "type": "string | RegExp"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of SkyConfirmButtonHarness instances.",
        "filePath": "libs/components/modals/testing/src/modules/confirm/confirm-button-harness-filters.ts",
        "kind": "interface",
        "name": "SkyConfirmButtonHarnessFilters"
      },
      {
        "anchorId": "class_sky-confirm-button-harness",
        "children": [
          {
            "description": "Clicks the confirm button.",
            "kind": "class-method",
            "name": "click",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the button style of the confirm button.",
            "kind": "class-method",
            "name": "getStyleType",
            "parameters": [],
            "type": "Promise<SkyConfirmButtonStyleType>"
          },
          {
            "description": "Gets the text content of the confirm button.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyConfirmButtonHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyConfirmButtonHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyConfirmButtonHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyConfirmButtonHarness"
          },
          {
            "defaultValue": "'.sky-confirm-buttons .sky-btn'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the confirm button.",
            "kind": "class-property",
            "name": "click",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the button style of the confirm button.",
            "kind": "class-property",
            "name": "getStyleType",
            "type": "Promise<SkyConfirmButtonStyleType>"
          },
          {
            "description": "Gets the text content of the confirm button.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyConfirmButtonHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyConfirmButtonHarness>"
          }
        ],
        "description": "Harness for interacting with a confirm component in tests.",
        "filePath": "libs/components/modals/testing/src/modules/confirm/confirm-button-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyConfirmButtonHarness"
      },
      {
        "anchorId": "class_sky-confirm-harness",
        "children": [
          {
            "description": "Clicks a confirm button.",
            "kind": "class-method",
            "name": "clickCustomButton",
            "parameters": [
              { "name": "filters", "type": "SkyConfirmButtonHarnessFilters" }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks a confirm button.",
            "kind": "class-method",
            "name": "clickOkButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the body of the confirm component.",
            "kind": "class-method",
            "name": "getBodyText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the confirm component's custom buttons.",
            "kind": "class-method",
            "name": "getCustomButtons",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyConfirmButtonHarnessFilters"
              }
            ],
            "type": "Promise<SkyConfirmButtonHarness[]>"
          },
          {
            "description": "Gets the message of the confirm component.",
            "kind": "class-method",
            "name": "getMessageText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the type of the confirm component.",
            "kind": "class-method",
            "name": "getType",
            "parameters": [],
            "type": "Promise<SkyConfirmType>"
          },
          {
            "description": "Whether the whitespace is preserved on the confirm component.",
            "kind": "class-method",
            "name": "isWhiteSpacePreserved",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyConfirmHarness"
          },
          {
            "defaultValue": "'sky-confirm'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks a confirm button.",
            "kind": "class-property",
            "name": "clickCustomButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks a confirm button.",
            "kind": "class-property",
            "name": "clickOkButton",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the body of the confirm component.",
            "kind": "class-property",
            "name": "getBodyText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the confirm component's custom buttons.",
            "kind": "class-property",
            "name": "getCustomButtons",
            "type": "Promise<SkyConfirmButtonHarness[]>"
          },
          {
            "description": "Gets the message of the confirm component.",
            "kind": "class-property",
            "name": "getMessageText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the type of the confirm component.",
            "kind": "class-property",
            "name": "getType",
            "type": "Promise<SkyConfirmType>"
          },
          {
            "description": "Whether the whitespace is preserved on the confirm component.",
            "kind": "class-property",
            "name": "isWhiteSpacePreserved",
            "type": "Promise<boolean>"
          }
        ],
        "description": "Harness for interacting with a confirm component in tests.",
        "filePath": "libs/components/modals/testing/src/modules/confirm/confirm-harness.ts",
        "kind": "class",
        "name": "SkyConfirmHarness"
      },
      {
        "anchorId": "class_sky-confirm-testing-controller",
        "children": [
          {
            "description": "Closes the confirm dialog with the \"cancel\" action.",
            "kind": "class-method",
            "name": "cancel",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Closes the confirm dialog with the provided action.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              { "name": "args", "type": "SkyConfirmCloseEventArgs" }
            ],
            "type": "void"
          },
          {
            "description": "Throws if a confirm dialog is open.",
            "kind": "class-method",
            "name": "expectNone",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Throws if the open confirm dialog does not match the provided configuration.",
            "kind": "class-method",
            "name": "expectOpen",
            "parameters": [{ "name": "config", "type": "SkyConfirmConfig" }],
            "type": "void"
          },
          {
            "description": "Closes the confirm dialog with the \"ok\" action.",
            "kind": "class-method",
            "name": "ok",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyConfirmTestingController"
          },
          {
            "description": "Closes the confirm dialog with the \"cancel\" action.",
            "kind": "class-property",
            "name": "cancel",
            "type": "void"
          },
          {
            "description": "Closes the confirm dialog with the provided action.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          },
          {
            "description": "Throws if a confirm dialog is open.",
            "kind": "class-property",
            "name": "expectNone",
            "type": "void"
          },
          {
            "description": "Throws if the open confirm dialog does not match the provided configuration.",
            "kind": "class-property",
            "name": "expectOpen",
            "type": "void"
          },
          {
            "description": "Closes the confirm dialog with the \"ok\" action.",
            "kind": "class-property",
            "name": "ok",
            "type": "void"
          }
        ],
        "description": "A controller to be injected into tests, which mocks the confirm service and handles interactions with confirm dialogs.",
        "filePath": "libs/components/modals/testing/src/modules/confirm/confirm-testing.controller.ts",
        "kind": "class",
        "name": "SkyConfirmTestingController"
      },
      {
        "anchorId": "class_sky-confirm-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyConfirmTestingModule"
          }
        ],
        "description": "Configures the `SkyConfirmTestingController` as the backend for the `SkyConfirmService`.",
        "filePath": "libs/components/modals/testing/src/modules/confirm/confirm-testing.module.ts",
        "kind": "module",
        "name": "SkyConfirmTestingModule"
      },
      {
        "anchorId": "class_sky-modal-testing-controller",
        "children": [
          {
            "description": "Closes the topmost modal with the provided arguments.",
            "kind": "class-method",
            "name": "closeTopModal",
            "parameters": [
              {
                "description": "Arguments to pass to the modal's close event.",
                "isOptional": true,
                "name": "args",
                "type": "SkyModalCloseArgs"
              }
            ],
            "type": "void"
          },
          {
            "description": "Throws if the provided value does not match the number of open modals.",
            "kind": "class-method",
            "name": "expectCount",
            "parameters": [{ "name": "value", "type": "number" }],
            "type": "void"
          },
          {
            "description": "Throws if modals are open.",
            "kind": "class-method",
            "name": "expectNone",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Throws if the given criteria does not match the topmost open modal.",
            "kind": "class-method",
            "name": "expectOpen",
            "parameters": [{ "name": "component", "type": "Type<TComponent>" }],
            "type": "void",
            "typeParameters": "<TComponent>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalTestingController"
          },
          {
            "description": "Closes the topmost modal with the provided arguments.",
            "kind": "class-property",
            "name": "closeTopModal",
            "type": "void"
          },
          {
            "description": "Throws if the provided value does not match the number of open modals.",
            "kind": "class-property",
            "name": "expectCount",
            "type": "void"
          },
          {
            "description": "Throws if modals are open.",
            "kind": "class-property",
            "name": "expectNone",
            "type": "void"
          },
          {
            "description": "Throws if the given criteria does not match the topmost open modal.",
            "kind": "class-property",
            "name": "expectOpen",
            "type": "void"
          }
        ],
        "description": "A controller to be injected into tests, which mocks the modal service and handles interactions with modal instances. For testing interactions with the modal component itself, use the `SkyModalHarness`.",
        "filePath": "libs/components/modals/testing/src/modules/modal/controller/modal-testing.controller.ts",
        "kind": "class",
        "name": "SkyModalTestingController"
      },
      {
        "anchorId": "class_sky-modal-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalTestingModule"
          }
        ],
        "description": "Configures the `SkyModalTestingController` as the implementation for the `SkyModalService`.",
        "filePath": "libs/components/modals/testing/src/modules/modal/controller/modal-testing.module.ts",
        "kind": "module",
        "name": "SkyModalTestingModule"
      },
      {
        "anchorId": "interface_sky-modal-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyModalHarness instances.",
        "filePath": "libs/components/modals/testing/src/modules/modal/modal-harness-filters.ts",
        "kind": "interface",
        "name": "SkyModalHarnessFilters"
      },
      {
        "anchorId": "class_sky-modal-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the aria-describedBy property of the modal.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getAriaDescribedBy",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the aria-labelledBy property of the modal.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getAriaLabelledBy",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the role of the modal.",
            "kind": "class-method",
            "name": "getAriaRole",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the modal's heading text.",
            "kind": "class-method",
            "name": "getHeadingText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the modal size.",
            "kind": "class-method",
            "name": "getSize",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the wrapper class of the modal.",
            "kind": "class-method",
            "name": "getWrapperClass",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Whether the modal has SkyModalIsDirtyDirective.isDirty set to dirty.",
            "kind": "class-method",
            "name": "isDirty",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the modal is full page.",
            "kind": "class-method",
            "name": "isFullPage",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyModalHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyModalHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyModalHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyModalHarness"
          },
          {
            "defaultValue": "'sky-modal'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the aria-describedBy property of the modal.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getAriaDescribedBy",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the aria-labelledBy property of the modal.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getAriaLabelledBy",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the role of the modal.",
            "kind": "class-property",
            "name": "getAriaRole",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the modal's heading text.",
            "kind": "class-property",
            "name": "getHeadingText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the modal size.",
            "kind": "class-property",
            "name": "getSize",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the wrapper class of the modal.",
            "kind": "class-property",
            "name": "getWrapperClass",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Whether the modal has SkyModalIsDirtyDirective.isDirty set to dirty.",
            "kind": "class-property",
            "name": "isDirty",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the modal is full page.",
            "kind": "class-property",
            "name": "isFullPage",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyModalHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyModalHarness>"
          }
        ],
        "description": "Harness for interacting with a modal component in tests.",
        "filePath": "libs/components/modals/testing/src/modules/modal/modal-harness.ts",
        "kind": "class",
        "name": "SkyModalHarness"
      }
    ],
    "@skyux/navbar": [
      {
        "anchorId": "class_sky-navbar-item-component",
        "children": [
          {
            "description": "Whether the navigation item is active.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "active",
            "type": "undefined | boolean"
          }
        ],
        "description": "Displays a navigation item in the navbar. It can include sub-navigation items in a dropdown menu.",
        "filePath": "lib/modules/navbar/navbar-item.component.ts",
        "kind": "component",
        "name": "SkyNavbarItemComponent",
        "selector": "sky-navbar-item"
      },
      {
        "anchorId": "class_sky-navbar-component",
        "description": "Displays top-level navigation.",
        "filePath": "lib/modules/navbar/navbar.component.ts",
        "kind": "component",
        "name": "SkyNavbarComponent",
        "selector": "sky-navbar"
      },
      {
        "anchorId": "class_sky-navbar-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyNavbarModule"
          }
        ],
        "filePath": "lib/modules/navbar/navbar.module.ts",
        "kind": "module",
        "name": "SkyNavbarModule"
      }
    ],
    "@skyux/router": [
      {
        "anchorId": "class_sky-href-resolver-service",
        "children": [
          {
            "kind": "class-method",
            "name": "resolveHref",
            "parameters": [{ "name": "args", "type": "SkyHrefResolverArgs" }],
            "type": "Promise<SkyHref>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHrefResolverService"
          },
          {
            "kind": "class-property",
            "name": "resolveHref",
            "type": "Promise<SkyHref>"
          }
        ],
        "description": "Return the link as-is.",
        "filePath": "libs/components/router/src/lib/modules/href/href-resolver.service.ts",
        "kind": "service",
        "name": "SkyHrefResolverService"
      },
      {
        "anchorId": "interface_sky-href-resolver",
        "children": [
          {
            "kind": "interface-property",
            "name": "resolveHref",
            "type": "Promise<SkyHref>"
          }
        ],
        "filePath": "libs/components/router/src/lib/modules/href/href-resolver.ts",
        "kind": "interface",
        "name": "SkyHrefResolver"
      },
      {
        "anchorId": "class_sky-href-directive",
        "children": [
          {
            "description": "A collection of query URL parameters.",
            "kind": "directive-input",
            "name": "queryParams",
            "type": "undefined | SkyHrefQueryParams"
          },
          {
            "description": "Provide a link as a string or as an array of strings to be joined by a slash to form a complete URL.",
            "kind": "directive-input",
            "name": "skyHref",
            "type": "string"
          },
          {
            "description": "Set the behavior for when the link is not available to either hide the link or display unlinked text.",
            "kind": "directive-input",
            "name": "skyHrefElse",
            "type": "undefined | \"hide\" | \"unlink\""
          },
          {
            "description": "Emits whether the link is available (true) or not (false).",
            "kind": "directive-output",
            "name": "skyHrefChange",
            "type": "EventEmitter<SkyHrefChange>"
          }
        ],
        "filePath": "libs/components/router/src/lib/modules/href/href.directive.ts",
        "kind": "directive",
        "name": "SkyHrefDirective",
        "selector": "[skyHref]"
      },
      {
        "anchorId": "class_sky-href-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHrefModule"
          }
        ],
        "filePath": "libs/components/router/src/lib/modules/href/href.module.ts",
        "kind": "module",
        "name": "SkyHrefModule"
      },
      {
        "anchorId": "interface_sky-href-change",
        "children": [
          {
            "kind": "interface-property",
            "name": "userHasAccess",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/router/src/lib/modules/href/types/href-change.ts",
        "kind": "interface",
        "name": "SkyHrefChange"
      },
      {
        "anchorId": "type-alias_sky-href-query-params",
        "description": "A collection of query URL parameters.",
        "filePath": "libs/components/router/src/lib/modules/href/types/href-query-params.ts",
        "kind": "type-alias",
        "name": "SkyHrefQueryParams",
        "type": "Record<string, string | undefined>"
      },
      {
        "anchorId": "interface_sky-href-resolver-args",
        "children": [
          { "kind": "interface-property", "name": "url", "type": "string" }
        ],
        "filePath": "libs/components/router/src/lib/modules/href/types/href-resolver.args.ts",
        "kind": "interface",
        "name": "SkyHrefResolverArgs"
      },
      {
        "anchorId": "interface_sky-href",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "aliases",
            "type": "string[]"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "app",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "route",
            "type": "string"
          },
          { "kind": "interface-property", "name": "url", "type": "string" },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "userHasAccess",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/router/src/lib/modules/href/types/href.ts",
        "kind": "interface",
        "name": "SkyHref"
      },
      {
        "anchorId": "class_sky-app-link-external-directive",
        "children": [
          {
            "kind": "directive-input",
            "name": "skyAppLinkExternal",
            "type": "void"
          }
        ],
        "deprecationReason": "Use `skyHref` directive instead.",
        "filePath": "libs/components/router/src/lib/modules/link/link-external.directive.ts",
        "isDeprecated": true,
        "kind": "directive",
        "name": "SkyAppLinkExternalDirective",
        "selector": "[skyAppLinkExternal]"
      },
      {
        "anchorId": "type-alias_sky-app-link-query-params",
        "filePath": "libs/components/router/src/lib/modules/link/link-query-params.ts",
        "kind": "type-alias",
        "name": "SkyAppLinkQueryParams",
        "type": "Record<string, any>"
      },
      {
        "anchorId": "class_sky-app-link-directive",
        "children": [
          { "kind": "directive-input", "name": "skyAppLink", "type": "void" }
        ],
        "filePath": "libs/components/router/src/lib/modules/link/link.directive.ts",
        "kind": "directive",
        "name": "SkyAppLinkDirective",
        "selector": "[skyAppLink]"
      },
      {
        "anchorId": "class_sky-app-link-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppLinkModule"
          }
        ],
        "filePath": "libs/components/router/src/lib/modules/link/link.module.ts",
        "kind": "module",
        "name": "SkyAppLinkModule"
      },
      {
        "anchorId": "interface_sky-recently-accessed-add-link-args",
        "children": [
          {
            "description": "Metadata about the link to add.",
            "kind": "interface-property",
            "name": "link",
            "type": "SkyRecentlyAccessedAddLink"
          }
        ],
        "description": "Parameters for adding a recently accessed link.",
        "filePath": "libs/components/router/src/lib/modules/recently-accessed/recently-accessed-add-link-args.ts",
        "kind": "interface",
        "name": "SkyRecentlyAccessedAddLinkArgs"
      },
      {
        "anchorId": "interface_sky-recently-accessed-add-link-result",
        "children": [
          {
            "description": "The unique identifier for the newly added link.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          }
        ],
        "description": "The result when adding a recently accessed link.",
        "filePath": "libs/components/router/src/lib/modules/recently-accessed/recently-accessed-add-link-result.ts",
        "kind": "interface",
        "name": "SkyRecentlyAccessedAddLinkResult"
      },
      {
        "anchorId": "interface_sky-recently-accessed-add-route-args",
        "children": [
          {
            "description": "The route to the link.",
            "kind": "interface-property",
            "name": "route",
            "type": "ActivatedRouteSnapshot"
          }
        ],
        "description": "Parameters for adding a recently accessed link via an Angular route.",
        "filePath": "libs/components/router/src/lib/modules/recently-accessed/recently-accessed-add-route-args.ts",
        "kind": "interface",
        "name": "SkyRecentlyAccessedAddRouteArgs"
      },
      {
        "anchorId": "interface_sky-recently-accessed-get-links-args",
        "children": [
          {
            "description": "The links to retrieve.",
            "kind": "interface-property",
            "name": "requestedRoutes",
            "type": "Object[]"
          }
        ],
        "description": "Parameters for retrieving a list of recently accessed links.",
        "filePath": "libs/components/router/src/lib/modules/recently-accessed/recently-accessed-get-links-args.ts",
        "kind": "interface",
        "name": "SkyRecentlyAccessedGetLinksArgs"
      },
      {
        "anchorId": "interface_sky-recently-accessed-link-list",
        "children": [
          {
            "description": "An array of recently accessed links.",
            "kind": "interface-property",
            "name": "links",
            "type": "SkyRecentlyAccessedLink[]"
          }
        ],
        "description": "A resolved list of recently accessed links.",
        "filePath": "libs/components/router/src/lib/modules/recently-accessed/recently-accessed-link-list.ts",
        "kind": "interface",
        "name": "SkyRecentlyAccessedLinkList"
      },
      {
        "anchorId": "interface_sky-recently-accessed-link",
        "children": [
          {
            "description": "The label to display for the link.",
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The date the link was last accessed.",
            "kind": "interface-property",
            "name": "lastAccessed",
            "type": "Date"
          },
          {
            "description": "The link's fully-qualified URL.",
            "kind": "interface-property",
            "name": "url",
            "type": "string"
          }
        ],
        "description": "Resolved metadata about a recently accessed link.",
        "filePath": "libs/components/router/src/lib/modules/recently-accessed/recently-accessed-link.ts",
        "kind": "interface",
        "name": "SkyRecentlyAccessedLink"
      },
      {
        "anchorId": "class_sky-recently-accessed-service",
        "children": [
          {
            "description": "Adds a recently accessed link based on metadata about the link.",
            "kind": "class-method",
            "name": "addLink",
            "parameters": [
              {
                "description": "The link to add.",
                "name": "args",
                "type": "SkyRecentlyAccessedAddLinkArgs"
              }
            ],
            "type": "Observable<SkyRecentlyAccessedAddLinkResult>"
          },
          {
            "description": "Adds a recently accessed link based on an Angular route.",
            "kind": "class-method",
            "name": "addRoute",
            "parameters": [
              {
                "description": "The route to add.",
                "name": "args",
                "type": "SkyRecentlyAccessedAddRouteArgs"
              }
            ],
            "type": "Observable<SkyRecentlyAccessedAddLinkResult>"
          },
          {
            "description": "Gets a list of recently accessed links.",
            "kind": "class-method",
            "name": "getLinks",
            "parameters": [
              {
                "description": "The links to retrieve.",
                "name": "args",
                "type": "SkyRecentlyAccessedGetLinksArgs"
              }
            ],
            "type": "Observable<SkyRecentlyAccessedLinkList>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRecentlyAccessedService"
          },
          {
            "description": "Adds a recently accessed link based on metadata about the link.",
            "kind": "class-property",
            "name": "addLink",
            "type": "Observable<SkyRecentlyAccessedAddLinkResult>"
          },
          {
            "description": "Adds a recently accessed link based on an Angular route.",
            "kind": "class-property",
            "name": "addRoute",
            "type": "Observable<SkyRecentlyAccessedAddLinkResult>"
          },
          {
            "description": "Gets a list of recently accessed links.",
            "kind": "class-property",
            "name": "getLinks",
            "type": "Observable<SkyRecentlyAccessedLinkList>"
          }
        ],
        "description": "A service for creating and retrieving recently accessed links.",
        "filePath": "libs/components/router/src/lib/modules/recently-accessed/recently-accessed.service.ts",
        "kind": "service",
        "name": "SkyRecentlyAccessedService"
      }
    ],
    "@skyux/router/testing": [
      {
        "anchorId": "class_sky-href-harness",
        "children": [
          {
            "description": "Gets the href attribute of the host element.",
            "kind": "class-method",
            "name": "getHref",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the visible text.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Returns true if the text is visible.",
            "kind": "class-method",
            "name": "isVisible",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyHrefHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyHrefHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyHrefHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHrefHarness"
          },
          {
            "defaultValue": "'.sky-href'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the href attribute of the host element.",
            "kind": "class-property",
            "name": "getHref",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the visible text.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          },
          {
            "description": "Returns true if the text is visible.",
            "kind": "class-property",
            "name": "isVisible",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyHrefHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyHrefHarness>"
          }
        ],
        "description": "Allows interaction with a SkyHref directive during testing.",
        "filePath": "libs/components/router/testing/src/modules/href/href-harness.ts",
        "kind": "class",
        "name": "SkyHrefHarness"
      },
      {
        "anchorId": "class_sky-href-testing-module",
        "children": [
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [{ "name": "options", "type": "Object" }],
            "type": "ModuleWithProviders<SkyHrefTestingModule>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHrefTestingModule"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "ModuleWithProviders<SkyHrefTestingModule>"
          }
        ],
        "description": "Testing module for the `SkyHref` directive and route resolver.",
        "filePath": "libs/components/router/testing/src/modules/href/href-testing.module.ts",
        "kind": "module",
        "name": "SkyHrefTestingModule"
      }
    ],
    "@skyux/forms": [
      {
        "anchorId": "class_sky-character-counter-indicator-component",
        "filePath": "libs/components/forms/src/lib/modules/character-counter/character-counter-indicator.component.ts",
        "kind": "component",
        "name": "SkyCharacterCounterIndicatorComponent",
        "selector": "sky-character-counter-indicator"
      },
      {
        "anchorId": "class_sky-character-counter-screen-reader-pipe",
        "children": [
          {
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              { "name": "characterCount", "type": "undefined | number" },
              { "name": "characterCountLimit", "type": "undefined | number" }
            ],
            "type": "string"
          },
          { "kind": "class-property", "name": "constructor", "type": "λ23" },
          { "kind": "class-property", "name": "transform", "type": "string" }
        ],
        "filePath": "libs/components/forms/src/lib/modules/character-counter/character-counter-screen-reader.pipe.ts",
        "kind": "pipe",
        "name": "SkyCharacterCounterScreenReaderPipe",
        "templateBindingName": "skyCharacterCounterScreenReader"
      },
      {
        "anchorId": "class_sky-character-counter-input-directive",
        "children": [
          {
            "description": "The character count indicator component that displays the character count, character limit, and over-the-limit indicator. Place this directive on an `input` or `textarea` element.",
            "kind": "directive-input",
            "name": "skyCharacterCounterIndicator",
            "type": "undefined | λ1"
          },
          {
            "description": "The maximum number of characters allowed in the input field. Place this directive on an `input` or `textarea` element. This property accepts `number` values.",
            "kind": "directive-input",
            "name": "skyCharacterCounterLimit",
            "type": "void",
            "isRequired": true
          }
        ],
        "description": "Creates an input field that validates the number of characters. Place this directive on an `input` or `textarea` element. If users enter more characters than allowed, then the input field is invalid and the component displays an error indicator.",
        "filePath": "libs/components/forms/src/lib/modules/character-counter/character-counter.directive.ts",
        "kind": "directive",
        "name": "SkyCharacterCounterInputDirective",
        "selector": "[skyCharacterCounter]"
      },
      {
        "anchorId": "class_sky-character-counter-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCharacterCounterModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/character-counter/character-counter.module.ts",
        "kind": "module",
        "name": "SkyCharacterCounterModule"
      },
      {
        "anchorId": "interface_sky-checkbox-change",
        "children": [
          {
            "description": "The value from the checkbox component.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "checked",
            "type": "boolean"
          }
        ],
        "description": "Fires when users select or deselect the checkbox.",
        "filePath": "libs/components/forms/src/lib/modules/checkbox/checkbox-change.ts",
        "kind": "interface",
        "name": "SkyCheckboxChange"
      },
      {
        "anchorId": "type-alias_sky-checkbox-group-heading-level",
        "filePath": "libs/components/forms/src/lib/modules/checkbox/checkbox-group-heading-level.ts",
        "kind": "type-alias",
        "name": "SkyCheckboxGroupHeadingLevel",
        "type": "3 | 4 | 5"
      },
      {
        "anchorId": "type-alias_sky-checkbox-group-heading-style",
        "filePath": "libs/components/forms/src/lib/modules/checkbox/checkbox-group-heading-style.ts",
        "kind": "type-alias",
        "name": "SkyCheckboxGroupHeadingStyle",
        "type": "3 | 4 | 5"
      },
      {
        "anchorId": "class_sky-checkbox-group-component",
        "children": [
          {
            "description": "Indicates whether to hide the `headingText`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "headingHidden",
            "type": "boolean"
          },
          {
            "description": "The text to display as the checkbox group's heading.",
            "kind": "directive-input",
            "name": "headingText",
            "type": "string"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the checkbox group heading. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the checkbox group fieldset legend. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the checkbox group is required.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "required",
            "type": "boolean"
          },
          {
            "description": "The semantic heading level in the document structure. By default, the heading text is not wrapped in a heading element.",
            "kind": "directive-input",
            "name": "headingLevel",
            "type": "undefined | SkyCheckboxGroupHeadingLevel"
          },
          {
            "description": "The heading [font style](https://developer.blackbaud.com/skyux/design/styles/typography#headings).",
            "defaultValue": "4",
            "kind": "directive-input",
            "name": "headingStyle",
            "type": "void"
          },
          {
            "description": "Whether the checkbox group is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the checkbox group.",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          }
        ],
        "description": "Organizes checkboxes into a group.",
        "filePath": "libs/components/forms/src/lib/modules/checkbox/checkbox-group.component.ts",
        "kind": "component",
        "name": "SkyCheckboxGroupComponent",
        "selector": "sky-checkbox-group"
      },
      {
        "anchorId": "class_sky-checkbox-label-component",
        "deprecationReason": "Use `labelText` input on `sky-checkbox-component` instead.",
        "description": "Specifies a label for the checkbox. To display a help button beside the label, include a help button element, such as `sky-help-inline`, in the `sky-checkbox-label` element and a `sky-control-help` CSS class on that help button element.",
        "filePath": "libs/components/forms/src/lib/modules/checkbox/checkbox-label.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyCheckboxLabelComponent",
        "selector": "sky-checkbox-label"
      },
      {
        "anchorId": "class_sky-checkbox-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the checkbox label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the checkbox label. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "The icon to display in place of the checkbox. To group icon checkboxes like in the demo, place the checkboxes within a `sky-checkbox-group`.",
            "kind": "directive-input",
            "name": "icon",
            "type": "undefined | string"
          },
          {
            "description": "Indicates whether to hide the `labelText`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "labelHidden",
            "type": "boolean"
          },
          {
            "description": "The text to display as the checkbox's label. Use this instead of the `sky-checkbox-label` when the label is text-only. Specifying `labelText` also enables automatic error message handling for checkbox.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the input is required for form validation. When you set this property to `true`, the component adds `aria-required` and `required` attributes to the input element so that forms display an invalid state until the input element is complete.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "required",
            "type": "boolean"
          },
          {
            "description": "Whether the checkbox is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the checkbox. If the checkbox is within a checkbox group, set `stacked` on the checkbox group component instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "description": "The index for the checkbox. If not defined, the index is set to the position of the checkbox on load.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "tabindex",
            "type": "undefined | number"
          },
          {
            "deprecationReason": "checkboxType is no longer supported",
            "description": "The background color type after users select a checkbox where the `icon` property displays an icon in place of the checkbox. The valid options correspond to [the label component's](https://developer.blackbaud.com/skyux/components/label) label types. `\"info\"` creates a blue background, `\"success\"` creates a green background, `\"warning\"` creates an orange background, and `\"danger\"` creates a red background.",
            "defaultValue": "\"info\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "checkboxType",
            "type": "string"
          },
          {
            "description": "Whether the checkbox is selected.",
            "kind": "directive-input",
            "name": "checked",
            "type": "boolean"
          },
          {
            "description": "Whether the checkbox is disabled.",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The ID for the checkbox. If a value is not provided, an autogenerated ID is used.",
            "kind": "directive-input",
            "name": "id",
            "type": "void"
          },
          {
            "description": "Whether the checkbox is in the indeterminate state. This has no visual effect for icon checkboxes.",
            "kind": "directive-input",
            "name": "indeterminate",
            "type": "boolean"
          },
          {
            "deprecationReason": "Use `labelText` instead.",
            "description": "The ARIA label for the checkbox. This sets the checkbox's `aria-label` attribute [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility) when the checkbox does not include a visible label. You must set this property for icon checkboxes. If the checkbox includes a visible label, use `labelledBy` instead.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "label",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Use `labelText` instead.",
            "description": "The HTML element ID of the element that labels the checkbox. This sets the checkbox's `aria-labelledby` attribute [to support accessibility](https://developer.blackbaud.com/skyux/components/checkbox#accessibility). If the checkbox does not include a visible label, use `label` instead.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "labelledBy",
            "type": "undefined | string"
          },
          {
            "description": "The name for the checkbox. If a value is not provided, an autogenerated ID is used.",
            "kind": "directive-input",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Fires when the selected value changes.",
            "kind": "directive-output",
            "name": "change",
            "type": "EventEmitter<SkyCheckboxChange>"
          },
          {
            "description": "Fires when users select or deselect the checkbox.",
            "kind": "directive-output",
            "name": "checkedChange",
            "type": "Observable<boolean>"
          },
          {
            "description": "Fires when the selected value changes.",
            "kind": "directive-output",
            "name": "disabledChange",
            "type": "Observable<boolean>"
          },
          {
            "description": "Fires when the indeterminate state changes.",
            "kind": "directive-output",
            "name": "indeterminateChange",
            "type": "Observable<boolean>"
          }
        ],
        "description": "Replaces the HTML input element with `type=\"checkbox\"`. When users select a checkbox, its value is driven through an `ngModel` attribute that you specify on the `sky-checkbox` element.",
        "filePath": "libs/components/forms/src/lib/modules/checkbox/checkbox.component.ts",
        "kind": "component",
        "name": "SkyCheckboxComponent",
        "selector": "sky-checkbox"
      },
      {
        "anchorId": "class_sky-checkbox-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCheckboxModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/checkbox/checkbox.module.ts",
        "kind": "module",
        "name": "SkyCheckboxModule"
      },
      {
        "anchorId": "type-alias_sky-field-group-heading-level",
        "filePath": "libs/components/forms/src/lib/modules/field-group/field-group-heading-level.ts",
        "kind": "type-alias",
        "name": "SkyFieldGroupHeadingLevel",
        "type": "3 | 4"
      },
      {
        "anchorId": "type-alias_sky-field-group-heading-style",
        "filePath": "libs/components/forms/src/lib/modules/field-group/field-group-heading-style.ts",
        "kind": "type-alias",
        "name": "SkyFieldGroupHeadingStyle",
        "type": "3 | 4"
      },
      {
        "anchorId": "class_sky-field-group-component",
        "children": [
          {
            "description": "Indicates whether to hide the `headingText`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "headingHidden",
            "type": "boolean"
          },
          {
            "description": "The semantic heading level in the document structure.",
            "defaultValue": "3",
            "kind": "directive-input",
            "name": "headingLevel",
            "type": "SkyFieldGroupHeadingLevel"
          },
          {
            "description": "The text to display as the field group's heading.",
            "kind": "directive-input",
            "name": "headingText",
            "type": "string"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the field group heading. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the field group heading. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the field group is stacked on another field group. When specified, the appropriate vertical spacing is automatically added to the field group.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "description": "The heading [font style](https://developer.blackbaud.com/skyux/design/styles/typography#headings).",
            "defaultValue": "3",
            "kind": "directive-input",
            "name": "headingStyle",
            "type": "void"
          }
        ],
        "description": "Organizes form fields into a group.",
        "filePath": "libs/components/forms/src/lib/modules/field-group/field-group.component.ts",
        "kind": "component",
        "name": "SkyFieldGroupComponent",
        "selector": "sky-field-group"
      },
      {
        "anchorId": "class_sky-field-group-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFieldGroupModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/field-group/field-group.module.ts",
        "kind": "module",
        "name": "SkyFieldGroupModule"
      },
      {
        "anchorId": "interface_sky-file-attachment-change",
        "children": [
          {
            "description": "The file that was added, or undefined if the file was removed.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "file",
            "type": "SkyFileItem"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-attachment/file-attachment-change.ts",
        "kind": "interface",
        "name": "SkyFileAttachmentChange"
      },
      {
        "anchorId": "interface_sky-file-attachment-click",
        "children": [
          {
            "description": "The file that was clicked.",
            "kind": "interface-property",
            "name": "file",
            "type": "SkyFileItem"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-attachment/file-attachment-click.ts",
        "kind": "interface",
        "name": "SkyFileAttachmentClick"
      },
      {
        "anchorId": "class_sky-file-attachment-label-component",
        "deprecationReason": "Use the `labelText` input on the single file attachment component\ninstead.",
        "description": "Displays a label above the file attachment element. To display a help button beside the label, include a help button element, such as `sky-help-inline`, in the `sky-file-attachment-label` element and a `sky-control-help` CSS class on that help button element.",
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-attachment/file-attachment-label.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyFileAttachmentLabelComponent",
        "selector": "sky-file-attachment-label"
      },
      {
        "anchorId": "class_sky-file-attachment-component",
        "children": [
          {
            "description": "The comma-delimited string literal of MIME types that users can attach. By default, all file types are allowed.",
            "kind": "directive-input",
            "name": "acceptedTypes",
            "type": "undefined | string",
            "isRequired": true
          },
          {
            "description": "A custom error message to display when a file doesn't match the accepted types. This replaces a default error message that lists all accepted types.",
            "kind": "directive-input",
            "name": "acceptedTypesErrorMessage",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the input on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the single file attachment label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the single file attachment label. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether to hide `labelText` from view.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "labelHidden",
            "type": "boolean"
          },
          {
            "description": "The text to display as the file attachment's label.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the input is required for form validation. When you set this property to `true`, the component adds `aria-required` and `required` attributes to the input element so that forms display an invalid state until the input element is complete. For more information about the `aria-required` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-required).",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "required",
            "type": "boolean"
          },
          {
            "description": "Whether the single file attachment is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the single file attachment.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "deprecationReason": "Add a custom Angular `Validator` function to the `FormControl` instead.",
            "description": "The custom validation function. This validation runs alongside the internal file validation. This function takes a `SkyFileItem` object as a parameter.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "validateFn",
            "type": "undefined | SkyFileValidateFn"
          },
          {
            "description": "The maximum size in bytes for valid files.",
            "defaultValue": "500000",
            "kind": "directive-input",
            "name": "maxFileSize",
            "type": "number"
          },
          {
            "description": "The minimum size in bytes for valid files.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "minFileSize",
            "type": "number"
          },
          {
            "deprecationReason": "Subscribe to the form control's `valueChanges` event instead.",
            "description": "Fires when users add or remove files.",
            "isDeprecated": true,
            "kind": "directive-output",
            "name": "fileChange",
            "type": "EventEmitter<SkyFileAttachmentChange>"
          },
          {
            "description": "Fires when users select the file name link.",
            "kind": "directive-output",
            "name": "fileClick",
            "type": "EventEmitter<SkyFileAttachmentClick>"
          }
        ],
        "description": "Provides an element to attach a single local file.",
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-attachment/file-attachment.component.ts",
        "kind": "component",
        "name": "SkyFileAttachmentComponent",
        "selector": "sky-file-attachment"
      },
      {
        "anchorId": "class_sky-file-attachment-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFileAttachmentModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-attachment/file-attachment.module.ts",
        "kind": "module",
        "name": "SkyFileAttachmentModule"
      },
      {
        "anchorId": "class_sky-file-attachments-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFileAttachmentsModule"
          }
        ],
        "deprecationReason": "Import either `SkyFileAttachmentModule` or `SkyFileDropModule`.",
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-attachments.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyFileAttachmentsModule"
      },
      {
        "anchorId": "interface_sky-file-drop-change",
        "children": [
          {
            "description": "The array of files that were added or removed.",
            "kind": "interface-property",
            "name": "files",
            "type": "SkyFileItem[]"
          },
          {
            "description": "The array of files that were rejected.",
            "kind": "interface-property",
            "name": "rejectedFiles",
            "type": "SkyFileItem[]"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-drop/file-drop-change.ts",
        "kind": "interface",
        "name": "SkyFileDropChange"
      },
      {
        "anchorId": "class_sky-file-drop-component",
        "children": [
          {
            "description": "The comma-delimited string literal of MIME types that users can attach. By default, all file types are allowed.",
            "kind": "directive-input",
            "name": "acceptedTypes",
            "type": "undefined | string",
            "isRequired": true
          },
          {
            "description": "A custom error message to display when a file doesn't match the accepted types. This replaces a default error message that lists all accepted types.",
            "kind": "directive-input",
            "name": "acceptedTypesErrorMessage",
            "type": "undefined | string"
          },
          {
            "description": "Whether to display the option to attach files from URLs rather than from local devices.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "allowLinks",
            "type": "undefined | boolean"
          },
          {
            "description": "The ARIA label for the file upload button. This provides a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "defaultValue": "\"Drag a file here or click to browse\"",
            "kind": "directive-input",
            "name": "fileUploadAriaLabel",
            "type": "undefined | string"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the file attachment label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the file attachment label. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether to hide `labelText` from view.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "labelHidden",
            "type": "boolean"
          },
          {
            "description": "The text to display as the file attachment's label.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "The ARIA label for the link upload input. This sets the button's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "defaultValue": "\"Link to a file\"",
            "kind": "directive-input",
            "name": "linkUploadAriaLabel",
            "type": "undefined | string"
          },
          {
            "description": "The hint text for the link upload input.",
            "kind": "directive-input",
            "name": "linkUploadHintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether users can drag and drop multiple files at the same time.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "multiple",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to disable the option to browse for files to attach.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "noClick",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether uploading a file or link is required. When you set this property to `true`, the component adds `aria-required` and `required` attributes to the input elements so that screen readers announce an invalid state until the input element is complete. For more information about the `aria-required` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-required).",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "required",
            "type": "boolean"
          },
          {
            "description": "Whether the file attachment is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the file attachment.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "description": "The custom validation function. This validation runs alongside the internal file validation. This function takes a `SkyFileItem` object as a parameter. The string returned is used as the error message in multi-file attachment.",
            "kind": "directive-input",
            "name": "validateFn",
            "type": "undefined | SkyFileValidateFn"
          },
          {
            "description": "The maximum size in bytes for valid files.",
            "defaultValue": "500000",
            "kind": "directive-input",
            "name": "maxFileSize",
            "type": "number"
          },
          {
            "description": "The minimum size in bytes for valid files.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "minFileSize",
            "type": "number"
          },
          {
            "description": "Fires when users add or remove files.",
            "kind": "directive-output",
            "name": "filesChanged",
            "type": "EventEmitter<SkyFileDropChange>"
          },
          {
            "description": "Fires when users add or remove links.",
            "kind": "directive-output",
            "name": "linkChanged",
            "type": "EventEmitter<SkyFileLink>"
          },
          {
            "description": "Fires when the link input box triggers a blur event.",
            "kind": "directive-output",
            "name": "linkInputBlur",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Provides an element to attach multiple files where users can browse or drag and drop local files or provide hyperlinks to external files. You can leave the contents of the component blank to display the drop zone's default UI, or you can specify custom content to display instead. When the module initializes, it disables the ability to drag and drop files for the entire window to prevent the browser from opening files that are accidentally dropped outside the target zone. If you implement your own file drop functionality outside of the file drop component, you can place the `sky-file-drop-target` CSS class on the element that receives drop events to exempt it from the drop exclusion rule.",
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-drop/file-drop.component.ts",
        "kind": "component",
        "name": "SkyFileDropComponent",
        "selector": "sky-file-drop"
      },
      {
        "anchorId": "class_sky-file-drop-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFileDropModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-drop/file-drop.module.ts",
        "kind": "module",
        "name": "SkyFileDropModule"
      },
      {
        "anchorId": "class_sky-file-item-component",
        "children": [
          {
            "description": "The summary information to display about file attachments. For local files, the default summary includes the file name, file size, file preview, and a delete button. For external files, the default summary includes the URL and a delete button. You can include additional inputs to display user-entered metadata.",
            "kind": "directive-input",
            "name": "fileItem",
            "type": "undefined | SkyFileItem | SkyFileLink",
            "isRequired": true
          },
          {
            "description": "Fires when users select the delete button for an item. The deleted item is passed to the function.",
            "kind": "directive-output",
            "name": "deleteFile",
            "type": "EventEmitter<SkyFileItem | SkyFileLink>"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-drop/file-item.component.ts",
        "kind": "component",
        "name": "SkyFileItemComponent",
        "selector": "sky-file-item"
      },
      {
        "anchorId": "interface_sky-file-link",
        "children": [
          {
            "description": "The URL for the linked file.",
            "kind": "interface-property",
            "name": "url",
            "type": "string"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/file-drop/file-link.ts",
        "kind": "interface",
        "name": "SkyFileLink"
      },
      {
        "anchorId": "type-alias_sky-file-item-error-type",
        "description": "The type of error that was thrown.",
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/shared/file-item-error-type.ts",
        "kind": "type-alias",
        "name": "SkyFileItemErrorType",
        "type": "\"fileType\" | \"minFileSize\" | \"maxFileSize\" | \"validate\""
      },
      {
        "anchorId": "interface_sky-file-item",
        "children": [
          {
            "description": "Additional parameters about the error that caused the file to be rejected.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "errorParam",
            "type": "string"
          },
          {
            "description": "The type of error that caused the file to be rejected.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "errorType",
            "type": "SkyFileItemErrorType"
          },
          {
            "description": "The object that was added or removed.",
            "kind": "interface-property",
            "name": "file",
            "type": "File"
          },
          {
            "description": "The [data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) for the file that was added or removed.",
            "kind": "interface-property",
            "name": "url",
            "type": "string"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/shared/file-item.ts",
        "kind": "interface",
        "name": "SkyFileItem"
      },
      {
        "anchorId": "class_sky-file-size-pipe",
        "children": [
          {
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              {
                "isOptional": true,
                "name": "input",
                "type": "null | string | number"
              }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFileSizePipe"
          },
          { "kind": "class-property", "name": "transform", "type": "string" }
        ],
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/shared/file-size.pipe.ts",
        "isInternal": true,
        "kind": "pipe",
        "name": "SkyFileSizePipe",
        "templateBindingName": "skyFileSize"
      },
      {
        "anchorId": "type-alias_sky-file-validate-fn",
        "description": "Custom validation run on each file uploaded. The string returned is used as the error message in multi-file attachment.",
        "filePath": "libs/components/forms/src/lib/modules/file-attachment/shared/file-validate-function.ts",
        "kind": "type-alias",
        "name": "SkyFileValidateFn",
        "type": "Function"
      },
      {
        "anchorId": "class_sky-form-error-component",
        "children": [
          {
            "description": "The name of the error.",
            "kind": "directive-input",
            "name": "errorName",
            "type": "string",
            "isRequired": true
          },
          {
            "description": "The error message to display.",
            "kind": "directive-input",
            "name": "errorText",
            "type": "string",
            "isRequired": true
          }
        ],
        "description": "Displays default and custom form field error messages for form field components. Set `labelText` on the form field component to automatically display required, maximum length, minimum length, date, email, phone number, time, and URL errors. To display custom errors, include sky-form-error elements in the form field component.",
        "filePath": "libs/components/forms/src/lib/modules/form-error/form-error.component.ts",
        "kind": "component",
        "name": "SkyFormErrorComponent",
        "selector": "sky-form-error"
      },
      {
        "anchorId": "class_sky-form-error-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFormErrorModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/form-error/form-error.module.ts",
        "kind": "module",
        "name": "SkyFormErrorModule"
      },
      {
        "anchorId": "variable_sky-form-errors-enabled",
        "filePath": "libs/components/forms/src/lib/modules/form-error/form-errors-enabled-token.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "SKY_FORM_ERRORS_ENABLED",
        "type": "InjectionToken<boolean>"
      },
      {
        "anchorId": "class_sky-form-errors-component",
        "children": [
          {
            "description": "Indicates whether the parent component's control is dirty",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "dirty",
            "type": "boolean"
          },
          {
            "description": "The validation errors from the form control.",
            "kind": "directive-input",
            "name": "errors",
            "type": "undefined | null | ValidationErrors"
          },
          {
            "description": "Input label text to display in the error messages.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "Indicates whether the parent component's control is touched",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "touched",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/form-error/form-errors.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyFormErrorsComponent",
        "selector": "sky-form-errors"
      },
      {
        "anchorId": "class_sky-form-errors-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFormErrorsModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/form-error/form-errors.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyFormErrorsModule"
      },
      {
        "anchorId": "class_sky-input-box-control-directive",
        "children": [
          {
            "kind": "directive-input",
            "name": "autocomplete",
            "type": "undefined | string"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/input-box/input-box-control.directive.ts",
        "isInternal": true,
        "kind": "directive",
        "name": "SkyInputBoxControlDirective",
        "selector": "input:not([skyId]):not(.sky-form-control),select:not([skyId]):not(.sky-form-control),textarea:not([skyId]):not(.sky-form-control)"
      },
      {
        "anchorId": "class_sky-input-box-hint-text-pipe",
        "children": [
          {
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              { "isOptional": true, "name": "hintText", "type": "string" },
              { "isOptional": true, "name": "hostHintText", "type": "string" }
            ],
            "type": "undefined | string"
          },
          { "kind": "class-property", "name": "constructor", "type": "λ26" },
          {
            "kind": "class-property",
            "name": "transform",
            "type": "undefined | string"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/input-box/input-box-hint-text.pipe.ts",
        "isInternal": true,
        "kind": "pipe",
        "name": "SkyInputBoxHintTextPipe",
        "templateBindingName": "skyInputBoxHintText"
      },
      {
        "anchorId": "class_sky-input-box-host-service",
        "children": [
          {
            "kind": "class-method",
            "name": "init",
            "parameters": [{ "name": "host", "type": "λ10" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "populate",
            "parameters": [
              { "name": "args", "type": "SkyInputBoxPopulateArgs" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "setHintText",
            "parameters": [
              { "name": "hintText", "type": "undefined | string" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "setHintTextHidden",
            "parameters": [{ "name": "hide", "type": "boolean" }],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "setHintTextScreenReaderOnly",
            "parameters": [{ "name": "hide", "type": "boolean" }],
            "type": "void"
          },
          {
            "description": "Set required so that input box displays the label correctly. When the input is supplied by the consumer it is a content child that input box can read required from and this is unnecessary. When the input is supplied internally by the component the input box does not have a ref to it, so the component needs to inform the input box of its required state.",
            "kind": "class-method",
            "name": "setRequired",
            "parameters": [{ "name": "required", "type": "boolean" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInputBoxHostService"
          },
          {
            "kind": "class-property",
            "name": "required",
            "type": "Observable<boolean>"
          },
          {
            "kind": "class-property",
            "name": "ariaDescribedBy",
            "type": "undefined | Observable<undefined | string>"
          },
          { "kind": "class-property", "name": "controlId", "type": "string" },
          { "kind": "class-property", "name": "labelId", "type": "string" },
          { "kind": "class-property", "name": "labelText", "type": "string" },
          { "kind": "class-property", "name": "init", "type": "void" },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          { "kind": "class-property", "name": "populate", "type": "void" },
          { "kind": "class-property", "name": "setHintText", "type": "void" },
          {
            "kind": "class-property",
            "name": "setHintTextHidden",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "setHintTextScreenReaderOnly",
            "type": "void"
          },
          {
            "description": "Set required so that input box displays the label correctly. When the input is supplied by the consumer it is a content child that input box can read required from and this is unnecessary. When the input is supplied internally by the component the input box does not have a ref to it, so the component needs to inform the input box of its required state.",
            "kind": "class-property",
            "name": "setRequired",
            "type": "void"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/input-box/input-box-host.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyInputBoxHostService"
      },
      {
        "anchorId": "interface_sky-input-box-populate-args",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttonsInsetTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttonsLeftTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "buttonsTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "iconsInsetLeftTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "iconsInsetTemplate",
            "type": "TemplateRef<unknown>"
          },
          {
            "kind": "interface-property",
            "name": "inputTemplate",
            "type": "TemplateRef<unknown>"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/input-box/input-box-populate-args.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyInputBoxPopulateArgs"
      },
      {
        "anchorId": "class_sky-input-box-component",
        "children": [
          {
            "description": "Whether to visually highlight the input box as disabled. To disable the input box's input element, use the HTML `disabled` attribute or the Angular `FormControl.disabled` property. If the input element is mapped to an Angular form control (e.g. `formControlName`, `ngModel`, etc.), \"disabled\" styles are applied automatically; if the input element is not associated with an Angular form control, the `disabled` property on the input box must be set to `true` to visually indicate the disabled state on the input box.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to visually highlight the input box in an error state. If not specified, the input box displays in an error state when either the `ngModel` or the Angular `FormControl` contains an error.",
            "defaultValue": "undefined",
            "kind": "directive-input",
            "name": "hasErrors",
            "type": "undefined | boolean"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the input box label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the input box label. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "The text to display as the input's label and in known validation error messages. The label will automatically be associated with the `input`, `select`, `textarea`, or compatible SKY UX component included in the input box.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "The maximum number of characters allowed in the input. A [SKY UX character count](https://developer.blackbaud.com/skyux/components/character-count) will be placed on the input element with the appropriate validator.",
            "kind": "directive-input",
            "name": "characterLimit",
            "type": "undefined | number"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the input box is stacked on another input box. When specified, the appropriate vertical spacing is automatically added to the input box.",
            "kind": "directive-input",
            "name": "stacked",
            "type": "void"
          }
        ],
        "description": "A wrapper component that provides styling and accessibility to form elements.",
        "filePath": "libs/components/forms/src/lib/modules/input-box/input-box.component.ts",
        "kind": "component",
        "name": "SkyInputBoxComponent",
        "selector": "sky-input-box"
      },
      {
        "anchorId": "class_sky-input-box-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInputBoxModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/input-box/input-box.module.ts",
        "kind": "module",
        "name": "SkyInputBoxModule"
      },
      {
        "anchorId": "class_sky-radio-group-component",
        "children": [
          {
            "description": "Indicates whether to hide the `headingText`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "headingHidden",
            "type": "boolean"
          },
          {
            "description": "The text to display as the radio group's heading.",
            "kind": "directive-input",
            "name": "headingText",
            "type": "undefined | string"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the radio group heading. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `headingText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to radio group. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `headingText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the input is required for form validation. When you set this property to `true`, the component adds `aria-required` and `required` attributes to the input element so that forms display an invalid state until the input element is complete. For more information about the `aria-required` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-required).",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "required",
            "type": "boolean"
          },
          {
            "deprecationReason": "Use `headingText` instead.",
            "description": "The ARIA label for the radio button group. This sets the radio button group's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the radio button group includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Use `headingText` instead.",
            "description": "The HTML element ID of the element that labels the radio button group. This sets the radio button group's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the radio button group does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the input on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The semantic heading level in the document structure. By default, the heading text is not wrapped in a heading element.",
            "kind": "directive-input",
            "name": "headingLevel",
            "type": "undefined | SkyRadioGroupHeadingLevel"
          },
          {
            "description": "The heading [font style](https://developer.blackbaud.com/skyux/design/styles/typography#headings).",
            "defaultValue": "4",
            "kind": "directive-input",
            "name": "headingStyle",
            "type": "void"
          },
          {
            "description": "The name for the collection of radio buttons that the component groups together. This property overwrites the deprecated `name` property on individual `sky-radio` elements, and it is required unless the `name` property is set on individual `sky-radio` elements.",
            "kind": "directive-input",
            "name": "name",
            "type": "string",
            "isRequired": true
          },
          {
            "description": "Whether the radio button group is stacked on another form component. When specified, the appropriate vertical spacing is automatically added to the radio button group.",
            "kind": "directive-input",
            "name": "stacked",
            "type": "boolean"
          },
          {
            "description": "The index for all the radio buttons in the group. If the index is not defined, the indices for individual radio buttons are set to their positions on load. This property supports accessibility by placing focus on the currently selected radio button. If no radio button is selected, it places focus on the first or last button depending on how users navigate to the radio button group.",
            "kind": "directive-input",
            "name": "tabIndex",
            "type": "undefined | number"
          },
          {
            "description": "The value of the radio button to select by default when the group loads. The value corresponds to the `value` property of an individual `sky-radio` element within the group.",
            "kind": "directive-input",
            "name": "value",
            "type": "void"
          }
        ],
        "description": "Organizes radio buttons into a group. It is required for radio buttons on Angular reactive forms, and we recommend using it with all radio buttons. On Angular forms, the component manages the selected values and keeps the forms up-to-date. When users select a radio button, its value is driven through an `ngModel` attribute that you specify on the `sky-radio-group` element.",
        "filePath": "libs/components/forms/src/lib/modules/radio/radio-group.component.ts",
        "kind": "component",
        "name": "SkyRadioGroupComponent",
        "selector": "sky-radio-group"
      },
      {
        "anchorId": "class_sky-radio-label-component",
        "deprecationReason": "Use `labelText` input on `sky-radio-component` instead.",
        "description": "Specifies a label for the radio button. To display a help button beside the label, include a help button element, such as `sky-help-inline`, in the `sky-radio-label` element and a `sky-control-help` CSS class on that help button element.",
        "filePath": "libs/components/forms/src/lib/modules/radio/radio-label.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyRadioLabelComponent",
        "selector": "sky-radio-label"
      },
      {
        "anchorId": "class_sky-radio-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the radio button label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to radio button. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "[Persistent inline help text](https://developer.blackbaud.com/skyux/design/guidelines/user-assistance#inline-help) that provides additional context to the user.",
            "kind": "directive-input",
            "name": "hintText",
            "type": "undefined | string"
          },
          {
            "description": "The icon to display in place of the radio button. To group radio buttons like in the demo above, place the `sky-switch-icon-group` class on the direct parent element of the radio buttons.",
            "kind": "directive-input",
            "name": "icon",
            "type": "undefined | string"
          },
          {
            "description": "Indicates whether to hide the `labelText`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "labelHidden",
            "type": "boolean"
          },
          {
            "description": "The text to display as the radio button's label. Use this instead of the `sky-radio-label` when the label is text-only.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "Whether the radio button is selected.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "checked",
            "type": "boolean"
          },
          {
            "description": "Whether to disable the input on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The ID for the radio button. If a value is not provided, an autogenerated ID is used.",
            "kind": "directive-input",
            "name": "id",
            "type": "void"
          },
          {
            "deprecationReason": "Use `labelText` instead.",
            "description": "The ARIA label for the radio button. This sets the radio button's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) when the radio button does not include a visible label. You must set this property for icon radio buttons. If the radio button includes a visible label, use `labelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "label",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Use `labelText` instead.",
            "description": "The HTML element ID of the element that labels the radio button. This sets the radio button's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the radio button does not include a visible label, use `label` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "labelledBy",
            "type": "undefined | string"
          },
          {
            "description": "This property is deprecated in favor of the `name` property on the `sky-radio-group element`. We recommend using the `sky-radio-group` element with all radio buttons, but if you opt not to, then this property specifies a name for a group of radio buttons.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "name",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "radioType is no longer supported",
            "description": "The background color type after users select an icon radio button. The valid options correspond [the label component's](https://developer.blackbaud.com/skyux/components/label) label types. `danger` creates a red background, `info` creates a blue background, `success` creates a green background, and `warning` creates an orange background.",
            "defaultValue": "\"info\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "radioType",
            "type": "SkyRadioType"
          },
          {
            "description": "This property is deprecated in favor of the `tabIndex` property on the `sky-radio-group` element. It specifies an index for the radio button. If the index is not defined, it is set to the position of the radio button on load.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "tabindex",
            "type": "number"
          },
          {
            "description": "The value bound to the radio button's `value` property. The value usually corresponds to the radio button's label, which you specify with the `sky-radio-label` component.",
            "kind": "directive-input",
            "name": "value",
            "type": "any",
            "isRequired": true
          },
          {
            "description": "Fires when users select a radio button.",
            "kind": "directive-output",
            "name": "change",
            "type": "EventEmitter<SkyRadioChange>"
          },
          {
            "description": "Fires when the selected value changes.",
            "kind": "directive-output",
            "name": "checkedChange",
            "type": "EventEmitter<boolean>"
          },
          {
            "description": "Fires when the selected value changes.",
            "kind": "directive-output",
            "name": "disabledChange",
            "type": "EventEmitter<boolean>"
          }
        ],
        "description": "Renders a SKY UX-themed replacement for an HTML `input` element with `type=\"radio\"`. When users select a radio button, its value is driven through an `ngModel` attribute that you specify on the `sky-radio` element or the parent `sky-radio-group` element.",
        "filePath": "libs/components/forms/src/lib/modules/radio/radio.component.ts",
        "kind": "component",
        "name": "SkyRadioComponent",
        "selector": "sky-radio"
      },
      {
        "anchorId": "class_sky-radio-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRadioModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/radio/radio.module.ts",
        "kind": "module",
        "name": "SkyRadioModule"
      },
      {
        "anchorId": "interface_sky-radio-change",
        "children": [
          {
            "description": "The value from the radio component.",
            "kind": "interface-property",
            "name": "value",
            "type": "any"
          }
        ],
        "description": "Fires when users select a radio button.",
        "filePath": "libs/components/forms/src/lib/modules/radio/types/radio-change.ts",
        "kind": "interface",
        "name": "SkyRadioChange"
      },
      {
        "anchorId": "type-alias_sky-radio-group-heading-level",
        "filePath": "libs/components/forms/src/lib/modules/radio/types/radio-group-heading-level.ts",
        "kind": "type-alias",
        "name": "SkyRadioGroupHeadingLevel",
        "type": "3 | 4 | 5"
      },
      {
        "anchorId": "type-alias_sky-radio-group-heading-style",
        "filePath": "libs/components/forms/src/lib/modules/radio/types/radio-group-heading-style.ts",
        "kind": "type-alias",
        "name": "SkyRadioGroupHeadingStyle",
        "type": "3 | 4 | 5"
      },
      {
        "anchorId": "type-alias_sky-radio-type",
        "deprecationReason": "radioType is no longer supported",
        "filePath": "libs/components/forms/src/lib/modules/radio/types/radio-type.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "SkyRadioType",
        "type": "\"danger\" | \"info\" | \"success\" | \"warning\""
      },
      {
        "anchorId": "class_sky-required-state-directive",
        "children": [
          {
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "required",
            "type": "boolean"
          }
        ],
        "description": "A host directive used to capture the \"required\" state of the host's form control.",
        "filePath": "libs/components/forms/src/lib/modules/required-state/required-state.directive.ts",
        "isInternal": true,
        "kind": "directive",
        "name": "SkyRequiredStateDirective",
        "selector": ""
      },
      {
        "anchorId": "class_sky-selection-box-description-component",
        "description": "Specifies the description to display in a selection box.",
        "filePath": "libs/components/forms/src/lib/modules/selection-box/selection-box-description.component.ts",
        "kind": "component",
        "name": "SkySelectionBoxDescriptionComponent",
        "selector": "sky-selection-box-description"
      },
      {
        "anchorId": "class_sky-selection-box-grid-component",
        "children": [
          {
            "description": "How to display the selection boxes in the grid.",
            "defaultValue": "'center'",
            "kind": "directive-input",
            "name": "alignItems",
            "type": "SkySelectionBoxGridAlignItemsType"
          }
        ],
        "description": "Creates a grid layout for an array of selection boxes.",
        "filePath": "libs/components/forms/src/lib/modules/selection-box/selection-box-grid.component.ts",
        "kind": "component",
        "name": "SkySelectionBoxGridComponent",
        "selector": "sky-selection-box-grid"
      },
      {
        "anchorId": "class_sky-selection-box-header-component",
        "description": "Specifies the header to display in a selection box.",
        "filePath": "libs/components/forms/src/lib/modules/selection-box/selection-box-header.component.ts",
        "kind": "component",
        "name": "SkySelectionBoxHeaderComponent",
        "selector": "sky-selection-box-header"
      },
      {
        "anchorId": "class_sky-selection-box-component",
        "children": [
          {
            "description": "The radio button or checkbox to display in the selection box.",
            "kind": "directive-input",
            "name": "control",
            "type": "undefined | λ3 | λ13",
            "isRequired": true
          }
        ],
        "description": "Creates a button to present users with a choice or question before proceeding with a one-time process.",
        "filePath": "libs/components/forms/src/lib/modules/selection-box/selection-box.component.ts",
        "kind": "component",
        "name": "SkySelectionBoxComponent",
        "selector": "sky-selection-box"
      },
      {
        "anchorId": "class_sky-selection-box-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySelectionBoxModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/selection-box/selection-box.module.ts",
        "kind": "module",
        "name": "SkySelectionBoxModule"
      },
      {
        "anchorId": "type-alias_sky-selection-box-grid-align-items-type",
        "filePath": "libs/components/forms/src/lib/modules/selection-box/types/selection-box-grid-align-items-type.ts",
        "isInternal": true,
        "kind": "type-alias",
        "name": "SkySelectionBoxGridAlignItemsType",
        "type": "\"center\" | \"left\""
      },
      {
        "anchorId": "enum_sky-selection-box-grid-align-items",
        "deprecationReason": "Use `SkySelectionBoxGridAlignItemsType` instead.",
        "filePath": "libs/components/forms/src/lib/modules/selection-box/types/selection-box-grid-align-items.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "Center-aligns the selection boxes.",
            "kind": "enum-member",
            "name": "Center",
            "type": "\"center\""
          },
          {
            "description": "Left-aligns the selection boxes.",
            "kind": "enum-member",
            "name": "Left",
            "type": "\"left\""
          }
        ],
        "name": "SkySelectionBoxGridAlignItems"
      },
      {
        "anchorId": "class_sky-toggle-switch-label-component",
        "deprecationReason": "Use the `labelText` input on the toggle switch component instead.",
        "description": "Specifies the label to display beside the toggle switch. To display a help button beside the label, include a help button element, such as `sky-help-inline`, in the `sky-toggle-switch` element and a `sky-control-help` CSS class on that help button element.",
        "filePath": "libs/components/forms/src/lib/modules/toggle-switch/toggle-switch-label.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyToggleSwitchLabelComponent",
        "selector": "sky-toggle-switch-label"
      },
      {
        "anchorId": "class_sky-toggle-switch-component",
        "children": [
          {
            "description": "Whether to disable the toggle switch on template-driven forms. Don't use this input on reactive forms because they may overwrite the input or leave the control out of sync. To set the disabled state on reactive forms, use the `FormControl` instead.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "A help key that identifies the global help content to display. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is placed beside the toggle switch label. Clicking the button invokes [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) as configured by the application. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `labelText`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the toggle switch. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `labelText` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "description": "Whether to hide `labelText` from view.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "labelHidden",
            "type": "boolean"
          },
          {
            "description": "The text to display as the toggle switch's label.",
            "kind": "directive-input",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "The tab index for the toggle switch. If not defined, the index is set to the position of the toggle switch on load.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "tabIndex",
            "type": "undefined | number"
          },
          {
            "deprecationReason": "Use the `labelText` input instead.",
            "description": "The ARIA label for the toggle switch. This sets the `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). Use a context-sensitive label, such as \"Activate annual fundraiser\" for a toggle switch that activates and deactivates an annual fundraiser. Context is especially important if multiple toggle switches are in close proximity. When the `sky-toggle-switch-label` component displays a visible label, this property is only necessary if that label requires extra context. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "Whether the toggle switch is selected.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "checked",
            "type": "boolean"
          },
          {
            "description": "Fires when the checked state of a toggle switch changes.",
            "kind": "directive-output",
            "name": "toggleChange",
            "type": "EventEmitter<SkyToggleSwitchChange>"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/toggle-switch/toggle-switch.component.ts",
        "kind": "component",
        "name": "SkyToggleSwitchComponent",
        "selector": "sky-toggle-switch"
      },
      {
        "anchorId": "class_sky-toggle-switch-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToggleSwitchModule"
          }
        ],
        "filePath": "libs/components/forms/src/lib/modules/toggle-switch/toggle-switch.module.ts",
        "kind": "module",
        "name": "SkyToggleSwitchModule"
      },
      {
        "anchorId": "interface_sky-toggle-switch-change",
        "children": [
          { "kind": "interface-property", "name": "checked", "type": "boolean" }
        ],
        "description": "Indicates whether the toggle switch is selected.",
        "filePath": "libs/components/forms/src/lib/modules/toggle-switch/types/toggle-switch-change.ts",
        "kind": "interface",
        "name": "SkyToggleSwitchChange"
      }
    ],
    "@skyux/forms/testing": [
      {
        "anchorId": "class_sky-checkbox-fixture",
        "children": [
          {
            "description": "Deselects the checkbox.",
            "kind": "class-method",
            "name": "deselect",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Selects the checkbox.",
            "kind": "class-method",
            "name": "select",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCheckboxFixture"
          },
          {
            "description": "The checkbox's type.",
            "kind": "class-property",
            "name": "checkboxType",
            "type": "undefined | string"
          },
          {
            "description": "A flag indicating whether the checkbox is currently disabled.",
            "kind": "class-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The checkbox's icon type",
            "kind": "class-property",
            "name": "iconType",
            "type": "undefined | string"
          },
          {
            "description": "The checkbox's label",
            "kind": "class-property",
            "name": "labelText",
            "type": "undefined | string"
          },
          {
            "description": "A flag indicating whether the checkbox is currently selected.",
            "kind": "class-property",
            "name": "selected",
            "type": "boolean"
          },
          {
            "description": "Deselects the checkbox.",
            "kind": "class-property",
            "name": "deselect",
            "type": "void"
          },
          {
            "description": "Selects the checkbox.",
            "kind": "class-property",
            "name": "select",
            "type": "void"
          }
        ],
        "deprecationReason": "Use `SkyCheckboxHarness` instead.",
        "description": "Allows interaction with a SKY UX checkbox component.",
        "filePath": "libs/components/forms/testing/src/legacy/checkbox-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyCheckboxFixture"
      },
      {
        "anchorId": "class_sky-radio-fixture",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRadioFixture"
          },
          {
            "description": "A flag indicating if every radio button in the radio group is disabled.",
            "kind": "class-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The selected radio button value.",
            "kind": "class-property",
            "name": "value",
            "type": "string"
          }
        ],
        "deprecationReason": "Use `SkyRadioHarness` instead.",
        "description": "Allows interaction with a SKY UX radio buttons within a radio group.",
        "filePath": "libs/components/forms/testing/src/legacy/radio-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyRadioFixture"
      },
      {
        "anchorId": "interface_sky-character-counter-indicator-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyCharacterCounterIndicatorHarness instances.",
        "filePath": "libs/components/forms/testing/src/modules/character-counter/character-counter-indicator-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyCharacterCounterIndicatorHarnessFilters"
      },
      {
        "anchorId": "class_sky-character-counter-indicator-harness",
        "children": [
          {
            "description": "Gets the current character count.",
            "kind": "class-method",
            "name": "getCharacterCount",
            "parameters": [],
            "type": "Promise<number>"
          },
          {
            "description": "Gets the character counter limit.",
            "kind": "class-method",
            "name": "getCharacterCountLimit",
            "parameters": [],
            "type": "Promise<number>"
          },
          {
            "description": "Indicates whether the character counter is in an error state because the current character count is greater than the limit.",
            "kind": "class-method",
            "name": "isOverLimit",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCharacterCounterIndicatorHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              {
                "name": "filters",
                "type": "SkyCharacterCounterIndicatorHarnessFilters"
              }
            ],
            "type": "HarnessPredicate<SkyCharacterCounterIndicatorHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCharacterCounterIndicatorHarness"
          },
          {
            "defaultValue": "'sky-character-counter-indicator'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the current character count.",
            "kind": "class-property",
            "name": "getCharacterCount",
            "type": "Promise<number>"
          },
          {
            "description": "Gets the character counter limit.",
            "kind": "class-property",
            "name": "getCharacterCountLimit",
            "type": "Promise<number>"
          },
          {
            "description": "Indicates whether the character counter is in an error state because the current character count is greater than the limit.",
            "kind": "class-property",
            "name": "isOverLimit",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCharacterCounterIndicatorHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyCharacterCounterIndicatorHarness>"
          }
        ],
        "description": "Harness for interacting with a character counter indicator component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/character-counter/character-counter-indicator-harness.ts",
        "kind": "class",
        "name": "SkyCharacterCounterIndicatorHarness"
      },
      {
        "anchorId": "interface_sky-checkbox-group-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyCheckboxGroupHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/checkbox/checkbox-group-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyCheckboxGroupHarnessFilters"
      },
      {
        "anchorId": "class_sky-checkbox-group-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets an array of harnesses for the checkboxes in the checkbox group.",
            "kind": "class-method",
            "name": "getCheckboxes",
            "parameters": [],
            "type": "Promise<SkyCheckboxHarness[]>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-method",
            "name": "getHeadingHidden",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the checkbox group. Returns undefined if heading level is not set.",
            "kind": "class-method",
            "name": "getHeadingLevel",
            "parameters": [],
            "type": "Promise<undefined | SkyCheckboxGroupHeadingLevel>"
          },
          {
            "description": "The heading style used for the checkbox group.",
            "kind": "class-method",
            "name": "getHeadingStyle",
            "parameters": [],
            "type": "Promise<SkyCheckboxGroupHeadingStyle>"
          },
          {
            "description": "Gets the checkbox group's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-method",
            "name": "getHeadingText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the checkbox group's hint text.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the checkbox group is required.",
            "kind": "class-method",
            "name": "getRequired",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox group is stacked.",
            "kind": "class-method",
            "name": "getStacked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox group has errors.",
            "kind": "class-method",
            "name": "hasError",
            "parameters": [{ "name": "errorName", "type": "string" }],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether all the checkboxes in a required group are unchecked.",
            "kind": "class-method",
            "name": "hasRequiredError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCheckboxGroupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyCheckboxGroupHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyCheckboxGroupHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCheckboxGroupHarness"
          },
          {
            "defaultValue": "'sky-checkbox-group'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Gets an array of harnesses for the checkboxes in the checkbox group.",
            "kind": "class-property",
            "name": "getCheckboxes",
            "type": "Promise<SkyCheckboxHarness[]>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-property",
            "name": "getHeadingHidden",
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the checkbox group. Returns undefined if heading level is not set.",
            "kind": "class-property",
            "name": "getHeadingLevel",
            "type": "Promise<undefined | SkyCheckboxGroupHeadingLevel>"
          },
          {
            "description": "The heading style used for the checkbox group.",
            "kind": "class-property",
            "name": "getHeadingStyle",
            "type": "Promise<SkyCheckboxGroupHeadingStyle>"
          },
          {
            "description": "Gets the checkbox group's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-property",
            "name": "getHeadingText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the checkbox group's hint text.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the checkbox group is required.",
            "kind": "class-property",
            "name": "getRequired",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox group is stacked.",
            "kind": "class-property",
            "name": "getStacked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox group has errors.",
            "kind": "class-property",
            "name": "hasError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether all the checkboxes in a required group are unchecked.",
            "kind": "class-property",
            "name": "hasRequiredError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCheckboxGroupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyCheckboxGroupHarness>"
          }
        ],
        "description": "Harness for interacting with a checkbox group component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/checkbox/checkbox-group-harness.ts",
        "kind": "class",
        "name": "SkyCheckboxGroupHarness"
      },
      {
        "anchorId": "interface_sky-checkbox-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyCheckboxHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/checkbox/checkbox-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyCheckboxHarnessFilters"
      },
      {
        "anchorId": "class_sky-checkbox-harness",
        "children": [
          {
            "description": "Blurs the checkbox.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing nothing if it is already checked.",
            "kind": "class-method",
            "name": "check",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the checkbox.",
            "kind": "class-method",
            "name": "focus",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the checkbox's aria-label.",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the checkbox's aria-labelledby.",
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the checkbox's hint text.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the label is hidden. Only supported when using the `labelText` input to set the label.",
            "kind": "class-method",
            "name": "getLabelHidden",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the checkbox's label text. If the label is set via `labelText` and `labelHidden` is true, the text will still be returned.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the checkbox's name.",
            "kind": "class-method",
            "name": "getName",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the checkbox's value.",
            "kind": "class-method",
            "name": "getValue",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the checkbox displays custom error.",
            "kind": "class-method",
            "name": "hasCustomError",
            "parameters": [{ "name": "errorName", "type": "string" }],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox displays an error that it is required.",
            "kind": "class-method",
            "name": "hasRequiredError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is checked.",
            "kind": "class-method",
            "name": "isChecked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is focused.",
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is required.",
            "kind": "class-method",
            "name": "isRequired",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is stacked.",
            "kind": "class-method",
            "name": "isStacked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing nothing if it is already unchecked.",
            "kind": "class-method",
            "name": "uncheck",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCheckboxHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyCheckboxHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyCheckboxHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCheckboxHarness"
          },
          {
            "defaultValue": "'sky-checkbox'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Blurs the checkbox.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "description": "Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing nothing if it is already checked.",
            "kind": "class-property",
            "name": "check",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the checkbox.",
            "kind": "class-property",
            "name": "focus",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the checkbox's aria-label.",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the checkbox's aria-labelledby.",
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the checkbox's hint text.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the label is hidden. Only supported when using the `labelText` input to set the label.",
            "kind": "class-property",
            "name": "getLabelHidden",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the checkbox's label text. If the label is set via `labelText` and `labelHidden` is true, the text will still be returned.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the checkbox's name.",
            "kind": "class-property",
            "name": "getName",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the checkbox's value.",
            "kind": "class-property",
            "name": "getValue",
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the checkbox displays custom error.",
            "kind": "class-property",
            "name": "hasCustomError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox displays an error that it is required.",
            "kind": "class-property",
            "name": "hasRequiredError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is checked.",
            "kind": "class-property",
            "name": "isChecked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is focused.",
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is required.",
            "kind": "class-property",
            "name": "isRequired",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the checkbox is stacked.",
            "kind": "class-property",
            "name": "isStacked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing nothing if it is already unchecked.",
            "kind": "class-property",
            "name": "uncheck",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyCheckboxHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyCheckboxHarness>"
          }
        ],
        "description": "Harness for interacting with a checkbox component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/checkbox/checkbox-harness.ts",
        "kind": "class",
        "name": "SkyCheckboxHarness"
      },
      {
        "anchorId": "class_sky-checkbox-label-harness",
        "children": [
          {
            "description": "Gets the text content of the checkbox label.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCheckboxLabelHarness"
          },
          {
            "defaultValue": "'sky-checkbox-label'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the text content of the checkbox label.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          }
        ],
        "description": "Harness for interacting with a checkbox label component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/checkbox/checkbox-label-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyCheckboxLabelHarness"
      },
      {
        "anchorId": "interface_sky-field-group-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyFieldGroupHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/field-group/field-group-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyFieldGroupHarnessFilters"
      },
      {
        "anchorId": "class_sky-field-group-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-method",
            "name": "getHeadingHidden",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the field group.",
            "kind": "class-method",
            "name": "getHeadingLevel",
            "parameters": [],
            "type": "Promise<SkyFieldGroupHeadingLevel>"
          },
          {
            "description": "The heading style used for the field group.",
            "kind": "class-method",
            "name": "getHeadingStyle",
            "parameters": [],
            "type": "Promise<SkyFieldGroupHeadingStyle>"
          },
          {
            "description": "Gets the field group's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-method",
            "name": "getHeadingText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the field group's hint text.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the field group is stacked.",
            "kind": "class-method",
            "name": "getStacked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFieldGroupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyFieldGroupHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyFieldGroupHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFieldGroupHarness"
          },
          {
            "defaultValue": "'sky-field-group'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-property",
            "name": "getHeadingHidden",
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the field group.",
            "kind": "class-property",
            "name": "getHeadingLevel",
            "type": "Promise<SkyFieldGroupHeadingLevel>"
          },
          {
            "description": "The heading style used for the field group.",
            "kind": "class-property",
            "name": "getHeadingStyle",
            "type": "Promise<SkyFieldGroupHeadingStyle>"
          },
          {
            "description": "Gets the field group's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-property",
            "name": "getHeadingText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the field group's hint text.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the field group is stacked.",
            "kind": "class-property",
            "name": "getStacked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFieldGroupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyFieldGroupHarness>"
          }
        ],
        "description": "Harness for interacting with a field group component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/field-group/field-group-harness.ts",
        "kind": "class",
        "name": "SkyFieldGroupHarness"
      },
      {
        "anchorId": "interface_sky-file-drop-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyFileDropHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/file-attachment/file-drop/file-drop-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyFileDropHarnessFilters"
      },
      {
        "anchorId": "class_sky-file-drop-harness",
        "children": [
          {
            "description": "Drops a file onto the component's drop target.",
            "kind": "class-method",
            "name": "dropFile",
            "parameters": [{ "name": "file", "type": "File" }],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFileDropHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyFileDropHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyFileDropHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFileDropHarness"
          },
          {
            "defaultValue": "'sky-file-drop'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Drops a file onto the component's drop target.",
            "kind": "class-property",
            "name": "dropFile",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFileDropHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyFileDropHarness>"
          }
        ],
        "description": "Harness for interacting with a file drop component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/file-attachment/file-drop/file-drop-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyFileDropHarness"
      },
      {
        "anchorId": "interface_sky-form-error-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyFormErrorHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/form-error/form-error-harness.filters.ts",
        "kind": "interface",
        "name": "SkyFormErrorHarnessFilters"
      },
      {
        "anchorId": "class_sky-form-error-harness",
        "children": [
          {
            "description": "Gets the error name.",
            "kind": "class-method",
            "name": "getErrorName",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFormErrorHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyFormErrorHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyFormErrorHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFormErrorHarness"
          },
          {
            "defaultValue": "'sky-form-error'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the error name.",
            "kind": "class-property",
            "name": "getErrorName",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFormErrorHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyFormErrorHarness>"
          }
        ],
        "filePath": "libs/components/forms/testing/src/modules/form-error/form-error-harness.ts",
        "kind": "class",
        "name": "SkyFormErrorHarness"
      },
      {
        "anchorId": "interface_sky-form-errors-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyFormErrorHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/form-error/form-errors-harness.filters.ts",
        "kind": "interface",
        "name": "SkyFormErrorsHarnessFilters"
      },
      {
        "anchorId": "class_sky-form-errors-harness",
        "children": [
          {
            "description": "Gets a list of all errors fired.",
            "kind": "class-method",
            "name": "getFormErrors",
            "parameters": [],
            "type": "Promise<Object[]>"
          },
          {
            "description": "Whether an error with the given name has fired.",
            "kind": "class-method",
            "name": "hasError",
            "parameters": [{ "name": "errorName", "type": "string" }],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFormErrorsHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyFormErrorsHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyFormErrorsHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFormErrorsHarness"
          },
          {
            "defaultValue": "'sky-form-errors'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets a list of all errors fired.",
            "kind": "class-property",
            "name": "getFormErrors",
            "type": "Promise<Object[]>"
          },
          {
            "description": "Whether an error with the given name has fired.",
            "kind": "class-property",
            "name": "hasError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyFormErrorsHarness` that meets certain criteria",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyFormErrorsHarness>"
          }
        ],
        "filePath": "libs/components/forms/testing/src/modules/form-error/form-errors-harness.ts",
        "kind": "class",
        "name": "SkyFormErrorsHarness"
      },
      {
        "anchorId": "interface_sky-input-box-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyInputBoxHarness instances.",
        "filePath": "libs/components/forms/testing/src/modules/input-box/input-box-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyInputBoxHarnessFilters"
      },
      {
        "anchorId": "class_sky-input-box-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the character counter indicator for the input box or throws an error if a character limit is not specified.",
            "kind": "class-method",
            "name": "getCharacterCounter",
            "parameters": [],
            "type": "Promise<SkyCharacterCounterIndicatorHarness>"
          },
          {
            "description": "Gets a list of status indicator harnesses for errors not automatically handled by input box.",
            "kind": "class-method",
            "name": "getCustomErrors",
            "parameters": [],
            "type": "Promise<SkyStatusIndicatorHarness[]>"
          },
          {
            "description": "Indicates whether the input box has disabled styles applied.",
            "kind": "class-method",
            "name": "getDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the help popover for the input box or throws an error if the help popover is not configured.",
            "kind": "class-method",
            "name": "getHelpPopover",
            "parameters": [],
            "type": "Promise<SkyPopoverHarness>"
          },
          {
            "description": "2 Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the hint text for the input box.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text for the input box label.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Indicates whether the input box has stacked styles applied.",
            "kind": "class-method",
            "name": "getStacked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the custom error is triggered.",
            "kind": "class-method",
            "name": "hasCustomFormError",
            "parameters": [{ "name": "errorName", "type": "string" }],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid email address.",
            "kind": "class-method",
            "name": "hasEmailError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid date.",
            "kind": "class-method",
            "name": "hasInvalidDateError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid maximum date.",
            "kind": "class-method",
            "name": "hasMaxDateError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field has more characters than allowed.",
            "kind": "class-method",
            "name": "hasMaxLengthError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid minimum date.",
            "kind": "class-method",
            "name": "hasMinDateError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field has fewer characters than allowed.",
            "kind": "class-method",
            "name": "hasMinLengthError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid phone number.",
            "kind": "class-method",
            "name": "hasPhoneFieldError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the required field is empty.",
            "kind": "class-method",
            "name": "hasRequiredError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid time.",
            "kind": "class-method",
            "name": "hasTimeError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid URL.",
            "kind": "class-method",
            "name": "hasUrlError",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyInputBoxHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyInputBoxHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyInputBoxHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInputBoxHarness"
          },
          {
            "defaultValue": "'sky-input-box'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the character counter indicator for the input box or throws an error if a character limit is not specified.",
            "kind": "class-property",
            "name": "getCharacterCounter",
            "type": "Promise<SkyCharacterCounterIndicatorHarness>"
          },
          {
            "description": "Gets a list of status indicator harnesses for errors not automatically handled by input box.",
            "kind": "class-property",
            "name": "getCustomErrors",
            "type": "Promise<SkyStatusIndicatorHarness[]>"
          },
          {
            "description": "Indicates whether the input box has disabled styles applied.",
            "kind": "class-property",
            "name": "getDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the help popover for the input box or throws an error if the help popover is not configured.",
            "kind": "class-property",
            "name": "getHelpPopover",
            "type": "Promise<SkyPopoverHarness>"
          },
          {
            "description": "2 Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string | TemplateRef<unknown>>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the hint text for the input box.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text for the input box label.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<string>"
          },
          {
            "description": "Indicates whether the input box has stacked styles applied.",
            "kind": "class-property",
            "name": "getStacked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the custom error is triggered.",
            "kind": "class-property",
            "name": "hasCustomFormError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid email address.",
            "kind": "class-property",
            "name": "hasEmailError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid date.",
            "kind": "class-property",
            "name": "hasInvalidDateError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid maximum date.",
            "kind": "class-property",
            "name": "hasMaxDateError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field has more characters than allowed.",
            "kind": "class-property",
            "name": "hasMaxLengthError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid minimum date.",
            "kind": "class-property",
            "name": "hasMinDateError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field has fewer characters than allowed.",
            "kind": "class-property",
            "name": "hasMinLengthError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid phone number.",
            "kind": "class-property",
            "name": "hasPhoneFieldError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the required field is empty.",
            "kind": "class-property",
            "name": "hasRequiredError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid time.",
            "kind": "class-property",
            "name": "hasTimeError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the field is set to an invalid URL.",
            "kind": "class-property",
            "name": "hasUrlError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyInputBoxHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyInputBoxHarness>"
          }
        ],
        "description": "Harness for interacting with an input box component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/input-box/input-box-harness.ts",
        "kind": "class",
        "name": "SkyInputBoxHarness"
      },
      {
        "anchorId": "interface_sky-radio-group-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyRadioGroupHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/radio/radio-group-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyRadioGroupHarnessFilters"
      },
      {
        "anchorId": "class_sky-radio-group-harness",
        "children": [
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-method",
            "name": "getHeadingHidden",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the radio group. Returns undefined if heading level is not set.",
            "kind": "class-method",
            "name": "getHeadingLevel",
            "parameters": [],
            "type": "Promise<undefined | SkyRadioGroupHeadingLevel>"
          },
          {
            "description": "The heading style used for the radio group.",
            "kind": "class-method",
            "name": "getHeadingStyle",
            "parameters": [],
            "type": "Promise<SkyRadioGroupHeadingStyle>"
          },
          {
            "description": "Gets the radio group's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-method",
            "name": "getHeadingText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the radio group's hint text.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets an array of harnesses for the radio buttons in the radio group.",
            "kind": "class-method",
            "name": "getRadioButtons",
            "parameters": [],
            "type": "Promise<SkyRadioHarness[]>"
          },
          {
            "description": "Whether the radio group is required.",
            "kind": "class-method",
            "name": "getRequired",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio group is stacked.",
            "kind": "class-method",
            "name": "getStacked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio group has errors.",
            "kind": "class-method",
            "name": "hasError",
            "parameters": [{ "name": "errorName", "type": "string" }],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRadioGroupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyRadioGroupHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyRadioGroupHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRadioGroupHarness"
          },
          {
            "defaultValue": "'sky-radio-group'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Whether the heading is hidden.",
            "kind": "class-property",
            "name": "getHeadingHidden",
            "type": "Promise<boolean>"
          },
          {
            "description": "The semantic heading level used for the radio group. Returns undefined if heading level is not set.",
            "kind": "class-property",
            "name": "getHeadingLevel",
            "type": "Promise<undefined | SkyRadioGroupHeadingLevel>"
          },
          {
            "description": "The heading style used for the radio group.",
            "kind": "class-property",
            "name": "getHeadingStyle",
            "type": "Promise<SkyRadioGroupHeadingStyle>"
          },
          {
            "description": "Gets the radio group's heading text. If `headingHidden` is true, the text will still be returned.",
            "kind": "class-property",
            "name": "getHeadingText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the radio group's hint text.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets an array of harnesses for the radio buttons in the radio group.",
            "kind": "class-property",
            "name": "getRadioButtons",
            "type": "Promise<SkyRadioHarness[]>"
          },
          {
            "description": "Whether the radio group is required.",
            "kind": "class-property",
            "name": "getRequired",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio group is stacked.",
            "kind": "class-property",
            "name": "getStacked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio group has errors.",
            "kind": "class-property",
            "name": "hasError",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRadioGroupHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyRadioGroupHarness>"
          }
        ],
        "description": "Harness for interacting with a radio group component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/radio/radio-group-harness.ts",
        "kind": "class",
        "name": "SkyRadioGroupHarness"
      },
      {
        "anchorId": "interface_sky-radio-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyRadioHarness` instances.",
        "filePath": "libs/components/forms/testing/src/modules/radio/radio-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyRadioHarnessFilters"
      },
      {
        "anchorId": "class_sky-radio-harness",
        "children": [
          {
            "description": "Blurs the radio button.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Puts the radio button in a checked state if it is currently unchecked.",
            "kind": "class-method",
            "name": "check",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-method",
            "name": "clickHelpInline",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the radio button.",
            "kind": "class-method",
            "name": "focus",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the radio button's aria-label.",
            "kind": "class-method",
            "name": "getAriaLabel",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the radio button's aria-labelledby.",
            "kind": "class-method",
            "name": "getAriaLabelledby",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-method",
            "name": "getHelpPopoverContent",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-method",
            "name": "getHelpPopoverTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the radio button's hint text.",
            "kind": "class-method",
            "name": "getHintText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the label is hidden. Only supported when using the `labelText` input to set the label.",
            "kind": "class-method",
            "name": "getLabelHidden",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the radio button's label text. If the label is set via `labelText` and `labelHidden` is true, the text will still be returned.",
            "kind": "class-method",
            "name": "getLabelText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the radio button's name.",
            "kind": "class-method",
            "name": "getName",
            "parameters": [],
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the radio button is checked.",
            "kind": "class-method",
            "name": "isChecked",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio button is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio button is focused.",
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRadioHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyRadioHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyRadioHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRadioHarness"
          },
          {
            "defaultValue": "'sky-radio'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Blurs the radio button.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "description": "Puts the radio button in a checked state if it is currently unchecked.",
            "kind": "class-property",
            "name": "check",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the help inline button.",
            "kind": "class-property",
            "name": "clickHelpInline",
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the radio button.",
            "kind": "class-property",
            "name": "focus",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the radio button's aria-label.",
            "kind": "class-property",
            "name": "getAriaLabel",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the radio button's aria-labelledby.",
            "kind": "class-property",
            "name": "getAriaLabelledby",
            "type": "Promise<null | string>"
          },
          {
            "description": "Gets the help popover content.",
            "kind": "class-property",
            "name": "getHelpPopoverContent",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the help popover title.",
            "kind": "class-property",
            "name": "getHelpPopoverTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the radio button's hint text.",
            "kind": "class-property",
            "name": "getHintText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the label is hidden. Only supported when using the `labelText` input to set the label.",
            "kind": "class-property",
            "name": "getLabelHidden",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the radio button's label text. If the label is set via `labelText` and `labelHidden` is true, the text will still be returned.",
            "kind": "class-property",
            "name": "getLabelText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the radio button's name.",
            "kind": "class-property",
            "name": "getName",
            "type": "Promise<null | string>"
          },
          {
            "description": "Whether the radio button is checked.",
            "kind": "class-property",
            "name": "isChecked",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio button is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the radio button is focused.",
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRadioHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyRadioHarness>"
          }
        ],
        "description": "Harness for interacting with a radio button component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/radio/radio-harness.ts",
        "kind": "class",
        "name": "SkyRadioHarness"
      },
      {
        "anchorId": "class_sky-radio-label-harness",
        "children": [
          {
            "description": "Gets the text content of the radio label.",
            "kind": "class-method",
            "name": "getText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRadioLabelHarness"
          },
          {
            "defaultValue": "'sky-radio-label'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the text content of the radio label.",
            "kind": "class-property",
            "name": "getText",
            "type": "Promise<string>"
          }
        ],
        "description": "Harness for interacting with a radio label component in tests.",
        "filePath": "libs/components/forms/testing/src/modules/radio/radio-label-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyRadioLabelHarness"
      }
    ],
    "@skyux/grids": [
      {
        "anchorId": "class_sky-grid-column-component",
        "children": [
          {
            "description": "The horizontal alignment of the column's data and header. Options include: `\"left\"`, `\"center\"`, and `\"right\"`.",
            "defaultValue": "\"left\"",
            "kind": "directive-input",
            "name": "alignment",
            "type": "SkyGridColumnAlignment"
          },
          {
            "description": "The description for the column.",
            "kind": "directive-input",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Whether to disable the highlighting of search text in the column.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "excludeFromHighlighting",
            "type": "boolean"
          },
          {
            "description": "The property to retrieve cell information from an entry on the grid `data` array. You must provide either the `id` or `field` property for every column, but do not provide both. If `id` does not exist on a column, then `field` is the entry for the grid `selectedColumnIds` array.",
            "kind": "directive-input",
            "name": "field",
            "type": "string"
          },
          {
            "description": "Text to display in the column header.",
            "kind": "directive-input",
            "name": "heading",
            "type": "string"
          },
          {
            "description": "Whether the column is initially hidden when grid `selectedColumnIds` are not provided.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "hidden",
            "type": "boolean"
          },
          {
            "description": "The unique ID for the column. You must provide either the `id` or `field` property for every column, but do not provide both. If `field` does not exist on a column, then the `id` property retrieves cell information from an entry on the grid `data` array.",
            "kind": "directive-input",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The template to display inside an inline help popup for this column.",
            "kind": "directive-input",
            "name": "inlineHelpPopover",
            "type": "any"
          },
          {
            "description": "Whether the column sorts the grid when users click the column header.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "isSortable",
            "type": "boolean"
          },
          {
            "description": "Whether the column is locked. The intent is to display locked columns first on the left side of the grid. If set to `true`, then users cannot drag the column to another position and or drag other columns before the locked column.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "locked",
            "type": "boolean"
          },
          {
            "description": "The search function to apply for the specific column. By default, the column executes a string compare on the column data.",
            "defaultValue": "(value, searchText) => value.toString().toLowerCase().indexOf(searchText) !== -1",
            "kind": "directive-input",
            "name": "searchFunction",
            "type": "Function"
          },
          {
            "description": "The template for a column. This can be assigned as a reference to the `template` attribute, or it can be assigned as a child of the `template` element inside the `sky-grid-column` component. The template has access to the `value` variable, which contains the value passed to the column, and the `row` variable, which contains the entire row data.",
            "kind": "directive-input",
            "name": "templateInput",
            "type": "TemplateRef<unknown>"
          },
          { "kind": "directive-input", "name": "type", "type": "string" },
          {
            "description": "The width of the column in pixels. If undefined, the column width is evenly distributed.",
            "kind": "directive-input",
            "name": "width",
            "type": "number"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "description": "Specifies the column information.",
        "filePath": "lib/modules/grid/grid-column.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyGridColumnComponent",
        "selector": "sky-grid-column"
      },
      {
        "anchorId": "class_sky-grid-column-model",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyGridColumnModel"
          },
          {
            "description": "The horizontal alignment of the column's data and header.",
            "kind": "class-property",
            "name": "alignment",
            "type": "SkyGridColumnAlignment"
          },
          { "kind": "class-property", "name": "description", "type": "string" },
          {
            "kind": "class-property",
            "name": "excludeFromHighlighting",
            "type": "boolean"
          },
          { "kind": "class-property", "name": "field", "type": "string" },
          { "kind": "class-property", "name": "heading", "type": "string" },
          { "kind": "class-property", "name": "hidden", "type": "boolean" },
          { "kind": "class-property", "name": "id", "type": "string" },
          {
            "kind": "class-property",
            "name": "inlineHelpPopover",
            "type": "any"
          },
          {
            "defaultValue": "true",
            "kind": "class-property",
            "name": "isSortable",
            "type": "boolean"
          },
          { "kind": "class-property", "name": "locked", "type": "boolean" },
          {
            "kind": "class-property",
            "name": "searchFunction",
            "type": "Function"
          },
          {
            "kind": "class-property",
            "name": "template",
            "type": "TemplateRef<unknown>"
          },
          { "kind": "class-property", "name": "type", "type": "string" },
          { "kind": "class-property", "name": "width", "type": "number" }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/grid-column.model.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyGridColumnModel"
      },
      {
        "anchorId": "class_sky-grid-component",
        "children": [
          {
            "description": "The data for the grid. Each item requires an `id` and a property that maps to the `field` or `id` property of each column in the grid.",
            "kind": "directive-input",
            "name": "data",
            "type": "any[]"
          },
          {
            "description": "Whether to enable the multiselect feature to display a column of checkboxes on the left side of the grid. You can specify a unique ID with the `multiselectRowId` property, but multiselect defaults to the `id` property on the `data` object.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "enableMultiselect",
            "type": "boolean"
          },
          {
            "description": "How the grid fits to its parent. The valid options are `width`, which fits the grid to the parent's full width, and `scroll`, which allows the grid to exceed the parent's width. If the grid does not have enough columns to fill the parent's width, it always stretches to the parent's full width.",
            "defaultValue": "\"width\"",
            "kind": "directive-input",
            "name": "fit",
            "type": "string"
          },
          {
            "description": "Whether to display a toolbar with the grid.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "hasToolbar",
            "type": "boolean"
          },
          {
            "description": "The height of the grid.",
            "kind": "directive-input",
            "name": "height",
            "type": "number"
          },
          {
            "description": "Text to highlight within the grid. Typically, this property is used in conjunction with search.",
            "kind": "directive-input",
            "name": "highlightText",
            "type": "string"
          },
          {
            "description": "The observable to send commands to the grid.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkyGridMessage>"
          },
          {
            "description": "The unique ID that matches a property on the `data` object. By default, this property uses the `id` property.",
            "kind": "directive-input",
            "name": "multiselectRowId",
            "type": "string"
          },
          {
            "description": "The ID of the row to highlight. The ID matches the `id` property of the `data` object. Typically, this property is used in conjunction with the flyout component to indicate the currently selected row.",
            "kind": "directive-input",
            "name": "rowHighlightedId",
            "type": "string"
          },
          {
            "description": "The unique key for the UI Config Service to retrieve stored settings from a database. The UI Config Service saves configuration settings for users and returns `selectedColumnIds` to preserve the columns to display and the preferred column order. You  must provide `id` values for your `sky-grid-column` elements because the UI Config Service depends on those values to organize columns based on user settings. For more information about the UI Config Service, see [the sticky settings documentation](https://developer.blackbaud.com/skyux/learn/develop/sticky-settings).",
            "kind": "directive-input",
            "name": "settingsKey",
            "type": "string"
          },
          {
            "description": "Displays a caret in the column that was used to sort the grid. This is particularly useful when you programmatically sort data and want to visually indicate how the grid was sorted. This property accepts a `ListSortFieldSelectorModel` value with the following properties: - `fieldSelector` Represents the current sort field. This property accepts `string` values. - `descending` Indicates whether to sort in descending order. The caret that visually indicates the sort order points down for descending order and up for ascending order. This property accepts `boolean` values. Default is `false`.",
            "kind": "directive-input",
            "name": "sortField",
            "type": "ListSortFieldSelectorModel"
          },
          {
            "description": "The width of the grid in pixels.",
            "kind": "directive-input",
            "name": "width",
            "type": "number"
          },
          {
            "description": "Columns and column properties for the grid.",
            "kind": "directive-input",
            "name": "columns",
            "type": "SkyGridColumnModel[]"
          },
          {
            "description": "The columns to display in the grid based on the `id` or `field` properties of the columns. If no columns are specified, then the grid displays all columns.",
            "kind": "directive-input",
            "name": "selectedColumnIds",
            "type": "string[]"
          },
          {
            "description": "The set of IDs for the rows to select in a multiselect grid. The IDs match the `id` properties of the `data` objects. Rows with IDs that are not included are de-selected in the grid.",
            "kind": "directive-input",
            "name": "selectedRowIds",
            "type": "string[]"
          },
          {
            "description": "Fires when the width of a column changes.",
            "kind": "directive-output",
            "name": "columnWidthChange",
            "type": "EventEmitter<SkyGridColumnWidthModelChange[]>"
          },
          {
            "description": "Fires when the selection of multiselect checkboxes changes. Emits an array of IDs for the selected rows based on the `multiselectRowId` property that the consumer provides.",
            "kind": "directive-output",
            "name": "multiselectSelectionChange",
            "type": "EventEmitter<SkyGridSelectedRowsModelChange>"
          },
          {
            "kind": "directive-output",
            "name": "rowDeleteCancel",
            "type": "EventEmitter<SkyGridRowDeleteCancelArgs>"
          },
          {
            "kind": "directive-output",
            "name": "rowDeleteConfirm",
            "type": "EventEmitter<SkyGridRowDeleteConfirmArgs>"
          },
          {
            "description": "Fires when the columns to display in the grid change or when the order of the columns changes. The event emits an array of IDs for the displayed columns that reflects the column order.",
            "kind": "directive-output",
            "name": "selectedColumnIdsChange",
            "type": "EventEmitter<string[]>"
          },
          {
            "description": "Fires when the active sort field changes.",
            "kind": "directive-output",
            "name": "sortFieldChange",
            "type": "EventEmitter<ListSortFieldSelectorModel>"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/grid.component.ts",
        "isDeprecated": true,
        "kind": "component",
        "name": "SkyGridComponent",
        "selector": "sky-grid"
      },
      {
        "anchorId": "class_sky-grid-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyGridModule"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/grid.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyGridModule"
      },
      {
        "anchorId": "type-alias_sky-grid-column-alignment",
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "description": "Represents the horizontal alignment of the column's data and header.",
        "filePath": "lib/modules/grid/types/grid-column-alignment.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "SkyGridColumnAlignment",
        "type": "\"left\" | \"center\" | \"right\""
      },
      {
        "anchorId": "interface_sky-grid-column-description-model-change",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "field",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "value",
            "type": "string"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-column-description-model-change.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyGridColumnDescriptionModelChange"
      },
      {
        "anchorId": "interface_sky-grid-column-heading-model-change",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "field",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "value",
            "type": "string"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-column-heading-model-change.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyGridColumnHeadingModelChange"
      },
      {
        "anchorId": "interface_sky-grid-column-inline-help-popover-model-change",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "field",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "value",
            "type": "any"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-column-inline-help-popover-model-change.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyGridColumnInlineHelpPopoverModelChange"
      },
      {
        "anchorId": "interface_sky-grid-column-width-model-change",
        "children": [
          {
            "description": "The field of the column.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "field",
            "type": "string"
          },
          {
            "description": "The ID of the column.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The width of the column in pixels.",
            "kind": "interface-property",
            "name": "width",
            "type": "number"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-column-width-model-change.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyGridColumnWidthModelChange"
      },
      {
        "anchorId": "enum_sky-grid-message-type",
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-message-type.ts",
        "isDeprecated": true,
        "kind": "enumeration",
        "children": [
          { "kind": "enum-member", "name": "AbortDeleteRow", "type": "3" },
          {
            "description": "Clears the multiselect checkboxes for all rows in the grid.",
            "kind": "enum-member",
            "name": "ClearAll",
            "type": "1"
          },
          { "kind": "enum-member", "name": "PromptDeleteRow", "type": "2" },
          {
            "description": "Selects the multiselect checkboxes for all rows in the grid.",
            "kind": "enum-member",
            "name": "SelectAll",
            "type": "0"
          }
        ],
        "name": "SkyGridMessageType"
      },
      {
        "anchorId": "interface_sky-grid-message",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "data",
            "type": "Object"
          },
          {
            "description": "The type of message being sent.",
            "kind": "interface-property",
            "name": "type",
            "type": "SkyGridMessageType"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-message.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyGridMessage"
      },
      {
        "anchorId": "interface_sky-grid-row-delete-cancel-args",
        "children": [
          { "kind": "interface-property", "name": "id", "type": "string" }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-row-delete-cancel-args.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyGridRowDeleteCancelArgs"
      },
      {
        "anchorId": "interface_sky-grid-row-delete-config",
        "children": [
          { "kind": "interface-property", "name": "id", "type": "string" },
          { "kind": "interface-property", "name": "pending", "type": "boolean" }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-row-delete-config.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyGridRowDeleteConfig"
      },
      {
        "anchorId": "interface_sky-grid-row-delete-confirm-args",
        "children": [
          { "kind": "interface-property", "name": "id", "type": "string" }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-row-delete-confirm-args.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyGridRowDeleteConfirmArgs"
      },
      {
        "anchorId": "interface_sky-grid-selected-rows-model-change",
        "children": [
          {
            "description": "The IDs of the rows that are selected.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectedRowIds",
            "type": "string[]"
          },
          {
            "description": "Defines the source of the change. This will typically be used to determine if the change came from user interaction or a programmatic source.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "source",
            "type": "SkyGridSelectedRowsSource"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-selected-rows-model-change.ts",
        "isDeprecated": true,
        "kind": "interface",
        "name": "SkyGridSelectedRowsModelChange"
      },
      {
        "anchorId": "enum_sky-grid-selected-rows-source",
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-selected-rows-source.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          { "kind": "enum-member", "name": "CheckboxChange", "type": "0" },
          { "kind": "enum-member", "name": "ClearAll", "type": "1" },
          { "kind": "enum-member", "name": "RowClick", "type": "2" },
          { "kind": "enum-member", "name": "SelectAll", "type": "3" },
          { "kind": "enum-member", "name": "SelectedRowIdsChange", "type": "4" }
        ],
        "name": "SkyGridSelectedRowsSource"
      },
      {
        "anchorId": "interface_sky-grid-uiconfig",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "selectedColumnIds",
            "type": "string[]"
          }
        ],
        "deprecationReason": "`SkyGridComponent` and its features are deprecated. We recommend using the data grid instead. For more information, see https://developer.blackbaud.com/skyux/components/data-grid",
        "filePath": "lib/modules/grid/types/grid-ui-config.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "interface",
        "name": "SkyGridUIConfig"
      }
    ],
    "@skyux/lists": [
      {
        "anchorId": "class_sky-filter-button-component",
        "children": [
          {
            "description": "Whether to highlight the filter button to indicate that filters were applied. We recommend setting this property to `true` when no indication of filtering is visible to users. For example, set it to `true` if you do not display the filter summary.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "active",
            "type": "undefined | boolean"
          },
          {
            "description": "The ID to identify the element that contains the filtering options that the filter button exposes. To support [accessibility rules for disclosures](https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure), this property is necessary to set the `aria-controls` attribute when using inline filters. For more information about the `aria-controls` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-controls).",
            "kind": "directive-input",
            "name": "ariaControls",
            "type": "undefined | string"
          },
          {
            "description": "Whether the filtering options are exposed. To support [accessibility rules for disclosures](https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure), this property is necessary to set the `aria-expanded` attribute when using inline filters. For more information about the `aria-expanded` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-expanded).",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "ariaExpanded",
            "type": "undefined | boolean"
          },
          {
            "description": "The ARIA label for the filter button. This sets the filter button's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). Use a context-sensitive label, such as \"Filter constituents.\" Context is especially important when multiple filter buttons are in close proximity. In toolbars, filter buttons use the `listDescriptor` to provide context, and the ARIA label defaults to \"Filter <listDescriptor>.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the filter button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to display a \"Filter\" label beside the icon on the filter button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showButtonText",
            "type": "undefined | boolean"
          },
          {
            "description": "The ID for the filter button.",
            "kind": "directive-input",
            "name": "filterButtonId",
            "type": "string"
          },
          {
            "description": "Fires when the filter button is selected.",
            "kind": "directive-output",
            "name": "filterButtonClick",
            "type": "EventEmitter<void>"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/filter/filter-button.component.ts",
        "kind": "component",
        "name": "SkyFilterButtonComponent",
        "selector": "sky-filter-button"
      },
      {
        "anchorId": "class_sky-filter-inline-item-component",
        "description": "Specifies an inline filter.",
        "filePath": "libs/components/lists/src/lib/modules/filter/filter-inline-item.component.ts",
        "kind": "component",
        "name": "SkyFilterInlineItemComponent",
        "selector": "sky-filter-inline-item"
      },
      {
        "anchorId": "class_sky-filter-inline-component",
        "description": "Specifies a wrapper for the inline filters.",
        "filePath": "libs/components/lists/src/lib/modules/filter/filter-inline.component.ts",
        "kind": "component",
        "name": "SkyFilterInlineComponent",
        "selector": "sky-filter-inline"
      },
      {
        "anchorId": "class_sky-filter-summary-item-component",
        "children": [
          {
            "description": "Whether the filter summary item has a close button.",
            "kind": "directive-input",
            "name": "dismissible",
            "type": "boolean"
          },
          {
            "description": "Fires when the summary item close button is selected.",
            "kind": "directive-output",
            "name": "dismiss",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when the summary item is selected.",
            "kind": "directive-output",
            "name": "itemClick",
            "type": "EventEmitter<void>"
          }
        ],
        "description": "Specifies a filter that was applied.",
        "filePath": "libs/components/lists/src/lib/modules/filter/filter-summary-item.component.ts",
        "kind": "component",
        "name": "SkyFilterSummaryItemComponent",
        "selector": "sky-filter-summary-item"
      },
      {
        "anchorId": "class_sky-filter-summary-component",
        "description": "Specifies a wrapper for the filters that were applied.",
        "filePath": "libs/components/lists/src/lib/modules/filter/filter-summary.component.ts",
        "kind": "component",
        "name": "SkyFilterSummaryComponent",
        "selector": "sky-filter-summary"
      },
      {
        "anchorId": "class_sky-filter-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFilterModule"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/filter/filter.module.ts",
        "kind": "module",
        "name": "SkyFilterModule"
      },
      {
        "anchorId": "class_sky-infinite-scroll-component",
        "children": [
          {
            "description": "Whether to make the infinite scroll component active when more data is available to load. By default, infinite scroll is inactive and does not call the load function.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "enabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether data is loading because of a `scrollEnd` event. Setting the property to `true` disables new `scrollEnd` events from firing until it changes to `false`. If this property is not specified, the infinite scroll component watches the DOM for changes and fires `scrollEnd` events when changes occur on its parent DOM element. Relying on this default behavior could fire an excessive number of `scrollEnd` events if the DOM changes are not related to loading data, so we strongly recommend using this property to explicitly set the infinite scroll's loading state.",
            "kind": "directive-input",
            "name": "loading",
            "type": "undefined | boolean",
            "isRequired": true
          },
          {
            "description": "Fires when scrolling triggers the need to load more data or when users select the button to load more data. This event only fires when the `enabled` property is set to `true` and data is not already loading.",
            "kind": "directive-output",
            "name": "scrollEnd",
            "type": "EventEmitter<void>"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/infinite-scroll/infinite-scroll.component.ts",
        "kind": "component",
        "name": "SkyInfiniteScrollComponent",
        "selector": "sky-infinite-scroll"
      },
      {
        "anchorId": "class_sky-infinite-scroll-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInfiniteScrollModule"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/infinite-scroll/infinite-scroll.module.ts",
        "kind": "module",
        "name": "SkyInfiniteScrollModule"
      },
      {
        "anchorId": "class_sky-paging-content-component",
        "filePath": "libs/components/lists/src/lib/modules/paging/paging-content.component.ts",
        "kind": "component",
        "name": "SkyPagingContentComponent",
        "selector": "sky-paging-content"
      },
      {
        "anchorId": "class_sky-paging-component",
        "children": [
          {
            "description": "The page number of the current page. Page numbers start at 1 and increment.",
            "defaultValue": "1",
            "kind": "directive-input",
            "name": "currentPage",
            "type": "number"
          },
          {
            "description": "The total number of items across all pages.",
            "defaultValue": "0",
            "kind": "directive-input",
            "name": "itemCount",
            "type": "number"
          },
          {
            "description": "The maximum number of pages to display in the pagination control.",
            "defaultValue": "5",
            "kind": "directive-input",
            "name": "maxPages",
            "type": "number"
          },
          {
            "description": "The number of items to display per page.",
            "defaultValue": "10",
            "kind": "directive-input",
            "name": "pageSize",
            "type": "number"
          },
          {
            "description": "The label for the pagination control when an application includes multiple paging components on the same page. The label should be unique and descriptive to help users of assistive technology differentiate pagination controls and understand what each one does.",
            "defaultValue": "\"Pagination\"",
            "kind": "directive-input",
            "name": "pagingLabel",
            "type": "undefined | string"
          },
          {
            "description": "Fires when the current page changes and emits the new current page with a function to call when loading the new page completes. Handling this event will display the wait component until the callback function is called, and focus will move to the top of the list for keyboard navigation if the list contents are placed inside the sky-paging-content element.",
            "kind": "directive-output",
            "name": "contentChange",
            "type": "EventEmitter<SkyPagingContentChangeArgs>"
          },
          {
            "description": "Fires when the current page changes and emits the new current page.",
            "kind": "directive-output",
            "name": "currentPageChange",
            "type": "EventEmitter<number>"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/paging/paging.component.ts",
        "kind": "component",
        "name": "SkyPagingComponent",
        "selector": "sky-paging"
      },
      {
        "anchorId": "class_sky-paging-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPagingModule"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/paging/paging.module.ts",
        "kind": "module",
        "name": "SkyPagingModule"
      },
      {
        "anchorId": "interface_sky-paging-content-change-args",
        "children": [
          {
            "description": "The current page number.",
            "kind": "interface-property",
            "name": "currentPage",
            "type": "number"
          },
          {
            "description": "A function to call when loading the paged content completes.",
            "kind": "interface-property",
            "name": "loadingComplete",
            "type": "Function"
          }
        ],
        "description": "Information about the paged content to load.",
        "filePath": "libs/components/lists/src/lib/modules/paging/types/paging-content-change-args.ts",
        "kind": "interface",
        "name": "SkyPagingContentChangeArgs"
      },
      {
        "anchorId": "type-alias_sky-repeater-expand-mode-type",
        "filePath": "libs/components/lists/src/lib/modules/repeater/repeater-expand-mode-type.ts",
        "kind": "type-alias",
        "name": "SkyRepeaterExpandModeType",
        "type": "\"single\" | \"multiple\" | \"none\""
      },
      {
        "anchorId": "class_sky-repeater-item-content-component",
        "description": "Displays content text when the repeater is expanded.",
        "filePath": "libs/components/lists/src/lib/modules/repeater/repeater-item-content.component.ts",
        "kind": "component",
        "name": "SkyRepeaterItemContentComponent",
        "selector": "sky-repeater-item-content"
      },
      {
        "anchorId": "class_sky-repeater-item-context-menu-component",
        "description": "Wraps and styles a [`skyux-dropdown` component](https://developer.blackbaud.com/skyux-popovers/docs/dropdown).",
        "filePath": "libs/components/lists/src/lib/modules/repeater/repeater-item-context-menu.component.ts",
        "kind": "component",
        "name": "SkyRepeaterItemContextMenuComponent",
        "selector": "sky-repeater-item-context-menu"
      },
      {
        "anchorId": "class_sky-repeater-item-title-component",
        "description": "Displays a header inside the repeater item.",
        "filePath": "libs/components/lists/src/lib/modules/repeater/repeater-item-title.component.ts",
        "kind": "component",
        "name": "SkyRepeaterItemTitleComponent",
        "selector": "sky-repeater-item-title"
      },
      {
        "anchorId": "class_sky-repeater-item-component",
        "children": [
          {
            "description": "Configuration options for the buttons to display on an inline form within the repeater. This property accepts [a `SkyInlineFormConfig` object](https://developer.blackbaud.com/skyux/components/inline-form#skyinlineformconfig-properties).",
            "kind": "directive-input",
            "name": "inlineFormConfig",
            "type": "undefined | SkyInlineFormConfig"
          },
          {
            "description": "Specifies [an Angular `TemplateRef`](https://angular.io/api/core/TemplateRef) to use as a template to instantiate an inline form within the repeater.",
            "kind": "directive-input",
            "name": "inlineFormTemplate",
            "type": "undefined | TemplateRef<unknown>"
          },
          {
            "description": "Whether users can change the order of the repeater item. The repeater component's `reorderable` property must also be set to `true`.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "reorderable",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to display a checkbox in the left of the repeater item.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "selectable",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to display an inline form within the repeater. Users can toggle between displaying and hiding the inline form.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showInlineForm",
            "type": "undefined | boolean"
          },
          {
            "description": "The object that the repeater component returns for this repeater item when the `orderChange` event fires. This is required if you set the `reorderable` property to `true`.",
            "kind": "directive-input",
            "name": "tag",
            "type": "any"
          },
          {
            "description": "Whether to exclude an item when cycling through.",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether the repeater item is expanded.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "isExpanded",
            "type": "boolean"
          },
          {
            "description": "Whether the repeater item's checkbox is selected. When users select the repeater item, the specified property on your model is updated accordingly.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "isSelected",
            "type": "undefined | boolean"
          },
          {
            "description": "The human-readable name for the repeater item that is available for multiple purposes, such as accessibility and instrumentation. For example, the component uses the name to construct ARIA labels for the repeater item controls to [support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If not specified, the repeater item's title will be used for this value. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "itemName",
            "type": "undefined | string"
          },
          {
            "description": "Fires when users collapse the repeater item.",
            "kind": "directive-output",
            "name": "collapse",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when users expand the repeater item.",
            "kind": "directive-output",
            "name": "expand",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when the repeater includes an inline form and users close it. This event emits [a `SkyInlineFormCloseArgs` type](https://developer.blackbaud.com/skyux/components/inline-form#skyinlineformcloseargs-properties).",
            "kind": "directive-output",
            "name": "inlineFormClose",
            "type": "EventEmitter<SkyInlineFormCloseArgs>"
          },
          {
            "description": "Fires when users select or clear the checkbox for the repeater item.",
            "kind": "directive-output",
            "name": "isSelectedChange",
            "type": "EventEmitter<boolean>"
          }
        ],
        "description": "Creates an individual repeater item.",
        "filePath": "libs/components/lists/src/lib/modules/repeater/repeater-item.component.ts",
        "kind": "component",
        "name": "SkyRepeaterItemComponent",
        "selector": "sky-repeater-item"
      },
      {
        "anchorId": "class_sky-repeater-component",
        "children": [
          {
            "description": "The index of the repeater item to visually highlight as active. For example, use this property in conjunction with the [split view component](https://developer.blackbaud.com/skyux/components/split-view) to highlight a repeater item while users edit it. Only one item can be active at a time.",
            "kind": "directive-input",
            "name": "activeIndex",
            "type": "undefined | number"
          },
          {
            "description": "The ARIA label for the repeater list. This sets the repeater list's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "defaultValue": "\"List of items\"",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "Whether users can change the order of items in the repeater list. Each repeater item also has `reorderable` property to indicate whether users can change its order.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "reorderable",
            "type": "undefined | boolean"
          },
          {
            "description": "The layout that determines which repeater items are expanded by default and whether repeater items are expandable and collapsible. Collapsed items display titles only. The valid options are `multiple`, `none`, and `single`. - `multiple` loads repeater items in an expanded state unless `isExpanded` is set to `false` for a repeater item. This layout allows users to expand and collapse as many repeater items as necessary. It is best-suited to repeater items where body content is important but users don't always need to see it. - `none` loads all repeater items in an expanded state and does not allow users to collapse them. This default layout provides the quickest access to the details in the repeater items. It is best-suited to repeater items with concise content that users need to view frequently. - `single` loads one repeater item in an expanded state and collapses all others. The expanded repeater item is the first one where `isExpanded` is set to `true`. This layout allows users to expand one item at a time. It provides the most compact view and is best-suited to repeater items where the most important information is in the titles and users only occasionally need to view the body content.",
            "defaultValue": "\"none\"",
            "kind": "directive-input",
            "name": "expandMode",
            "type": "SkyRepeaterExpandModeType"
          },
          {
            "description": "Fires when the active repeater item changes.",
            "kind": "directive-output",
            "name": "activeIndexChange",
            "type": "EventEmitter<number>"
          },
          {
            "description": "Fires when users change the order of repeater items. This event emits an ordered array of the `tag` properties that the consumer provides for each repeater item.",
            "kind": "directive-output",
            "name": "orderChange",
            "type": "EventEmitter<any[]>"
          }
        ],
        "description": "Creates a container to display repeater items.",
        "filePath": "libs/components/lists/src/lib/modules/repeater/repeater.component.ts",
        "kind": "component",
        "name": "SkyRepeaterComponent",
        "selector": "sky-repeater"
      },
      {
        "anchorId": "class_sky-repeater-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRepeaterModule"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/repeater/repeater.module.ts",
        "kind": "module",
        "name": "SkyRepeaterModule"
      },
      {
        "anchorId": "class_sky-sort-item-component",
        "children": [
          {
            "description": "Whether the sorting option is active.",
            "kind": "directive-input",
            "name": "active",
            "type": "undefined | boolean"
          },
          {
            "description": "Fires when a sort item is selected.",
            "kind": "directive-output",
            "name": "itemSelect",
            "type": "EventEmitter<any>"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/sort/sort-item.component.ts",
        "kind": "component",
        "name": "SkySortItemComponent",
        "selector": "sky-sort-item"
      },
      {
        "anchorId": "class_sky-sort-component",
        "children": [
          {
            "description": "The ARIA label for the sort button. This sets the sort button's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). Use a context-sensitive label, such as \"Sort constituents.\" Context is especially important when multiple filter buttons are in close proximity. In toolbars, sort buttons use the `listDescriptor` to provide context, and the ARIA label defaults to \"Sort <listDescriptor>.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "Whether to display a \"Sort\" label beside the icon on the sort button.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "showButtonText",
            "type": "undefined | boolean"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/sort/sort.component.ts",
        "kind": "component",
        "name": "SkySortComponent",
        "selector": "sky-sort"
      },
      {
        "anchorId": "class_sky-sort-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySortModule"
          }
        ],
        "filePath": "libs/components/lists/src/lib/modules/sort/sort.module.ts",
        "kind": "module",
        "name": "SkySortModule"
      }
    ],
    "@skyux/lists/testing": [
      {
        "anchorId": "class_sky-filter-fixture-button",
        "children": [
          {
            "description": "Click the button to apply the filter.",
            "kind": "class-method",
            "name": "clickFilterButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFilterFixtureButton"
          },
          {
            "kind": "class-property",
            "name": "button",
            "type": "SkyListsFilterFixtureButton"
          },
          {
            "description": "Get the button text.",
            "kind": "class-property",
            "name": "buttonText",
            "type": "string"
          },
          {
            "description": "Click the button to apply the filter.",
            "kind": "class-property",
            "name": "clickFilterButton",
            "type": "Promise<void>"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX filter button component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/lists/testing/src/legacy/filter/filter-fixture-button.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyFilterFixtureButton"
      },
      {
        "anchorId": "class_sky-filter-fixture-summary",
        "children": [
          {
            "kind": "class-method",
            "name": "filterCloseClick",
            "parameters": [{ "name": "index", "type": "number" }],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFilterFixtureSummary"
          },
          {
            "kind": "class-property",
            "name": "filterCloseClick",
            "type": "Promise<void>"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX filter summary component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/lists/testing/src/legacy/filter/filter-fixture-summary.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyFilterFixtureSummary"
      },
      {
        "anchorId": "class_sky-filter-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyFilterTestingModule"
          }
        ],
        "filePath": "libs/components/lists/testing/src/legacy/filter/filter-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyFilterTestingModule"
      },
      {
        "anchorId": "class_sky-infinite-scroll-fixture",
        "children": [
          {
            "kind": "class-method",
            "name": "clickLoadMoreButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInfiniteScrollFixture"
          },
          {
            "kind": "class-property",
            "name": "loadMoreButtonIsVisible",
            "type": "boolean"
          },
          {
            "kind": "class-property",
            "name": "clickLoadMoreButton",
            "type": "Promise<void>"
          }
        ],
        "deprecationReason": "Use `SkyInfiniteScrollHarness` instead.",
        "description": "Provides information for and interaction with a SKY UX infinite scroll component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/lists/testing/src/legacy/infinite-scroll/infinite-scroll-fixture.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "SkyInfiniteScrollFixture"
      },
      {
        "anchorId": "class_sky-infinite-scroll-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInfiniteScrollTestingModule"
          }
        ],
        "filePath": "libs/components/lists/testing/src/legacy/infinite-scroll/infinite-scroll-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyInfiniteScrollTestingModule"
      },
      {
        "anchorId": "interface_sky-paging-fixture-button",
        "children": [
          { "kind": "interface-property", "name": "id", "type": "string" },
          {
            "kind": "interface-property",
            "name": "isActive",
            "type": "boolean"
          },
          {
            "kind": "interface-property",
            "name": "isEnabled",
            "type": "boolean"
          }
        ],
        "filePath": "libs/components/lists/testing/src/legacy/paging/paging-fixture-button.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyPagingFixtureButton"
      },
      {
        "anchorId": "class_sky-paging-fixture",
        "children": [
          {
            "description": "Clicks the next page button, if it is enabled.",
            "kind": "class-method",
            "name": "selectNextPage",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Selects the specified page by id, if it is enabled.",
            "kind": "class-method",
            "name": "selectPage",
            "parameters": [{ "name": "id", "type": "string | number" }],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the previous page button, if it is enabled.",
            "kind": "class-method",
            "name": "selectPreviousPage",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPagingFixture"
          },
          {
            "description": "The id of the active page, if available.",
            "kind": "class-property",
            "name": "activePageId",
            "type": "string"
          },
          {
            "description": "Properties of the page links displayed in the paging component.",
            "kind": "class-property",
            "name": "pageLinks",
            "type": "SkyPagingFixtureButton[]"
          },
          {
            "description": "Clicks the next page button, if it is enabled.",
            "kind": "class-property",
            "name": "selectNextPage",
            "type": "Promise<void>"
          },
          {
            "description": "Selects the specified page by id, if it is enabled.",
            "kind": "class-property",
            "name": "selectPage",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the previous page button, if it is enabled.",
            "kind": "class-property",
            "name": "selectPreviousPage",
            "type": "Promise<void>"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX paging component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/lists/testing/src/legacy/paging/paging-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyPagingFixture"
      },
      {
        "anchorId": "class_sky-paging-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPagingTestingModule"
          }
        ],
        "filePath": "libs/components/lists/testing/src/legacy/paging/paging-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyPagingTestingModule"
      },
      {
        "anchorId": "interface_sky-sort-fixture-menu-item",
        "children": [
          { "kind": "interface-property", "name": "index", "type": "number" },
          {
            "kind": "interface-property",
            "name": "isActive",
            "type": "boolean"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "text",
            "type": "string"
          }
        ],
        "filePath": "libs/components/lists/testing/src/legacy/sort/sort-fixture-menu-item.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkySortFixtureMenuItem"
      },
      {
        "anchorId": "interface_sky-sort-fixture-menu",
        "children": [
          {
            "kind": "interface-property",
            "name": "buttonText",
            "type": "string"
          },
          { "kind": "interface-property", "name": "isOpen", "type": "boolean" }
        ],
        "filePath": "libs/components/lists/testing/src/legacy/sort/sort-fixture-menu.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkySortFixtureMenu"
      },
      {
        "anchorId": "class_sky-sort-fixture",
        "children": [
          {
            "description": "Closes the sort dropdown menu if it isn't closed already.",
            "kind": "class-method",
            "name": "closeMenu",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Opens the sort dropdown menu if it isn't open already.",
            "kind": "class-method",
            "name": "openMenu",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Ensures the sort menu is open and selects the menu item with the specified index, if it exists.",
            "kind": "class-method",
            "name": "selectMenuItemByIndex",
            "parameters": [
              {
                "description": "The index of the menu item to select.",
                "name": "menuItemIndex",
                "type": "number"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Ensures the sort menu is open and selects the menu item with the specified text, if a matching item is available.",
            "kind": "class-method",
            "name": "selectMenuItemByText",
            "parameters": [
              {
                "description": "The text of the menu item to select.",
                "name": "menuItemText",
                "type": "undefined | string"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySortFixture"
          },
          {
            "description": "The active sort menu item, if one exists. Menu items are only available when the menu dropdown is open. If the menu dropdown is closed, this property will be undefined.",
            "kind": "class-property",
            "name": "activeMenuItem",
            "type": "undefined | SkySortFixtureMenuItem"
          },
          {
            "description": "The sort menu's properties.",
            "kind": "class-property",
            "name": "menu",
            "type": "SkySortFixtureMenu"
          },
          {
            "description": "The properties of each sort menu item. Menu items are only available when the menu dropdown is open. If the menu dropdown is closed, this property will be undefined.",
            "kind": "class-property",
            "name": "menuItems",
            "type": "undefined | SkySortFixtureMenuItem[]"
          },
          {
            "description": "Closes the sort dropdown menu if it isn't closed already.",
            "kind": "class-property",
            "name": "closeMenu",
            "type": "Promise<void>"
          },
          {
            "description": "Opens the sort dropdown menu if it isn't open already.",
            "kind": "class-property",
            "name": "openMenu",
            "type": "Promise<void>"
          },
          {
            "description": "Ensures the sort menu is open and selects the menu item with the specified index, if it exists.",
            "kind": "class-property",
            "name": "selectMenuItemByIndex",
            "type": "Promise<void>"
          },
          {
            "description": "Ensures the sort menu is open and selects the menu item with the specified text, if a matching item is available.",
            "kind": "class-property",
            "name": "selectMenuItemByText",
            "type": "Promise<void>"
          }
        ],
        "description": "Provides information for and interaction with a SKY UX sort component. By using the fixture API, a test insulates itself against updates to the internals of a component, such as changing its DOM structure.",
        "filePath": "libs/components/lists/testing/src/legacy/sort/sort-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkySortFixture"
      },
      {
        "anchorId": "class_sky-sort-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySortTestingModule"
          }
        ],
        "filePath": "libs/components/lists/testing/src/legacy/sort/sort-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkySortTestingModule"
      },
      {
        "anchorId": "interface_sky-infinite-scroll-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyInfiniteScrollHarness` instances.",
        "filePath": "libs/components/lists/testing/src/modules/infinite-scroll/infinite-scroll-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyInfiniteScrollHarnessFilters"
      },
      {
        "anchorId": "class_sky-infinite-scroll-harness",
        "children": [
          {
            "description": "Whether the infinite scroll is enabled.",
            "kind": "class-method",
            "name": "isEnabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the infinite scroll is loading.",
            "kind": "class-method",
            "name": "isLoading",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Clicks the \"Load more\" button.",
            "kind": "class-method",
            "name": "loadMore",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyInfiniteScrollHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyInfiniteScrollHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyInfiniteScrollHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInfiniteScrollHarness"
          },
          {
            "defaultValue": "'sky-infinite-scroll'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Whether the infinite scroll is enabled.",
            "kind": "class-property",
            "name": "isEnabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the infinite scroll is loading.",
            "kind": "class-property",
            "name": "isLoading",
            "type": "Promise<boolean>"
          },
          {
            "description": "Clicks the \"Load more\" button.",
            "kind": "class-property",
            "name": "loadMore",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyInfiniteScrollHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyInfiniteScrollHarness>"
          }
        ],
        "description": "Harness for interacting with an infinite scroll component in tests.",
        "filePath": "libs/components/lists/testing/src/modules/infinite-scroll/infinite-scroll-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyInfiniteScrollHarness"
      },
      {
        "anchorId": "interface_sky-repeater-harness-filters",
        "description": "A set of criteria that can be used to filter a list of `SkyRepeaterHarness` instances.",
        "filePath": "libs/components/lists/testing/src/modules/repeater/repeater-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyRepeaterHarnessFilters"
      },
      {
        "anchorId": "class_sky-repeater-harness",
        "children": [
          {
            "description": "Gets a list of child repeater items.",
            "kind": "class-method",
            "name": "getRepeaterItems",
            "parameters": [
              {
                "isOptional": true,
                "name": "filters",
                "type": "SkyRepeaterItemHarnessFilters"
              }
            ],
            "type": "Promise<SkyRepeaterItemHarness[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRepeaterHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyRepeaterHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyRepeaterHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRepeaterHarness"
          },
          {
            "defaultValue": "'sky-repeater'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets a list of child repeater items.",
            "kind": "class-property",
            "name": "getRepeaterItems",
            "type": "Promise<SkyRepeaterItemHarness[]>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRepeaterHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyRepeaterHarness>"
          }
        ],
        "description": "Harness for interacting with a repeater component in tests.",
        "filePath": "libs/components/lists/testing/src/modules/repeater/repeater-harness.ts",
        "kind": "class",
        "name": "SkyRepeaterHarness"
      },
      {
        "anchorId": "interface_sky-repeater-item-harness-filters",
        "children": [
          {
            "description": "Only find instances whose content matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "contentText",
            "type": "string | RegExp"
          },
          {
            "description": "Only find instances whose title matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "titleText",
            "type": "string | RegExp"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of `SkyRepeaterItemHarness` instances.",
        "filePath": "libs/components/lists/testing/src/modules/repeater/repeater-item-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyRepeaterItemHarnessFilters"
      },
      {
        "anchorId": "class_sky-repeater-item-harness",
        "children": [
          {
            "description": "Clicks on the repeater item.",
            "kind": "class-method",
            "name": "click",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Collapses the repeater item, or does nothing if already collapsed.",
            "kind": "class-method",
            "name": "collapse",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Deselects the repeater item.",
            "kind": "class-method",
            "name": "deselect",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Expands the repeater item, or does nothing if already expanded.",
            "kind": "class-method",
            "name": "expand",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the text of the repeater item content.",
            "kind": "class-method",
            "name": "getContentText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text of the repeater item title.",
            "kind": "class-method",
            "name": "getTitleText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the repeater item is collapsible.",
            "kind": "class-method",
            "name": "isCollapsible",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is expanded, or throws an error informing of the lack of collapsibility.",
            "kind": "class-method",
            "name": "isExpanded",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is reorderable.",
            "kind": "class-method",
            "name": "isReorderable",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is selectable.",
            "kind": "class-method",
            "name": "isSelectable",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is selected.",
            "kind": "class-method",
            "name": "isSelected",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects the repeater item.",
            "kind": "class-method",
            "name": "select",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Moves the repeater item to the top of the list",
            "kind": "class-method",
            "name": "sendToTop",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRepeaterItemHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyRepeaterItemHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyRepeaterItemHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyRepeaterItemHarness"
          },
          {
            "defaultValue": "'sky-repeater-item'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks on the repeater item.",
            "kind": "class-property",
            "name": "click",
            "type": "Promise<void>"
          },
          {
            "description": "Collapses the repeater item, or does nothing if already collapsed.",
            "kind": "class-property",
            "name": "collapse",
            "type": "Promise<void>"
          },
          {
            "description": "Deselects the repeater item.",
            "kind": "class-property",
            "name": "deselect",
            "type": "Promise<void>"
          },
          {
            "description": "Expands the repeater item, or does nothing if already expanded.",
            "kind": "class-property",
            "name": "expand",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the text of the repeater item content.",
            "kind": "class-property",
            "name": "getContentText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets the text of the repeater item title.",
            "kind": "class-property",
            "name": "getTitleText",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the repeater item is collapsible.",
            "kind": "class-property",
            "name": "isCollapsible",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is expanded, or throws an error informing of the lack of collapsibility.",
            "kind": "class-property",
            "name": "isExpanded",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is reorderable.",
            "kind": "class-property",
            "name": "isReorderable",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is selectable.",
            "kind": "class-property",
            "name": "isSelectable",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the repeater item is selected.",
            "kind": "class-property",
            "name": "isSelected",
            "type": "Promise<boolean>"
          },
          {
            "description": "Selects the repeater item.",
            "kind": "class-property",
            "name": "select",
            "type": "Promise<void>"
          },
          {
            "description": "Moves the repeater item to the top of the list",
            "kind": "class-property",
            "name": "sendToTop",
            "type": "Promise<void>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyRepeaterItemHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyRepeaterItemHarness>"
          }
        ],
        "description": "Harness for interacting with a repeater item component in tests.",
        "filePath": "libs/components/lists/testing/src/modules/repeater/repeater-item-harness.ts",
        "kind": "class",
        "name": "SkyRepeaterItemHarness"
      }
    ],
    "@skyux/pages": [
      {
        "anchorId": "class_sky-action-hub-buttons-component",
        "codeExample": "<a class=\"sky-btn sky-btn-default\" href=\"path/to/new\">New</a>",
        "codeExampleLanguage": "markup",
        "description": "Displays buttons after the page title.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/action-hub-buttons.component.ts",
        "kind": "component",
        "name": "SkyActionHubButtonsComponent",
        "selector": "sky-action-hub-buttons"
      },
      {
        "anchorId": "class_sky-action-hub-content-component",
        "description": "Displays additional content after the action items.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/action-hub-content.component.ts",
        "kind": "component",
        "name": "SkyActionHubContentComponent",
        "selector": "sky-action-hub-content"
      },
      {
        "anchorId": "class_sky-action-hub-component",
        "children": [
          {
            "description": "Links back to a parent page.",
            "kind": "directive-input",
            "name": "parentLink",
            "type": "undefined | SkyPageLink"
          },
          {
            "description": "The list of recently accessed links, or `\"loading\"` to display a wait indicator.",
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "recentLinks",
            "type": "SkyRecentLinksInput"
          },
          {
            "description": "The list of related links, or `\"loading\"` to display a wait indicator.",
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "relatedLinks",
            "type": "SkyPageLinksInput"
          },
          {
            "description": "The list of settings with modal parameters, or `\"loading\"` to display a wait indicator.",
            "defaultValue": "[]",
            "kind": "directive-input",
            "name": "settingsLinks",
            "type": "SkyPageModalLinksInput"
          },
          {
            "description": "The page title.",
            "defaultValue": "\"\"",
            "kind": "directive-input",
            "name": "title",
            "type": "string"
          },
          {
            "description": "The list of actions that users must perform based on business requirements or best practices, or `\"loading\"` to display a wait indicator.",
            "kind": "directive-input",
            "name": "needsAttention",
            "type": "undefined | SkyActionHubNeedsAttentionInput"
          }
        ],
        "description": "Creates an action hub to direct user attention to important actions and provide quick access to common tasks.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/action-hub.component.ts",
        "kind": "component",
        "name": "SkyActionHubComponent",
        "selector": "sky-action-hub"
      },
      {
        "anchorId": "class_sky-action-hub-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyActionHubModule"
          }
        ],
        "filePath": "libs/components/pages/src/lib/modules/action-hub/action-hub.module.ts",
        "kind": "module",
        "name": "SkyActionHubModule"
      },
      {
        "anchorId": "interface_sky-action-hub-needs-attention-click-handler-args",
        "children": [
          { "kind": "interface-property", "name": "item", "type": "unknown" }
        ],
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/action-hub-needs-attention-click-handler.ts",
        "kind": "interface",
        "name": "SkyActionHubNeedsAttentionClickHandlerArgs"
      },
      {
        "anchorId": "type-alias_sky-action-hub-needs-attention-click-handler",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/action-hub-needs-attention-click-handler.ts",
        "kind": "type-alias",
        "name": "SkyActionHubNeedsAttentionClickHandler",
        "type": "Function"
      },
      {
        "anchorId": "interface_sky-action-hub-needs-attention",
        "children": [
          {
            "description": "The click handler for the action item.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "click",
            "type": "SkyActionHubNeedsAttentionClickHandler"
          },
          {
            "deprecationReason": "Use `title` instead.",
            "description": "Text to display after the title.",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "message",
            "type": "string"
          },
          {
            "description": "The link to resolve the action item.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "permalink",
            "type": "Object"
          },
          {
            "description": "The title of the action item.",
            "kind": "interface-property",
            "name": "title",
            "type": "string"
          }
        ],
        "description": "Specifies action items that require attention and directs users to pages where they can resolve them.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/action-hub-needs-attention.ts",
        "kind": "interface",
        "name": "SkyActionHubNeedsAttention"
      },
      {
        "anchorId": "interface_sky-page-link",
        "children": [
          {
            "description": "The link text.",
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The link destination.",
            "kind": "interface-property",
            "name": "permalink",
            "type": "Object"
          }
        ],
        "description": "Displays links to related information or recently accessed items.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/page-link.ts",
        "kind": "interface",
        "name": "SkyPageLink"
      },
      {
        "anchorId": "type-alias_sky-page-links-input",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/page-links-input.ts",
        "kind": "type-alias",
        "name": "SkyPageLinksInput",
        "type": "SkyPageLink[] | \"loading\" | undefined"
      },
      {
        "anchorId": "interface_sky-page-modal-link",
        "children": [
          {
            "description": "The link text.",
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The modal parameters.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "modal",
            "type": "Object"
          },
          {
            "description": "The link destination.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "permalink",
            "type": "Object"
          }
        ],
        "description": "Displays links to related information or recently accessed items.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/page-modal-link.ts",
        "kind": "interface",
        "name": "SkyPageModalLink"
      },
      {
        "anchorId": "type-alias_sky-page-modal-links-input",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/page-modal-links-input.ts",
        "kind": "type-alias",
        "name": "SkyPageModalLinksInput",
        "type": "SkyPageModalLink[] | \"loading\" | undefined"
      },
      {
        "anchorId": "interface_sky-recent-link",
        "children": [
          {
            "description": "The link text.",
            "kind": "interface-property",
            "name": "label",
            "type": "string"
          },
          {
            "description": "The date when the link was last accessed. Valid types are a Date object or ISO-8601 string.",
            "kind": "interface-property",
            "name": "lastAccessed",
            "type": "string | Date"
          },
          {
            "description": "The link destination.",
            "kind": "interface-property",
            "name": "permalink",
            "type": "Object"
          }
        ],
        "description": "Link that also has a date field to sort by.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/recent-link.ts",
        "kind": "interface",
        "name": "SkyRecentLink"
      },
      {
        "anchorId": "type-alias_sky-recent-links-input",
        "description": "Recently accessed links to display in a link list component.",
        "filePath": "libs/components/pages/src/lib/modules/action-hub/types/recent-links-input.ts",
        "kind": "type-alias",
        "name": "SkyRecentLinksInput",
        "type": "SkyRecentLink[] | \"loading\" | SkyRecentlyAccessedGetLinksArgs | undefined"
      },
      {
        "anchorId": "class_sky-link-list-recently-accessed-component",
        "children": [
          {
            "description": "Option to pass links as an array of `SkyRecentLink` objects, a `SkyRecentlyAccessedGetLinksArgs` object for `SkyRecentlyAccessedService`, or `'loading'` to display a loading indicator.",
            "kind": "directive-input",
            "name": "recentLinks",
            "type": "InputSignal<SkyRecentLinksInput>"
          }
        ],
        "description": "A component that displays a list of recently accessed links, such as within a `<sky-page-links>` component.",
        "filePath": "libs/components/pages/src/lib/modules/link-list-recently-accessed/link-list-recently-accessed.component.ts",
        "kind": "component",
        "name": "SkyLinkListRecentlyAccessedComponent",
        "selector": "sky-link-list-recently-accessed"
      },
      {
        "anchorId": "class_sky-link-list-item-component",
        "description": "A wrapper for each link in a link list.",
        "filePath": "libs/components/pages/src/lib/modules/link-list/link-list-item.component.ts",
        "kind": "component",
        "name": "SkyLinkListItemComponent",
        "selector": "sky-link-list-item"
      },
      {
        "anchorId": "class_sky-link-list-component",
        "children": [
          {
            "description": "The text to display as the list's heading.",
            "kind": "directive-input",
            "name": "headingText",
            "type": "InputSignal<undefined | string>"
          },
          {
            "description": "Option to pass links as an array of `SkyPageLink` objects or `'loading'` to display a loading indicator.",
            "kind": "directive-input",
            "name": "links",
            "type": "InputSignal<SkyPageLinksInput>"
          }
        ],
        "description": "A component that displays a list of links, such as within a `<sky-page-links>` component.",
        "filePath": "libs/components/pages/src/lib/modules/link-list/link-list.component.ts",
        "kind": "component",
        "name": "SkyLinkListComponent",
        "selector": "sky-link-list"
      },
      {
        "anchorId": "class_sky-link-list-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLinkListModule"
          }
        ],
        "filePath": "libs/components/pages/src/lib/modules/link-list/link-list.module.ts",
        "kind": "module",
        "name": "SkyLinkListModule"
      },
      {
        "anchorId": "class_sky-modal-link-list-component",
        "children": [
          {
            "kind": "directive-input",
            "name": "title",
            "type": "undefined | string"
          },
          {
            "kind": "directive-input",
            "name": "links",
            "type": "SkyPageModalLinksInput"
          }
        ],
        "filePath": "libs/components/pages/src/lib/modules/modal-link-list/modal-link-list.component.ts",
        "kind": "component",
        "name": "SkyModalLinkListComponent",
        "selector": "sky-modal-link-list"
      },
      {
        "anchorId": "class_sky-page-header-actions-component",
        "description": "Displays buttons within the page header for page actions and applies spacing between buttons. Appears below the page header details.",
        "filePath": "libs/components/pages/src/lib/modules/page-header/page-header-actions.component.ts",
        "kind": "component",
        "name": "SkyPageHeaderActionsComponent",
        "selector": "sky-page-header-actions"
      },
      {
        "anchorId": "class_sky-page-header-alerts-component",
        "description": "Displays alerts within the page header and applies spacing between alerts. Appears above the page title.",
        "filePath": "libs/components/pages/src/lib/modules/page-header/page-header-alerts.component.ts",
        "kind": "component",
        "name": "SkyPageHeaderAlertsComponent",
        "selector": "sky-page-header-alerts"
      },
      {
        "anchorId": "class_sky-page-header-avatar-component",
        "description": "Displays an avatar within the page header to the left of the page title. If no size is specified for the avatar component it will display at size small on xs breakpoints and size large on small and above breakpoints.",
        "filePath": "libs/components/pages/src/lib/modules/page-header/page-header-avatar.component.ts",
        "kind": "component",
        "name": "SkyPageHeaderAvatarComponent",
        "selector": "sky-page-header-avatar"
      },
      {
        "anchorId": "class_sky-page-header-details-component",
        "description": "Displays additional information in the page header, like record details. Appears below the title and above the page actions.",
        "filePath": "libs/components/pages/src/lib/modules/page-header/page-header-details.component.ts",
        "kind": "component",
        "name": "SkyPageHeaderDetailsComponent",
        "selector": "sky-page-header-details"
      },
      {
        "anchorId": "class_sky-page-header-component",
        "children": [
          {
            "description": "The title of the current page.",
            "kind": "directive-input",
            "name": "pageTitle",
            "type": "undefined | string"
          },
          {
            "description": "A link to the parent page of the current page.",
            "kind": "directive-input",
            "name": "parentLink",
            "type": "undefined | SkyPageLink"
          }
        ],
        "description": "Displays page heading's contents using spacing that corresponds to the parent page's layout",
        "filePath": "libs/components/pages/src/lib/modules/page-header/page-header.component.ts",
        "kind": "component",
        "name": "SkyPageHeaderComponent",
        "selector": "sky-page-header"
      },
      {
        "anchorId": "class_sky-page-header-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPageHeaderModule"
          }
        ],
        "filePath": "libs/components/pages/src/lib/modules/page-header/page-header.module.ts",
        "kind": "module",
        "name": "SkyPageHeaderModule"
      },
      {
        "anchorId": "class_sky-page-content-component",
        "description": "Displays page contents using spacing that corresponds to the parent page's layout.",
        "filePath": "libs/components/pages/src/lib/modules/page/page-content.component.ts",
        "kind": "component",
        "name": "SkyPageContentComponent",
        "selector": "sky-page-content"
      },
      {
        "anchorId": "class_sky-page-links-component",
        "description": "Displays page links on the right side of the page, or below the page content on mobile devices.",
        "filePath": "libs/components/pages/src/lib/modules/page/page-links.component.ts",
        "kind": "component",
        "name": "SkyPageLinksComponent",
        "selector": "sky-page-links"
      },
      {
        "anchorId": "class_sky-page-component",
        "children": [
          {
            "description": "A help key that identifies the page's default [global help](https://developer.blackbaud.com/skyux/learn/develop/global-help) content to display.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "void"
          },
          {
            "description": "The page layout that applies spacing to the page header and content. Use the layout that corresponds with the top-level component type used on the page, or use `fit` to constrain the page contents to the available viewport. Use `none` for custom content that does not adhere to predefined spacing or constraints.",
            "defaultValue": "\"none\"",
            "kind": "directive-input",
            "name": "layout",
            "type": "void"
          }
        ],
        "description": "Displays a page using the specified layout. The page component is a responsive container, meaning content will respect the breakpoints within the page element instead of the window. This is helpful if there is other content to the left or right of the page.",
        "filePath": "libs/components/pages/src/lib/modules/page/page.component.ts",
        "kind": "component",
        "name": "SkyPageComponent",
        "selector": "sky-page"
      },
      {
        "anchorId": "class_sky-page-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPageModule"
          }
        ],
        "filePath": "libs/components/pages/src/lib/modules/page/page.module.ts",
        "kind": "module",
        "name": "SkyPageModule"
      },
      {
        "anchorId": "type-alias_sky-page-layout-type",
        "filePath": "libs/components/pages/src/lib/modules/page/types/page-layout-type.ts",
        "kind": "type-alias",
        "name": "SkyPageLayoutType",
        "type": "\"none\" | \"fit\" | \"blocks\" | \"list\" | \"tabs\""
      }
    ],
    "@skyux/pages/testing": [
      {
        "anchorId": "interface_sky-link-list-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyLinkListHarness instances.",
        "filePath": "libs/components/pages/testing/src/modules/link-list/link-list-harness-filters.ts",
        "kind": "interface",
        "name": "SkyLinkListHarnessFilters"
      },
      {
        "anchorId": "class_sky-link-list-harness",
        "children": [
          {
            "description": "Gets the link list's heading text. If there are no links, this will return `undefined`.",
            "kind": "class-method",
            "name": "getHeadingText",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Whether the link list is showing a list of links.",
            "kind": "class-method",
            "name": "isVisible",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the status of the wait indicator.",
            "kind": "class-method",
            "name": "isWaiting",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLinkListHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyLinkListHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyLinkListHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLinkListHarness"
          },
          {
            "defaultValue": "'sky-link-list'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the link list's heading text. If there are no links, this will return `undefined`.",
            "kind": "class-property",
            "name": "getHeadingText",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Whether the link list is showing a list of links.",
            "kind": "class-property",
            "name": "isVisible",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets the status of the wait indicator.",
            "kind": "class-property",
            "name": "isWaiting",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyLinkListHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyLinkListHarness>"
          }
        ],
        "description": "Harness for interacting with a link list component in tests.",
        "filePath": "libs/components/pages/testing/src/modules/link-list/link-list-harness.ts",
        "kind": "class",
        "name": "SkyLinkListHarness"
      },
      {
        "anchorId": "interface_sky-page-header-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyPageHeaderHarness instances.",
        "filePath": "libs/components/pages/testing/src/modules/page-header/page-header-harness-filters.ts",
        "kind": "interface",
        "name": "SkyPageHeaderHarnessFilters"
      },
      {
        "anchorId": "class_sky-page-header-harness",
        "children": [
          {
            "description": "Gets the current page title.",
            "kind": "class-method",
            "name": "getPageTitle",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the current page title.",
            "kind": "class-method",
            "name": "getParentLinkText",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPageHeaderHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyPageHeaderHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyPageHeaderHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPageHeaderHarness"
          },
          {
            "defaultValue": "'sky-page-header'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the current page title.",
            "kind": "class-property",
            "name": "getPageTitle",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the current page title.",
            "kind": "class-property",
            "name": "getParentLinkText",
            "type": "Promise<string>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPageHeaderHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyPageHeaderHarness>"
          }
        ],
        "description": "Harness for interacting with a page header component in tests.",
        "filePath": "libs/components/pages/testing/src/modules/page-header/page-header-harness.ts",
        "kind": "class",
        "name": "SkyPageHeaderHarness"
      },
      {
        "anchorId": "interface_sky-page-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyPageHarness instances.",
        "filePath": "libs/components/pages/testing/src/modules/page/page-harness-filters.ts",
        "kind": "interface",
        "name": "SkyPageHarnessFilters"
      },
      {
        "anchorId": "class_sky-page-harness",
        "children": [
          {
            "description": "Gets the current layout.",
            "kind": "class-method",
            "name": "getLayout",
            "parameters": [],
            "type": "Promise<SkyPageLayoutType>"
          },
          {
            "description": "Gets the first page header that matches the given filters.",
            "kind": "class-method",
            "name": "getPageHeader",
            "parameters": [
              {
                "description": "filters for which page header to return",
                "isOptional": true,
                "name": "filters",
                "type": "SkyPageHeaderHarnessFilters"
              }
            ],
            "type": "Promise<SkyPageHeaderHarness>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPageHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyPageHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyPageHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPageHarness"
          },
          {
            "defaultValue": "'sky-page'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the current layout.",
            "kind": "class-property",
            "name": "getLayout",
            "type": "Promise<SkyPageLayoutType>"
          },
          {
            "description": "Gets the first page header that matches the given filters.",
            "kind": "class-property",
            "name": "getPageHeader",
            "type": "Promise<SkyPageHeaderHarness>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyPageHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyPageHarness>"
          }
        ],
        "description": "Harness for interacting with a page component in tests.",
        "filePath": "libs/components/pages/testing/src/modules/page/page-harness.ts",
        "kind": "class",
        "name": "SkyPageHarness"
      }
    ],
    "@skyux/theme": [
      {
        "anchorId": "class_sky-theme-icon-manifest-service",
        "children": [
          {
            "description": "Gets metadata about the SKY UX icon font.",
            "kind": "class-method",
            "name": "getManifest",
            "parameters": [],
            "type": "SkyThemeIconManifest"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyThemeIconManifestService"
          },
          {
            "description": "Gets metadata about the SKY UX icon font.",
            "kind": "class-property",
            "name": "getManifest",
            "type": "SkyThemeIconManifest"
          }
        ],
        "description": "Provides a method for retrieving metadata about the SKY UX icon font.",
        "filePath": "lib/icons/icon-manifest.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyThemeIconManifestService"
      },
      {
        "anchorId": "interface_sky-theme-icon-manifest",
        "children": [
          {
            "description": "A list of available glyphs.",
            "kind": "interface-property",
            "name": "glyphs",
            "type": "SkyIconManifestGlyph[]"
          }
        ],
        "filePath": "lib/icons/icon-manifest.ts",
        "kind": "interface",
        "name": "SkyThemeIconManifest"
      },
      {
        "anchorId": "function_provide-initial-theme",
        "filePath": "lib/providers/provide-initial-theme.ts",
        "kind": "function",
        "name": "provideInitialTheme",
        "parameters": [
          {
            "defaultValue": "'default'",
            "name": "name",
            "type": "\"default\" | \"modern\""
          },
          { "isOptional": true, "name": "options", "type": "Object" }
        ],
        "type": "EnvironmentProviders"
      },
      {
        "anchorId": "class_sky-app-style-loader",
        "children": [
          {
            "kind": "class-method",
            "name": "loadStyles",
            "parameters": [],
            "type": "Promise<any>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppStyleLoader"
          },
          {
            "defaultValue": "false",
            "kind": "class-property",
            "name": "isLoaded",
            "type": "boolean"
          },
          {
            "defaultValue": "3000",
            "isStatic": true,
            "kind": "class-property",
            "name": "LOAD_TIMEOUT",
            "type": "3000"
          },
          {
            "kind": "class-property",
            "name": "loadStyles",
            "type": "Promise<any>"
          }
        ],
        "filePath": "lib/style-loader.ts",
        "kind": "service",
        "name": "SkyAppStyleLoader"
      },
      {
        "anchorId": "class_sky-theme-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyThemeModule"
          }
        ],
        "filePath": "lib/theme.module.ts",
        "kind": "module",
        "name": "SkyThemeModule"
      },
      {
        "anchorId": "class_sky-theme-class-directive",
        "children": [
          {
            "description": "The HTML class attribute.",
            "kind": "directive-input",
            "name": "class",
            "type": "void"
          },
          {
            "description": "An object with class names in a string for keys, and theme names (e.g. 'default' or 'modern') as values.",
            "kind": "directive-input",
            "name": "skyThemeClass",
            "type": "void"
          }
        ],
        "description": "Component to add classes conditionally based on the current theme.  If the directive is within a `skyTheme` directive, it uses settings from that directive.",
        "filePath": "lib/theming/theme-class.directive.ts",
        "kind": "directive",
        "name": "SkyThemeClassDirective",
        "selector": "[skyThemeClass]"
      },
      {
        "anchorId": "class_sky-theme-component-class-directive",
        "filePath": "lib/theming/theme-component-class.directive.ts",
        "kind": "directive",
        "name": "SkyThemeComponentClassDirective",
        "selector": "[skyThemeClass]"
      },
      {
        "anchorId": "class_sky-theme-if-directive",
        "children": [
          {
            "description": "A string that should match the name of a theme, `'default'` or `'modern'`.",
            "kind": "directive-input",
            "name": "skyThemeIf",
            "type": "void"
          }
        ],
        "description": "Component that works like `ngIf` to show markup for matching theme.  If the directive is within a `skyTheme` directive, it uses settings from that directive.",
        "filePath": "lib/theming/theme-if.directive.ts",
        "kind": "directive",
        "name": "SkyThemeIfDirective",
        "selector": "[skyThemeIf]"
      },
      {
        "anchorId": "class_sky-theme-mode",
        "children": [
          {
            "description": "Creates a new theme mode.",
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyThemeMode"
          },
          {
            "description": "The class on the host element which child components should reference when adjusting for a specified theme mode.",
            "kind": "class-property",
            "name": "hostClass",
            "type": "string"
          },
          {
            "description": "The name of the theme mode.",
            "kind": "class-property",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The preset themes available in SKY UX.",
            "isStatic": true,
            "kind": "class-property",
            "name": "presets",
            "type": "Object"
          }
        ],
        "description": "Defines properties of a SKY UX theme mode.",
        "filePath": "lib/theming/theme-mode.ts",
        "kind": "class",
        "name": "SkyThemeMode"
      },
      {
        "anchorId": "interface_sky-theme-settings-change",
        "children": [
          {
            "description": "The theme settings being applied as a result of the change.",
            "kind": "interface-property",
            "name": "currentSettings",
            "type": "SkyThemeSettings"
          },
          {
            "description": "The theme settings being replaced as a result of the change. This is undefined if the theme settings are being set for the first time.",
            "kind": "interface-property",
            "name": "previousSettings",
            "type": "undefined | SkyThemeSettings"
          }
        ],
        "description": "Describes a change to the current theme.",
        "filePath": "lib/theming/theme-settings-change.ts",
        "kind": "interface",
        "name": "SkyThemeSettingsChange"
      },
      {
        "anchorId": "class_sky-theme-settings",
        "children": [
          {
            "description": "Creates a new SkyThemeSettings instance.",
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyThemeSettings"
          },
          {
            "description": "The theme mode.",
            "kind": "class-property",
            "name": "mode",
            "type": "SkyThemeMode"
          },
          {
            "defaultValue": "SkyThemeSpacing.presets.standard",
            "kind": "class-property",
            "name": "spacing",
            "type": "SkyThemeSpacing"
          },
          {
            "description": "The theme configuration.",
            "kind": "class-property",
            "name": "theme",
            "type": "SkyTheme"
          }
        ],
        "description": "Specifies the theme and mode to be applied to a host element.",
        "filePath": "lib/theming/theme-settings.ts",
        "kind": "class",
        "name": "SkyThemeSettings"
      },
      {
        "anchorId": "class_sky-theme-spacing",
        "children": [
          {
            "description": "Creates a new theme spacing.",
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyThemeSpacing"
          },
          {
            "description": "The class on the host element which child components should reference when adjusting for a specified theme spacing.",
            "kind": "class-property",
            "name": "hostClass",
            "type": "string"
          },
          {
            "description": "The name of the theme spacing.",
            "kind": "class-property",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The preset spacing available in SKY UX.",
            "isStatic": true,
            "kind": "class-property",
            "name": "presets",
            "type": "Object"
          }
        ],
        "description": "Defines properties of SKY UX theme spacing.",
        "filePath": "lib/theming/theme-spacing.ts",
        "kind": "class",
        "name": "SkyThemeSpacing"
      },
      {
        "anchorId": "class_sky-theme-directive",
        "children": [
          { "kind": "directive-input", "name": "skyTheme", "type": "void" }
        ],
        "description": "Creates a new instance of `SkyThemeService` to allow a container to have its own theme.",
        "filePath": "lib/theming/theme.directive.ts",
        "kind": "directive",
        "name": "SkyThemeDirective",
        "selector": "[skyTheme]"
      },
      {
        "anchorId": "class_sky-theme-service",
        "children": [
          {
            "description": "Destroys the current theme service. This should only be called from a host component that provides its own theme to child components.",
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Initializes the theme service with the specified parameters. This should only be called from a host component that provides its own theme to child components.",
            "kind": "class-method",
            "name": "init",
            "parameters": [
              {
                "description": "The host element under which themed components are rendered.",
                "name": "hostEl",
                "type": "any"
              },
              {
                "description": "A Renderer2 instance for updating the host element with theme changes.",
                "name": "renderer",
                "type": "Renderer2"
              },
              {
                "description": "The initial theme.",
                "name": "theme",
                "type": "SkyThemeSettings"
              }
            ],
            "type": "void"
          },
          {
            "description": "Updates the current theme settings.",
            "kind": "class-method",
            "name": "setTheme",
            "parameters": [
              {
                "description": "The new theme settings to apply.",
                "name": "settings",
                "type": "SkyThemeSettings"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyThemeService"
          },
          {
            "description": "Notifies consumers when the current theme settings have changed.",
            "kind": "class-property",
            "name": "settingsChange",
            "type": "Observable<SkyThemeSettingsChange>"
          },
          {
            "description": "Destroys the current theme service. This should only be called from a host component that provides its own theme to child components.",
            "kind": "class-property",
            "name": "destroy",
            "type": "void"
          },
          {
            "description": "Initializes the theme service with the specified parameters. This should only be called from a host component that provides its own theme to child components.",
            "kind": "class-property",
            "name": "init",
            "type": "void"
          },
          {
            "description": "Updates the current theme settings.",
            "kind": "class-property",
            "name": "setTheme",
            "type": "void"
          }
        ],
        "description": "Provides methods for updating and handling changes to the current theme.",
        "filePath": "lib/theming/theme.service.ts",
        "kind": "service",
        "name": "SkyThemeService"
      },
      {
        "anchorId": "class_sky-theme",
        "children": [
          {
            "description": "Creates a new theme.",
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTheme"
          },
          {
            "description": "The class on the host element which child components should reference when adjusting for a specified theme.",
            "kind": "class-property",
            "name": "hostClass",
            "type": "string"
          },
          {
            "description": "The name of the theme.",
            "kind": "class-property",
            "name": "name",
            "type": "string"
          },
          {
            "description": "An array of modes supported by the theme.",
            "kind": "class-property",
            "name": "supportedModes",
            "type": "SkyThemeMode[]"
          },
          {
            "description": "An array of spacing modes supported by the theme.",
            "kind": "class-property",
            "name": "supportedSpacing",
            "type": "SkyThemeSpacing[]"
          },
          {
            "description": "The preset themes available in SKY UX.",
            "isStatic": true,
            "kind": "class-property",
            "name": "presets",
            "type": "Object"
          }
        ],
        "description": "Defines properties of a SKY UX theme.",
        "filePath": "lib/theming/theme.ts",
        "kind": "class",
        "name": "SkyTheme"
      },
      {
        "anchorId": "interface_sky-app-viewport-reserve-args",
        "children": [
          {
            "description": "A unique ID for the component reserving space.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The position in the viewport where the space will be reserved.",
            "kind": "interface-property",
            "name": "position",
            "type": "SkyAppViewportReservedPositionType"
          },
          {
            "description": "The number of pixels to reserve.",
            "kind": "interface-property",
            "name": "size",
            "type": "number"
          }
        ],
        "filePath": "lib/viewport/viewport-reserve-args.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyAppViewportReserveArgs"
      },
      {
        "anchorId": "type-alias_sky-app-viewport-reserved-position-type",
        "filePath": "lib/viewport/viewport-reserve-position-type.ts",
        "isInternal": true,
        "kind": "type-alias",
        "name": "SkyAppViewportReservedPositionType",
        "type": "\"left\" | \"top\" | \"right\" | \"bottom\""
      },
      {
        "anchorId": "class_sky-app-viewport-service",
        "children": [
          {
            "description": "Reserves space for components docked to the left, top, right, or bottom of the viewport.",
            "kind": "class-method",
            "name": "reserveSpace",
            "parameters": [
              { "name": "args", "type": "SkyAppViewportReserveArgs" }
            ],
            "type": "void"
          },
          {
            "description": "Removes reserved space for a component by the ID provided when it was reserved.",
            "kind": "class-method",
            "name": "unreserveSpace",
            "parameters": [{ "name": "id", "type": "string" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppViewportService"
          },
          {
            "description": "Updated when the viewport becomes visible.  While the page is rendered, the viewport may remain hidden as fonts and styles are loaded asynchronously; this is done to avoid a FOUC (Flash Of Unstyled Content) before the fonts and styles are ready.",
            "kind": "class-property",
            "name": "visible",
            "type": "ReplaySubject<boolean>"
          },
          {
            "description": "Reserves space for components docked to the left, top, right, or bottom of the viewport.",
            "kind": "class-property",
            "name": "reserveSpace",
            "type": "void"
          },
          {
            "description": "Removes reserved space for a component by the ID provided when it was reserved.",
            "kind": "class-property",
            "name": "unreserveSpace",
            "type": "void"
          }
        ],
        "description": "Provides information about the state of the application's viewport.",
        "filePath": "lib/viewport/viewport.service.ts",
        "kind": "service",
        "name": "SkyAppViewportService"
      }
    ],
    "@skyux/tiles": [
      {
        "anchorId": "class_sky-tile-content-section-component",
        "description": "Specifies content to display inside a padded section of a SkyTileContentComponent.",
        "filePath": "lib/modules/tiles/tile-content/tile-content-section.component.ts",
        "kind": "component",
        "name": "SkyTileContentSectionComponent",
        "selector": "sky-tile-content-section"
      },
      {
        "anchorId": "class_sky-tile-content-component",
        "description": "Specifies content to display in the tile's body.",
        "filePath": "lib/modules/tiles/tile-content/tile-content.component.ts",
        "kind": "component",
        "name": "SkyTileContentComponent",
        "selector": "sky-tile-content"
      },
      {
        "anchorId": "class_sky-tile-content-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTileContentModule"
          }
        ],
        "filePath": "lib/modules/tiles/tile-content/tile-content.module.ts",
        "kind": "module",
        "name": "SkyTileContentModule"
      },
      {
        "anchorId": "class_sky-tile-dashboard-column-component",
        "filePath": "lib/modules/tiles/tile-dashboard-column/tile-dashboard-column.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyTileDashboardColumnComponent",
        "selector": "sky-tile-dashboard-column"
      },
      {
        "anchorId": "class_sky-tile-dashboard-column-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTileDashboardColumnModule"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard-column/tile-dashboard-column.module.ts",
        "kind": "module",
        "name": "SkyTileDashboardColumnModule"
      },
      {
        "anchorId": "interface_sky-tile-dashboard-config-layout-column",
        "children": [
          {
            "description": "An array of `SkyTileDashboardConfigTile` objects that specifies the tiles to include in the dashboard.",
            "kind": "interface-property",
            "name": "tiles",
            "type": "SkyTileDashboardConfigLayoutTile[]"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard-config/tile-dashboard-config-layout-column.ts",
        "kind": "interface",
        "name": "SkyTileDashboardConfigLayoutColumn"
      },
      {
        "anchorId": "interface_sky-tile-dashboard-config-layout-tile",
        "children": [
          {
            "description": "The ID of a tile to display in the dashboard.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "Whether the tile is in a collapsed state.",
            "kind": "interface-property",
            "name": "isCollapsed",
            "type": "boolean"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard-config/tile-dashboard-config-layout-tile.ts",
        "kind": "interface",
        "name": "SkyTileDashboardConfigLayoutTile"
      },
      {
        "anchorId": "interface_sky-tile-dashboard-config-layout",
        "children": [
          {
            "description": "An array of `SkyTileDashboardConfigLayoutColumn` objects that describes how to display tiles in multiple columns on larger screens.",
            "kind": "interface-property",
            "name": "multiColumn",
            "type": "SkyTileDashboardConfigLayoutColumn[]"
          },
          {
            "description": "A `SkyTileDashboardConfigLayoutColumn` object that describes how to display tiles in a single column on small screens.",
            "kind": "interface-property",
            "name": "singleColumn",
            "type": "SkyTileDashboardConfigLayoutColumn"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard-config/tile-dashboard-config-layout.ts",
        "kind": "interface",
        "name": "SkyTileDashboardConfigLayout"
      },
      {
        "anchorId": "interface_sky-tile-dashboard-config-reorder-data",
        "children": [
          {
            "description": "The column for the tile.",
            "kind": "interface-property",
            "name": "column",
            "type": "number"
          },
          {
            "description": "The position of the tile within the column.",
            "kind": "interface-property",
            "name": "position",
            "type": "number"
          },
          {
            "description": "The description of the tile.",
            "kind": "interface-property",
            "name": "tileDescription",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard-config/tile-dashboard-config-reorder-data.ts",
        "kind": "interface",
        "name": "SkyTileDashboardConfigReorderData"
      },
      {
        "anchorId": "interface_sky-tile-dashboard-config-tile",
        "children": [
          {
            "description": "The class type of the tile component.",
            "kind": "interface-property",
            "name": "componentType",
            "type": "any"
          },
          {
            "description": "The ID of the tile.",
            "kind": "interface-property",
            "name": "id",
            "type": "string"
          },
          {
            "description": "The array of data providers that can be passed to the tile.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "providers",
            "type": "any[]"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard-config/tile-dashboard-config-tile.ts",
        "kind": "interface",
        "name": "SkyTileDashboardConfigTile"
      },
      {
        "anchorId": "interface_sky-tile-dashboard-config",
        "children": [
          {
            "description": "A `SkyTileDashboardConfigLayout` object that describes the tile dashboard's layout.",
            "kind": "interface-property",
            "name": "layout",
            "type": "SkyTileDashboardConfigLayout"
          },
          {
            "description": "A `SkyTileDashboardConfigReorderData` object that describes how to move a tile within the dashboard.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "movedTile",
            "type": "SkyTileDashboardConfigReorderData"
          },
          {
            "description": "An array of SkyTileDashboardConfigTile objects that specifies the tiles to include in the dashboard.",
            "kind": "interface-property",
            "name": "tiles",
            "type": "SkyTileDashboardConfigTile[]"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard-config/tile-dashboard-config.ts",
        "kind": "interface",
        "name": "SkyTileDashboardConfig"
      },
      {
        "anchorId": "enum_sky-tile-dashboard-message-type",
        "description": "The type of message to send to the tile dashboard component.",
        "filePath": "lib/modules/tiles/tile-dashboard/tile-dashboard-message-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Collapses all tiles within the tile dashboard.",
            "kind": "enum-member",
            "name": "CollapseAll",
            "type": "1"
          },
          {
            "description": "Expands all tiles within the tile dashboard.",
            "kind": "enum-member",
            "name": "ExpandAll",
            "type": "0"
          }
        ],
        "name": "SkyTileDashboardMessageType"
      },
      {
        "anchorId": "interface_sky-tile-dashboard-message",
        "children": [
          {
            "description": "The type of message to send.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "SkyTileDashboardMessageType"
          }
        ],
        "description": "Specifies the messages to be sent to the tile dashboard component.",
        "filePath": "lib/modules/tiles/tile-dashboard/tile-dashboard-message.ts",
        "kind": "interface",
        "name": "SkyTileDashboardMessage"
      },
      {
        "anchorId": "class_sky-tile-dashboard-component",
        "children": [
          {
            "description": "The observable to send commands to the tile dashboard. The commands must respect the `SkyTileDashboardMessage` type.",
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkyTileDashboardMessage>"
          },
          {
            "description": "The unique key for the UI Config Service to retrieve stored settings from a database. The UI Config Service saves configuration settings for users to preserve the layout and collapsed state of tile dashboards. The UI Config Service relies on `id` values from the `config` property to maintain user settings. For more information about the UI Config Service, see the [sticky settings documentation](https://developer.blackbaud.com/skyux/learn/develop/sticky-settings).",
            "kind": "directive-input",
            "name": "settingsKey",
            "type": "undefined | string"
          },
          {
            "description": "Populates the tile dashboard based on the `SkyTileDashboardConfig` object.",
            "kind": "directive-input",
            "name": "config",
            "type": "undefined | SkyTileDashboardConfig",
            "isRequired": true
          },
          {
            "description": "Fires when the tile dashboard changes state and emits a SkyTileDashboardConfig object. This occurs when tiles collapse or expand and when users drag and drop tiles to rearrange them.",
            "kind": "directive-output",
            "name": "configChange",
            "type": "EventEmitter<SkyTileDashboardConfig>"
          }
        ],
        "description": "Specifies a container to group multiple tiles.",
        "filePath": "lib/modules/tiles/tile-dashboard/tile-dashboard.component.ts",
        "kind": "component",
        "name": "SkyTileDashboardComponent",
        "selector": "sky-tile-dashboard"
      },
      {
        "anchorId": "class_sky-tile-dashboard-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTileDashboardModule"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard/tile-dashboard.module.ts",
        "kind": "module",
        "name": "SkyTileDashboardModule"
      },
      {
        "anchorId": "class_sky-tile-dashboard-service",
        "children": [
          {
            "description": "Adds a new tile to the tile dashboard.",
            "kind": "class-method",
            "name": "addTileComponent",
            "parameters": [
              {
                "description": "Specifies the tile configuration.",
                "name": "tile",
                "type": "SkyTileDashboardConfigLayoutTile"
              },
              {
                "description": "Specifies the tile component to add.",
                "name": "component",
                "type": "ComponentRef<any>"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "changeColumnMode",
            "parameters": [
              { "name": "mode", "type": "SkyTileDashboardColumnMode" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "getTileComponent",
            "parameters": [{ "name": "tileId", "type": "string" }],
            "type": "undefined | ComponentRef<any>"
          },
          {
            "kind": "class-method",
            "name": "getTileComponentType",
            "parameters": [
              {
                "name": "layoutTile",
                "type": "undefined | SkyTileDashboardConfigLayoutTile"
              }
            ],
            "type": "any"
          },
          {
            "kind": "class-method",
            "name": "init",
            "parameters": [
              { "name": "config", "type": "SkyTileDashboardConfig" },
              {
                "isOptional": true,
                "name": "columns",
                "type": "QueryList<λ6>"
              },
              { "isOptional": true, "name": "singleColumn", "type": "λ6" },
              { "isOptional": true, "name": "settingsKey", "type": "string" }
            ],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "moveTileOnKeyDown",
            "parameters": [
              { "name": "tileCmp", "type": "λ1" },
              { "name": "direction", "type": "string" },
              { "name": "tileDescription", "type": "string" }
            ],
            "type": "void"
          },
          {
            "description": "Sets the collapsed state of all tiles.",
            "kind": "class-method",
            "name": "setAllTilesCollapsed",
            "parameters": [
              {
                "description": "Indicates whether tiles are collapsed.",
                "name": "isCollapsed",
                "type": "boolean"
              }
            ],
            "type": "void"
          },
          {
            "description": "Sets the collapsed state of a specified tile.",
            "kind": "class-method",
            "name": "setTileCollapsed",
            "parameters": [
              {
                "description": "Specifies the tile component.",
                "name": "tile",
                "type": "undefined | λ1"
              },
              {
                "description": "Indicates whether the tile is collapsed.",
                "name": "isCollapsed",
                "type": "boolean"
              }
            ],
            "type": "void"
          },
          {
            "description": "Checks whether a specified tile is collapsed.",
            "kind": "class-method",
            "name": "tileIsCollapsed",
            "parameters": [
              {
                "description": "Specifies the tile component to check.",
                "name": "tile",
                "type": "λ1"
              }
            ],
            "type": "boolean"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTileDashboardService"
          },
          { "kind": "class-property", "name": "bagId", "type": "string" },
          {
            "kind": "class-property",
            "name": "configChange",
            "type": "EventEmitter<SkyTileDashboardConfig>"
          },
          {
            "description": "Fires when the tile dashboard's initialization is complete.",
            "kind": "class-property",
            "name": "dashboardInitialized",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Adds a new tile to the tile dashboard.",
            "kind": "class-property",
            "name": "addTileComponent",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "changeColumnMode",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "getTileComponent",
            "type": "undefined | ComponentRef<any>"
          },
          {
            "kind": "class-property",
            "name": "getTileComponentType",
            "type": "any"
          },
          { "kind": "class-property", "name": "init", "type": "void" },
          {
            "kind": "class-property",
            "name": "moveTileOnKeyDown",
            "type": "void"
          },
          {
            "description": "Sets the collapsed state of all tiles.",
            "kind": "class-property",
            "name": "setAllTilesCollapsed",
            "type": "void"
          },
          {
            "description": "Sets the collapsed state of a specified tile.",
            "kind": "class-property",
            "name": "setTileCollapsed",
            "type": "void"
          },
          {
            "description": "Checks whether a specified tile is collapsed.",
            "kind": "class-property",
            "name": "tileIsCollapsed",
            "type": "boolean"
          }
        ],
        "filePath": "lib/modules/tiles/tile-dashboard/tile-dashboard.service.ts",
        "kind": "service",
        "name": "SkyTileDashboardService"
      },
      {
        "anchorId": "class_sky-tile-summary-component",
        "description": "Specifies content to display in the tile's summary.",
        "filePath": "lib/modules/tiles/tile/tile-summary.component.ts",
        "kind": "component",
        "name": "SkyTileSummaryComponent",
        "selector": "sky-tile-summary"
      },
      {
        "anchorId": "class_sky-tile-title-component",
        "description": "Specifies content to display in the tile's title.",
        "filePath": "lib/modules/tiles/tile/tile-title.component.ts",
        "kind": "component",
        "name": "SkyTileTitleComponent",
        "selector": "sky-tile-title"
      },
      {
        "anchorId": "class_sky-tile-component",
        "children": [
          {
            "description": "A help key that identifies the global help content to display. When specified along with `tileName`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the tile header. Clicking the button invokes global help as configured by the application. This property only applies when `tileName` is also specified.",
            "kind": "directive-input",
            "name": "helpKey",
            "type": "undefined | string"
          },
          {
            "description": "The content of the help popover. When specified along with `tileName`, a [help inline](https://developer.blackbaud.com/skyux/components/help-inline) button is added to the tile header. The help inline button displays a [popover](https://developer.blackbaud.com/skyux/components/popover) when clicked using the specified content and optional title. This property only applies when `tileName` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverContent",
            "type": "undefined | string | TemplateRef<unknown>"
          },
          {
            "description": "The title of the help popover. This property only applies when `helpPopoverContent` is also specified.",
            "kind": "directive-input",
            "name": "helpPopoverTitle",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Set the `helpKey` or `helpPopoverContent` inputs instead.",
            "description": "Whether to display a help button in the tile header. To display the button, you must also listen for the `helpClick` event.",
            "defaultValue": "true",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "showHelp",
            "type": "boolean"
          },
          {
            "description": "Whether to display a settings button in the tile header. To display the button, you must also listen for the `settingsClick` event.",
            "defaultValue": "true",
            "kind": "directive-input",
            "name": "showSettings",
            "type": "boolean"
          },
          {
            "description": "The human-readable name for the tile that is available to the tile controls for multiple purposes, such as accessibility and instrumentation. The component uses the name to construct ARIA labels for the help, expand/collapse, settings, and drag handle buttons to [support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). For example, if the tile name is \"Constituents,\" the help input's `aria-label` is \"Constituents help\" and the drag handle's `aria-label` is \"Move Constituents.\" For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "tileName",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Set the `helpKey` or `helpPopoverContent` inputs instead.",
            "description": "Fires when users select the help button in the tile header. The help button only appears when the `showHelp` property is set to `true`.",
            "isDeprecated": true,
            "kind": "directive-output",
            "name": "helpClick",
            "type": "EventEmitter<any>"
          },
          {
            "description": "Fires when the tile's collapsed state changes. Returns `true` when the tile collapses and `false` when it expands.",
            "kind": "directive-output",
            "name": "isCollapsedChange",
            "type": "EventEmitter<boolean>"
          },
          {
            "description": "Fires when users select the settings button in the tile header. The settings button only appears when the `showSettings` property is set to `true`.",
            "kind": "directive-output",
            "name": "settingsClick",
            "type": "EventEmitter<any>"
          }
        ],
        "description": "Provides a common look-and-feel for tab content.",
        "filePath": "lib/modules/tiles/tile/tile.component.ts",
        "kind": "component",
        "name": "SkyTileComponent",
        "selector": "sky-tile"
      },
      {
        "anchorId": "class_sky-tile-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTileModule"
          }
        ],
        "filePath": "lib/modules/tiles/tile/tile.module.ts",
        "kind": "module",
        "name": "SkyTileModule"
      },
      {
        "anchorId": "class_sky-tiles-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTilesModule"
          }
        ],
        "filePath": "lib/modules/tiles/tiles.module.ts",
        "kind": "module",
        "name": "SkyTilesModule"
      }
    ],
    "@skyux/toast": [
      {
        "anchorId": "class_sky-toast-instance",
        "children": [
          {
            "description": "Closes the toast component.",
            "kind": "class-method",
            "name": "close",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToastInstance"
          },
          {
            "description": "An observable that indicates when the toast is closed.",
            "kind": "class-property",
            "name": "closed",
            "type": "Observable<void>"
          },
          {
            "description": "Closes the toast component.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          }
        ],
        "filePath": "src/lib/modules/toast/toast-instance.ts",
        "kind": "class",
        "name": "SkyToastInstance"
      },
      {
        "anchorId": "class_sky-toast-component",
        "children": [
          {
            "description": "Whether to automatically close the toast. Only close toasts automatically if users can access the messages after the toasts close.",
            "kind": "directive-input",
            "name": "autoClose",
            "type": "undefined | boolean"
          },
          {
            "description": "The `SkyToastType` type for the toast to determine the color and icon to display.",
            "kind": "directive-input",
            "name": "toastType",
            "type": "void"
          },
          {
            "description": "Fires when the toast closes.",
            "kind": "directive-output",
            "name": "closed",
            "type": "EventEmitter<void>"
          }
        ],
        "filePath": "src/lib/modules/toast/toast.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyToastComponent",
        "selector": "sky-toast"
      },
      {
        "anchorId": "class_sky-toast-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToastModule"
          }
        ],
        "filePath": "src/lib/modules/toast/toast.module.ts",
        "kind": "module",
        "name": "SkyToastModule"
      },
      {
        "anchorId": "class_sky-toast-legacy-service",
        "children": [
          {
            "description": "Closes all active toast components.",
            "kind": "class-method",
            "name": "closeAll",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Opens a new toast using a custom component.",
            "kind": "class-method",
            "name": "openComponent",
            "parameters": [
              {
                "description": "Specifies an Angular component to inject into the toast body,",
                "name": "component",
                "type": "Type<unknown>"
              },
              {
                "description": "Specifies additional configuration options for the toast.",
                "isOptional": true,
                "name": "config",
                "type": "SkyToastConfig"
              },
              {
                "defaultValue": "[]",
                "description": "Specifies an array of custom providers to pass to the custom component's constructor.",
                "name": "providers",
                "type": "Provider[]"
              }
            ],
            "type": "SkyToastInstance"
          },
          {
            "description": "Opens a new toast and displays the specified message.",
            "kind": "class-method",
            "name": "openMessage",
            "parameters": [
              {
                "description": "Specifies the text to display in the toast.",
                "name": "message",
                "type": "string"
              },
              {
                "description": "Specifies additional configuration options for the toast.",
                "isOptional": true,
                "name": "config",
                "type": "SkyToastConfig"
              }
            ],
            "type": "SkyToastInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToastLegacyService"
          },
          {
            "kind": "class-property",
            "name": "toastStream",
            "type": "Observable<SkyToast[]>"
          },
          {
            "description": "Closes all active toast components.",
            "kind": "class-property",
            "name": "closeAll",
            "type": "void"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Opens a new toast using a custom component.",
            "kind": "class-property",
            "name": "openComponent",
            "type": "SkyToastInstance"
          },
          {
            "description": "Opens a new toast and displays the specified message.",
            "kind": "class-property",
            "name": "openMessage",
            "type": "SkyToastInstance"
          }
        ],
        "deprecationReason": "Use `SkyToastService` to open a standalone component instead.",
        "filePath": "src/lib/modules/toast/toast.service.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "SkyToastLegacyService"
      },
      {
        "anchorId": "class_sky-toast-service",
        "children": [
          {
            "description": "Closes all active toast components.",
            "kind": "class-method",
            "name": "closeAll",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Opens a new toast using a custom component.",
            "kind": "class-method",
            "name": "openComponent",
            "parameters": [
              {
                "description": "Specifies an Angular component to inject into the toast body,",
                "name": "component",
                "type": "Type<unknown>"
              },
              {
                "description": "Specifies additional configuration options for the toast.",
                "isOptional": true,
                "name": "config",
                "type": "SkyToastConfig"
              },
              {
                "defaultValue": "[]",
                "description": "Specifies an array of custom providers to pass to the custom component's constructor.",
                "name": "providers",
                "type": "Provider[]"
              }
            ],
            "type": "SkyToastInstance"
          },
          {
            "description": "Opens a new toast and displays the specified message.",
            "kind": "class-method",
            "name": "openMessage",
            "parameters": [
              {
                "description": "Specifies the text to display in the toast.",
                "name": "message",
                "type": "string"
              },
              {
                "description": "Specifies additional configuration options for the toast.",
                "isOptional": true,
                "name": "config",
                "type": "SkyToastConfig"
              }
            ],
            "type": "SkyToastInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToastService"
          },
          {
            "kind": "class-property",
            "name": "toastStream",
            "type": "Observable<SkyToast[]>"
          },
          {
            "description": "Closes all active toast components.",
            "kind": "class-property",
            "name": "closeAll",
            "type": "void"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Opens a new toast using a custom component.",
            "kind": "class-property",
            "name": "openComponent",
            "type": "SkyToastInstance"
          },
          {
            "description": "Opens a new toast and displays the specified message.",
            "kind": "class-property",
            "name": "openMessage",
            "type": "SkyToastInstance"
          }
        ],
        "filePath": "src/lib/modules/toast/toast.service.ts",
        "kind": "service",
        "name": "SkyToastService"
      },
      {
        "anchorId": "interface_sky-toast-config",
        "children": [
          {
            "description": "Whether to automatically close the toast. Only close toasts automatically if users can access the messages after the toasts close.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "autoClose",
            "type": "boolean"
          },
          {
            "description": "The `SkyToastType` type that determines the color and icon for the toast. This property defaults to `SkyToastType.Info`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "type",
            "type": "SkyToastType"
          }
        ],
        "description": "Specifies the configuration options to set up a toast.",
        "filePath": "src/lib/modules/toast/types/toast-config.ts",
        "kind": "interface",
        "name": "SkyToastConfig"
      },
      {
        "anchorId": "class_sky-toast-container-options",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToastContainerOptions"
          },
          {
            "description": "Order in which toasts should appear in the page's toast container.",
            "kind": "class-property",
            "name": "displayDirection",
            "type": "undefined | SkyToastDisplayDirection"
          }
        ],
        "description": "Global configuration options for displaying toast components.",
        "filePath": "src/lib/modules/toast/types/toast-container-options.ts",
        "kind": "class",
        "name": "SkyToastContainerOptions"
      },
      {
        "anchorId": "enum_sky-toast-display-direction",
        "filePath": "src/lib/modules/toast/types/toast-display-direction.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Displays new toasts on top of previous toasts.",
            "kind": "enum-member",
            "name": "NewestOnTop",
            "type": "1"
          },
          {
            "description": "Displays new toasts below previous toasts.",
            "kind": "enum-member",
            "name": "OldestOnTop",
            "type": "0"
          }
        ],
        "name": "SkyToastDisplayDirection"
      },
      {
        "anchorId": "enum_sky-toast-type",
        "filePath": "src/lib/modules/toast/types/toast-type.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Sets the toast's icon and background color to the `danger` style.",
            "kind": "enum-member",
            "name": "Danger",
            "type": "0"
          },
          {
            "description": "Sets the toast's icon and background color to the `info` style.",
            "kind": "enum-member",
            "name": "Info",
            "type": "1"
          },
          {
            "description": "Sets the toast's icon and background color to the `success` style.",
            "kind": "enum-member",
            "name": "Success",
            "type": "2"
          },
          {
            "description": "Sets the toast's icon and background color to the `warning` style.",
            "kind": "enum-member",
            "name": "Warning",
            "type": "3"
          }
        ],
        "name": "SkyToastType"
      }
    ],
    "@skyux/toast/testing": [
      {
        "anchorId": "class_sky-toast-fixture",
        "children": [
          {
            "description": "Clicks the toast's close button.",
            "kind": "class-method",
            "name": "clickCloseButton",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyToastFixture"
          },
          {
            "description": "The toast's current text.",
            "kind": "class-property",
            "name": "text",
            "type": "undefined | string"
          },
          {
            "description": "The toast's current type.",
            "kind": "class-property",
            "name": "toastType",
            "type": "string"
          },
          {
            "description": "Clicks the toast's close button.",
            "kind": "class-property",
            "name": "clickCloseButton",
            "type": "void"
          }
        ],
        "description": "Allows interaction with a SKY UX toast component.",
        "filePath": "testing/src/legacy/toast-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyToastFixture"
      }
    ],
    "@skyux/a11y": [
      {
        "anchorId": "interface_sky-skip-link-args",
        "children": [
          {
            "description": "The skip links to create.",
            "kind": "interface-property",
            "name": "links",
            "type": "SkySkipLink[]"
          }
        ],
        "description": "Options specified when setting the page's skip links.",
        "filePath": "libs/components/a11y/src/lib/modules/skip-link/skip-link-args.ts",
        "kind": "interface",
        "name": "SkySkipLinkArgs"
      },
      {
        "anchorId": "class_sky-skip-link-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySkipLinkModule"
          }
        ],
        "deprecationReason": "The `SkySkipLinkModule` is no longer needed and can be removed from your application.",
        "description": "The Angular module that enables \"skip links\" to be added to the page.",
        "filePath": "libs/components/a11y/src/lib/modules/skip-link/skip-link.module.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "module",
        "name": "SkySkipLinkModule"
      },
      {
        "anchorId": "class_sky-skip-link-service",
        "children": [
          {
            "kind": "class-method",
            "name": "removeHostComponent",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "setSkipLinks",
            "parameters": [{ "name": "args", "type": "SkySkipLinkArgs" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySkipLinkService"
          },
          {
            "kind": "class-property",
            "name": "removeHostComponent",
            "type": "void"
          },
          { "kind": "class-property", "name": "setSkipLinks", "type": "void" }
        ],
        "description": "An Angular service that adds \"skip links\" to the page.  Skip links will only be displayed when the page initially loads and the user presses the Tab key, in which case the first link will be displayed and focused.  Clicking the button will skip to the specified element.  Pressing the Tab key again will move to the next skip link if more than one skip link is specified; otherwise, focus will move to the first focusable element on the page.",
        "filePath": "libs/components/a11y/src/lib/modules/skip-link/skip-link.service.ts",
        "kind": "service",
        "name": "SkySkipLinkService"
      },
      {
        "anchorId": "interface_sky-skip-link",
        "children": [
          {
            "description": "The element to scroll to and focus when the skip link is clicked.  This element must allow focus, either by specifying an HTML element that allows focus by default (such as a `button` or `a` element) or by setting `tabindex=\"-1\" on the specified element.",
            "kind": "interface-property",
            "name": "elementRef",
            "type": "ElementRef<any>"
          },
          {
            "description": "The title of the skip link.",
            "kind": "interface-property",
            "name": "title",
            "type": "string"
          }
        ],
        "description": "A \"skip link\" that allows a user to skip parts of the page and go directly to the main content.",
        "filePath": "libs/components/a11y/src/lib/modules/skip-link/skip-link.ts",
        "kind": "interface",
        "name": "SkySkipLink"
      }
    ],
    "@skyux/a11y/testing": [
      {
        "anchorId": "class_sky-skip-links-harness",
        "children": [
          {
            "description": "Clicks the skip link at the given index.",
            "kind": "class-method",
            "name": "clickSkipLink",
            "parameters": [{ "name": "index", "type": "number" }],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the text of the skip link at the given index.",
            "kind": "class-method",
            "name": "getSkipLinkText",
            "parameters": [{ "name": "index", "type": "number" }],
            "type": "Promise<string>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySkipLinksHarness"
          },
          {
            "defaultValue": "'sky-skip-link-host'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Clicks the skip link at the given index.",
            "kind": "class-property",
            "name": "clickSkipLink",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the text of the skip link at the given index.",
            "kind": "class-property",
            "name": "getSkipLinkText",
            "type": "Promise<string>"
          }
        ],
        "description": "Harness for interacting with a skip link component in tests.",
        "filePath": "libs/components/a11y/testing/src/modules/skip-link/skip-links-harness.ts",
        "kind": "class",
        "name": "SkySkipLinksHarness"
      }
    ],
    "@skyux/core": [
      {
        "anchorId": "class_sky-core-adapter-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCoreAdapterModule"
          }
        ],
        "deprecationReason": "The `SkyCoreAdapterService` no longer needs the `SkyCoreAdapterModule`.\nThe `SkyCoreAdapterModule` can be removed from your project.",
        "filePath": "libs/components/core/src/lib/modules/adapter-service/adapter.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyCoreAdapterModule"
      },
      {
        "anchorId": "class_sky-core-adapter-service",
        "children": [
          {
            "description": "Focuses on the first element found with an `autofocus` attribute inside the supplied `elementRef`.",
            "kind": "class-method",
            "name": "applyAutoFocus",
            "parameters": [
              {
                "description": "The element to search within.",
                "isOptional": true,
                "name": "elementRef",
                "type": "ElementRef<any>"
              }
            ],
            "type": "boolean"
          },
          {
            "description": "Returns an array of all focusable children of provided `element`.",
            "kind": "class-method",
            "name": "getFocusableChildren",
            "parameters": [
              {
                "description": "The HTMLElement to search within.",
                "isOptional": true,
                "name": "element",
                "type": "HTMLElement"
              },
              {
                "description": "Options for getting focusable children.",
                "isOptional": true,
                "name": "options",
                "type": "SkyFocusableChildrenOptions"
              }
            ],
            "type": "HTMLElement[]"
          },
          {
            "description": "Sets focus on the first focusable child of the `elementRef` parameter. If no focusable children are found, and `focusOnContainerIfNoChildrenFound` is `true`, focus will be set on the container element.",
            "kind": "class-method",
            "name": "getFocusableChildrenAndApplyFocus",
            "parameters": [
              {
                "description": "The element to search within.",
                "name": "elementRef",
                "type": "ElementRef<any>"
              },
              {
                "description": "A CSS selector indicating the container that should receive focus if no focusable children are found.",
                "isOptional": true,
                "name": "containerSelector",
                "type": "string"
              },
              {
                "defaultValue": "false",
                "description": "It set to `true`, the container will receive focus if no focusable children are found.",
                "name": "focusOnContainerIfNoChildrenFound",
                "type": "boolean"
              }
            ],
            "type": "void"
          },
          {
            "description": "Returns the clientWidth of the provided elementRef.",
            "kind": "class-method",
            "name": "getWidth",
            "parameters": [
              {
                "description": "The element to calculate width from.",
                "name": "elementRef",
                "type": "ElementRef<any>"
              }
            ],
            "type": "number"
          },
          {
            "description": "Checks if an event target has a higher z-index than a given element.",
            "kind": "class-method",
            "name": "isTargetAboveElement",
            "parameters": [
              {
                "description": "The event target element.",
                "name": "target",
                "type": "EventTarget"
              },
              {
                "description": "The element to test against. A z-index must be explicitly set for this element.",
                "name": "element",
                "type": "HTMLElement"
              }
            ],
            "type": "boolean"
          },
          {
            "description": "Remove inline height styles from the provided elements.",
            "kind": "class-method",
            "name": "resetHeight",
            "parameters": [
              {
                "description": "The element to search within.",
                "name": "elementRef",
                "type": "ElementRef<any>"
              },
              {
                "description": "The CSS selector to use when finding elements for removing height.",
                "name": "selector",
                "type": "string"
              }
            ],
            "type": "void"
          },
          {
            "deprecationReason": "Use the `SkyResponsiveHostDirective` instead.",
            "description": "Set the responsive container CSS class for a given element.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "setResponsiveContainerClass",
            "parameters": [
              {
                "description": "The element that will receive the new CSS class.",
                "name": "elementRef",
                "type": "ElementRef<any>"
              },
              {
                "description": "The breakpoint to determine which class gets set. For example a breakpoint of \"xs\" will set a CSS class of \"sky-responsive-container-xs\".",
                "name": "breakpoint",
                "type": "\"xs\" | \"sm\" | \"md\" | \"lg\" | SkyMediaBreakpoints"
              }
            ],
            "type": "void"
          },
          {
            "description": "Sets all element heights to match the height of the tallest element.",
            "kind": "class-method",
            "name": "syncMaxHeight",
            "parameters": [
              {
                "description": "The element to search within.",
                "name": "elementRef",
                "type": "ElementRef<any>"
              },
              {
                "description": "The CSS selector to use when finding elements for syncing height.",
                "name": "selector",
                "type": "string"
              }
            ],
            "type": "void"
          },
          {
            "description": "This method temporarily enables/disables pointer events. This is helpful to prevent iFrames from interfering with drag events.",
            "kind": "class-method",
            "name": "toggleIframePointerEvents",
            "parameters": [
              {
                "description": "Set to `true` to enable pointer events. Set to `false` to disable.",
                "name": "enable",
                "type": "boolean"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCoreAdapterService"
          },
          {
            "description": "Focuses on the first element found with an `autofocus` attribute inside the supplied `elementRef`.",
            "kind": "class-property",
            "name": "applyAutoFocus",
            "type": "boolean"
          },
          {
            "description": "Returns an array of all focusable children of provided `element`.",
            "kind": "class-property",
            "name": "getFocusableChildren",
            "type": "HTMLElement[]"
          },
          {
            "description": "Sets focus on the first focusable child of the `elementRef` parameter. If no focusable children are found, and `focusOnContainerIfNoChildrenFound` is `true`, focus will be set on the container element.",
            "kind": "class-property",
            "name": "getFocusableChildrenAndApplyFocus",
            "type": "void"
          },
          {
            "description": "Returns the clientWidth of the provided elementRef.",
            "kind": "class-property",
            "name": "getWidth",
            "type": "number"
          },
          {
            "description": "Checks if an event target has a higher z-index than a given element.",
            "kind": "class-property",
            "name": "isTargetAboveElement",
            "type": "boolean"
          },
          {
            "description": "Remove inline height styles from the provided elements.",
            "kind": "class-property",
            "name": "resetHeight",
            "type": "void"
          },
          {
            "deprecationReason": "Use the `SkyResponsiveHostDirective` instead.",
            "description": "Set the responsive container CSS class for a given element.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "setResponsiveContainerClass",
            "type": "void"
          },
          {
            "description": "Sets all element heights to match the height of the tallest element.",
            "kind": "class-property",
            "name": "syncMaxHeight",
            "type": "void"
          },
          {
            "description": "This method temporarily enables/disables pointer events. This is helpful to prevent iFrames from interfering with drag events.",
            "kind": "class-property",
            "name": "toggleIframePointerEvents",
            "type": "void"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/adapter-service/adapter.service.ts",
        "kind": "service",
        "name": "SkyCoreAdapterService"
      },
      {
        "anchorId": "interface_sky-focusable-children-options",
        "children": [
          {
            "description": "By default, the `getFocusableChildren()` function will filter out elements with a `tabIndex` of `-1`. Setting `ignoreTabIndex = true` will ignore this filter.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ignoreTabIndex",
            "type": "boolean"
          },
          {
            "description": "By default, the `getFocusableChildren()` function will only return visible elements. Setting `ignoreVisibility = true` will ignore this filter.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ignoreVisibility",
            "type": "boolean"
          }
        ],
        "description": "Options for getting focusable children.",
        "filePath": "libs/components/core/src/lib/modules/adapter-service/focusable-children-options.ts",
        "kind": "interface",
        "name": "SkyFocusableChildrenOptions"
      },
      {
        "anchorId": "enum_sky-affix-auto-fit-context",
        "filePath": "libs/components/core/src/lib/modules/affix/affix-auto-fit-context.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Auto-fit functionality will respect the nearest overflow parent element's dimensions.",
            "kind": "enum-member",
            "name": "OverflowParent",
            "type": "0"
          },
          {
            "description": "Auto-fit functionality will respect the browser viewport dimensions.",
            "kind": "enum-member",
            "name": "Viewport",
            "type": "1"
          }
        ],
        "name": "SkyAffixAutoFitContext"
      },
      {
        "anchorId": "interface_sky-affix-config",
        "children": [
          {
            "description": "Which parent element is used by the auto-fit functionality.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "autoFitContext",
            "type": "SkyAffixAutoFitContext"
          },
          {
            "description": "This optional offset is added to (or subtracted from) the [[SkyAffixAutoFitContext]] element's offset during an auto-fit placement calculation. This value is useful if you need to consider another `position: fixed` element on the page (such as a navbar) when the auto-fit functionality attempts to find the best possible placement. (In the case of a navbar, you would add a `top` value equal to the navbar's height in pixels.)",
            "isOptional": true,
            "kind": "interface-property",
            "name": "autoFitOverflowOffset",
            "type": "SkyAffixOffset"
          },
          {
            "description": "Whether the affix service tries to find the best placement for the affixed element if the element would be hidden otherwise. If this setting is disabled, the affix service forces the placement of the affixed element.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "enableAutoFit",
            "type": "boolean"
          },
          {
            "description": "The horizontal alignment of the affixed element to the base element.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "horizontalAlignment",
            "type": "SkyAffixHorizontalAlignment"
          },
          {
            "description": "Whether the affixed element remains affixed to the base element when the window is scrolled or resized.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "isSticky",
            "type": "boolean"
          },
          {
            "description": "The placement of the affixed element around the base element.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "placement",
            "type": "SkyAffixPlacement"
          },
          {
            "description": "The position of the element being affixed.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "position",
            "type": "SkyAffixPosition"
          },
          {
            "description": "The vertical alignment of the affixed element to the base element.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "verticalAlignment",
            "type": "SkyAffixVerticalAlignment"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/affix/affix-config.ts",
        "kind": "interface",
        "name": "SkyAffixConfig"
      },
      {
        "anchorId": "type-alias_sky-affix-horizontal-alignment",
        "description": "The horizontal alignment of the affixed element to the base element.",
        "filePath": "libs/components/core/src/lib/modules/affix/affix-horizontal-alignment.ts",
        "kind": "type-alias",
        "name": "SkyAffixHorizontalAlignment",
        "type": "\"left\" | \"center\" | \"right\""
      },
      {
        "anchorId": "interface_sky-affix-offset-change",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "offset",
            "type": "SkyAffixOffset"
          }
        ],
        "description": "The arguments supplied to the affix offset change event listener.",
        "filePath": "libs/components/core/src/lib/modules/affix/affix-offset-change.ts",
        "kind": "interface",
        "name": "SkyAffixOffsetChange"
      },
      {
        "anchorId": "interface_sky-affix-offset",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "bottom",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "left",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "right",
            "type": "number"
          },
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "top",
            "type": "number"
          }
        ],
        "description": "Offset values used by the affixer.",
        "filePath": "libs/components/core/src/lib/modules/affix/affix-offset.ts",
        "kind": "interface",
        "name": "SkyAffixOffset"
      },
      {
        "anchorId": "interface_sky-affix-placement-change",
        "children": [
          {
            "description": "The changed placement value.",
            "kind": "interface-property",
            "name": "placement",
            "type": "null | SkyAffixPlacement"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/affix/affix-placement-change.ts",
        "kind": "interface",
        "name": "SkyAffixPlacementChange"
      },
      {
        "anchorId": "type-alias_sky-affix-placement",
        "description": "The placement of the affixed element around the base element.",
        "filePath": "libs/components/core/src/lib/modules/affix/affix-placement.ts",
        "kind": "type-alias",
        "name": "SkyAffixPlacement",
        "type": "\"above\" | \"below\" | \"left\" | \"right\""
      },
      {
        "anchorId": "type-alias_sky-affix-position",
        "filePath": "libs/components/core/src/lib/modules/affix/affix-position.ts",
        "kind": "type-alias",
        "name": "SkyAffixPosition",
        "type": "\"absolute\" | \"fixed\""
      },
      {
        "anchorId": "type-alias_sky-affix-vertical-alignment",
        "description": "The vertical alignment of the affixed element to the base element.",
        "filePath": "libs/components/core/src/lib/modules/affix/affix-vertical-alignment.ts",
        "kind": "type-alias",
        "name": "SkyAffixVerticalAlignment",
        "type": "\"top\" | \"middle\" | \"bottom\""
      },
      {
        "anchorId": "class_sky-affix-directive",
        "children": [
          {
            "description": "Sets the `autoFitContext` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixAutoFitContext",
            "type": "undefined | SkyAffixAutoFitContext"
          },
          {
            "description": "Sets the `autoFitOverflowOffset` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixAutoFitOverflowOffset",
            "type": "undefined | SkyAffixOffset"
          },
          {
            "description": "Sets the `enableAutoFit` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixEnableAutoFit",
            "type": "undefined | boolean"
          },
          {
            "description": "Sets the `horizontalAlignment` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixHorizontalAlignment",
            "type": "undefined | SkyAffixHorizontalAlignment"
          },
          {
            "description": "Sets the `isSticky` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixIsSticky",
            "type": "undefined | boolean"
          },
          {
            "description": "Sets the `placement` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixPlacement",
            "type": "undefined | SkyAffixPlacement"
          },
          {
            "description": "Sets the `position` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixPosition",
            "type": "undefined | SkyAffixPosition"
          },
          {
            "description": "Sets the `verticalAlignment` property of [[SkyAffixConfig]].",
            "kind": "directive-input",
            "name": "affixVerticalAlignment",
            "type": "undefined | SkyAffixVerticalAlignment"
          },
          {
            "description": "The base element to affix the host element.",
            "kind": "directive-input",
            "name": "skyAffixTo",
            "type": "undefined | HTMLElement"
          },
          {
            "description": "Fires when the affixed element's offset changes.",
            "kind": "directive-output",
            "name": "affixOffsetChange",
            "type": "EventEmitter<SkyAffixOffsetChange>"
          },
          {
            "description": "Fires when the affixed element's overflow container is scrolled.",
            "kind": "directive-output",
            "name": "affixOverflowScroll",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when the placement value changes.",
            "kind": "directive-output",
            "name": "affixPlacementChange",
            "type": "EventEmitter<SkyAffixPlacementChange>"
          }
        ],
        "description": "Affixes the host element to a base element.",
        "filePath": "libs/components/core/src/lib/modules/affix/affix.directive.ts",
        "kind": "directive",
        "name": "SkyAffixDirective",
        "selector": "[skyAffixTo]"
      },
      {
        "anchorId": "class_sky-affix-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAffixModule"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/affix/affix.module.ts",
        "kind": "module",
        "name": "SkyAffixModule"
      },
      {
        "anchorId": "class_sky-affix-service",
        "children": [
          {
            "description": "Creates an instance of [[SkyAffixer]].",
            "kind": "class-method",
            "name": "createAffixer",
            "parameters": [
              {
                "description": "The element to be affixed.",
                "name": "affixed",
                "type": "ElementRef<any>"
              }
            ],
            "type": "SkyAffixer"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAffixService"
          },
          {
            "description": "Creates an instance of [[SkyAffixer]].",
            "kind": "class-property",
            "name": "createAffixer",
            "type": "SkyAffixer"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/affix/affix.service.ts",
        "kind": "service",
        "name": "SkyAffixService"
      },
      {
        "anchorId": "class_sky-affixer",
        "children": [
          {
            "description": "Affixes an element to a base element.",
            "kind": "class-method",
            "name": "affixTo",
            "parameters": [
              {
                "description": "The base element.",
                "name": "baseElement",
                "type": "HTMLElement"
              },
              {
                "description": "Configuration for the affix action.",
                "isOptional": true,
                "name": "config",
                "type": "SkyAffixConfig"
              }
            ],
            "type": "void"
          },
          {
            "description": "Destroys the affixer.",
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "getConfig",
            "parameters": [],
            "type": "SkyAffixConfig"
          },
          {
            "description": "Re-runs the affix calculation.",
            "kind": "class-method",
            "name": "reaffix",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAffixer"
          },
          {
            "description": "Fires when the affixed element's offset changes.",
            "kind": "class-property",
            "name": "offsetChange",
            "type": "Observable<SkyAffixOffsetChange>"
          },
          {
            "description": "Fires when the base element's nearest overflow parent is scrolling. This is useful if you need to perform an additional action during the scroll event but don't want to generate another event listener.",
            "kind": "class-property",
            "name": "overflowScroll",
            "type": "Observable<void>"
          },
          {
            "description": "Fires when the placement value changes. A `null` value indicates that a suitable placement could not be found.",
            "kind": "class-property",
            "name": "placementChange",
            "type": "Observable<SkyAffixPlacementChange>"
          },
          {
            "description": "Affixes an element to a base element.",
            "kind": "class-property",
            "name": "affixTo",
            "type": "void"
          },
          {
            "description": "Destroys the affixer.",
            "kind": "class-property",
            "name": "destroy",
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "getConfig",
            "type": "SkyAffixConfig"
          },
          {
            "description": "Re-runs the affix calculation.",
            "kind": "class-property",
            "name": "reaffix",
            "type": "void"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/affix/affixer.ts",
        "kind": "class",
        "name": "SkyAffixer"
      },
      {
        "anchorId": "variable_sky-breakpoint-observer",
        "description": "Used to override a breakpoint observer for specific execution contexts.",
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/breakpoint-observer.token.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "SKY_BREAKPOINT_OBSERVER",
        "type": "InjectionToken<SkyBreakpointObserver>"
      },
      {
        "anchorId": "interface_sky-breakpoint-observer",
        "children": [
          {
            "kind": "interface-property",
            "name": "breakpointChange",
            "type": "Observable<\"xs\" | \"sm\" | \"md\" | \"lg\">"
          },
          { "kind": "interface-property", "name": "destroy", "type": "void" }
        ],
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/breakpoint-observer.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyBreakpointObserver"
      },
      {
        "anchorId": "type-alias_sky-breakpoint",
        "description": "The name of a viewport or container breakpoint.",
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/breakpoint.ts",
        "kind": "type-alias",
        "name": "SkyBreakpoint",
        "type": "readonly [\"xs\", \"sm\", \"md\", \"lg\"]"
      },
      {
        "anchorId": "variable_sky-breakpoints",
        "description": "A list of all breakpoints.",
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/breakpoint.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "SKY_BREAKPOINTS",
        "type": "readonly [\"xs\", \"sm\", \"md\", \"lg\"]"
      },
      {
        "anchorId": "class_sky-container-breakpoint-observer",
        "children": [
          {
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyContainerBreakpointObserver"
          },
          {
            "kind": "class-property",
            "name": "breakpointChange",
            "type": "Observable<\"xs\" | \"sm\" | \"md\" | \"lg\">"
          },
          { "kind": "class-property", "name": "destroy", "type": "void" },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          }
        ],
        "description": "Emits when the width of the host container changes.",
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/container-breakpoint-observer.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyContainerBreakpointObserver"
      },
      {
        "anchorId": "class_sky-media-breakpoint-observer",
        "children": [
          {
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyMediaBreakpointObserver"
          },
          {
            "kind": "class-property",
            "name": "breakpointChange",
            "type": "Observable<\"xs\" | \"sm\" | \"md\" | \"lg\">"
          },
          { "kind": "class-property", "name": "destroy", "type": "void" },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          }
        ],
        "description": "Emits when the viewport width changes.",
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/media-breakpoint-observer.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyMediaBreakpointObserver"
      },
      {
        "anchorId": "function_provide-sky-breakpoint-observer",
        "description": "Overrides the default media breakpoint observer with the given observer.",
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/provide-breakpoint-observer.ts",
        "isInternal": true,
        "kind": "function",
        "name": "provideSkyBreakpointObserver",
        "parameters": [
          { "name": "observer", "type": "Type<SkyBreakpointObserver>" }
        ],
        "type": "Provider[]"
      },
      {
        "anchorId": "class_sky-responsive-host-directive",
        "description": "Overrides the `SkyMediaQueryService` to emit breakpoint changes when the host container is resized. This directive also adds SKY UX CSS classes to the host element to allow for responsive styles.",
        "filePath": "libs/components/core/src/lib/modules/breakpoint-observer/responsive-host.directive.ts",
        "kind": "directive",
        "name": "SkyResponsiveHostDirective",
        "selector": "[skyResponsiveHost]"
      },
      {
        "anchorId": "interface_sky-content-info-descriptor",
        "children": [
          {
            "description": "A descriptor of type `text` is an already localized string that describes a parent's content, i.e. constituent. A descriptor of type `elementId` is an HTML Element ID of an element that describes a parent's content, i.e. the ID to a box header.",
            "kind": "interface-property",
            "name": "type",
            "type": "\"text\" | \"elementId\""
          },
          {
            "description": "A value of the given type.",
            "kind": "interface-property",
            "name": "value",
            "type": "string"
          }
        ],
        "description": "Text or an element that describes the content a consumer renders in a component.",
        "filePath": "libs/components/core/src/lib/modules/content-info-provider/content-info-descriptor.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyContentInfoDescriptor"
      },
      {
        "anchorId": "class_sky-content-info-provider",
        "children": [
          {
            "kind": "class-method",
            "name": "getInfo",
            "parameters": [],
            "type": "Observable<SkyContentInfo>"
          },
          {
            "kind": "class-method",
            "name": "patchInfo",
            "parameters": [{ "name": "value", "type": "SkyContentInfo" }],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyContentInfoProvider"
          },
          {
            "kind": "class-property",
            "name": "getInfo",
            "type": "Observable<SkyContentInfo>"
          },
          { "kind": "class-property", "name": "patchInfo", "type": "void" }
        ],
        "description": "An API to provide information about a parent component's content to child components. For example, toolbar can use this to provide its child components with a list descriptor they can use to construct aria labels, or tree view can provide the node name to its context menus.",
        "filePath": "libs/components/core/src/lib/modules/content-info-provider/content-info-provider.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyContentInfoProvider"
      },
      {
        "anchorId": "interface_sky-content-info",
        "children": [
          {
            "description": "Information that describes the content within a parent component a consumer has rendered, i.e. \"constituents\". Provided as localized text or an element ID pointing to text that is the descriptor.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "descriptor",
            "type": "SkyContentInfoDescriptor"
          }
        ],
        "description": "Information about the content a consumer is rendering within a component.",
        "filePath": "libs/components/core/src/lib/modules/content-info-provider/content-info.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyContentInfo"
      },
      {
        "anchorId": "class_sky-default-input-provider",
        "children": [
          {
            "kind": "class-method",
            "name": "getValue",
            "parameters": [
              { "name": "componentName", "type": "string" },
              { "name": "inputName", "type": "string" }
            ],
            "type": "undefined | Observable<T>",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-method",
            "name": "setValue",
            "parameters": [
              { "name": "componentName", "type": "string" },
              { "name": "inputName", "type": "string" },
              { "name": "value", "type": "T" }
            ],
            "type": "void",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDefaultInputProvider"
          },
          {
            "kind": "class-property",
            "name": "getValue",
            "type": "undefined | Observable<T>"
          },
          { "kind": "class-property", "name": "setValue", "type": "void" }
        ],
        "description": "An API to provide default Angular component input values to child components.",
        "filePath": "libs/components/core/src/lib/modules/default-input-provider/default-input-provider.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyDefaultInputProvider"
      },
      {
        "anchorId": "interface_sky-dock-insert-component-config",
        "children": [
          {
            "description": "Static providers to inject into the item's component.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "providers",
            "type": "StaticProvider[]"
          },
          {
            "description": "The stack order of the item. The higher the number, the higher the item will be placed in the dock. By default, new items will be placed at the top of the stack.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "stackOrder",
            "type": "number"
          }
        ],
        "description": "Configuration to be used by the docking action.",
        "filePath": "libs/components/core/src/lib/modules/dock/dock-insert-component-config.ts",
        "kind": "interface",
        "name": "SkyDockInsertComponentConfig"
      },
      {
        "anchorId": "interface_sky-dock-item-config",
        "children": [
          {
            "description": "The stack order of the item. The higher the number, the higher the item will be placed in the dock. By default, new items will be placed at the top of the stack.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "stackOrder",
            "type": "number"
          }
        ],
        "description": "Configuration to be used by the docking action.",
        "filePath": "libs/components/core/src/lib/modules/dock/dock-item-config.ts",
        "kind": "interface",
        "name": "SkyDockItemConfig"
      },
      {
        "anchorId": "class_sky-dock-item",
        "children": [
          {
            "description": "Removes the item from the dock.",
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDockItem<T>"
          },
          {
            "description": "The item's component instance.",
            "kind": "class-property",
            "name": "componentInstance",
            "type": "T"
          },
          {
            "description": "The assigned stack order of the docked item.",
            "kind": "class-property",
            "name": "stackOrder",
            "type": "number"
          },
          {
            "description": "An event that emits when the item is removed from the dock.",
            "kind": "class-property",
            "name": "destroyed",
            "type": "Observable<void>"
          },
          {
            "description": "Removes the item from the dock.",
            "kind": "class-property",
            "name": "destroy",
            "type": "void"
          }
        ],
        "description": "Represents a single item added to the dock.",
        "filePath": "libs/components/core/src/lib/modules/dock/dock-item.ts",
        "kind": "class",
        "name": "SkyDockItem",
        "typeParameters": "<T>"
      },
      {
        "anchorId": "enum_sky-dock-location",
        "description": "The location on the page where the dock component should be rendered.",
        "filePath": "libs/components/core/src/lib/modules/dock/dock-location.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Renders the dock component before a given element.",
            "kind": "enum-member",
            "name": "BeforeElement",
            "type": "0"
          },
          {
            "description": "Renders the dock component as the last element inside the BODY element.",
            "kind": "enum-member",
            "name": "BodyBottom",
            "type": "1"
          },
          {
            "description": "Renders the dock component as the last element inside a given element.",
            "kind": "enum-member",
            "name": "ElementBottom",
            "type": "2"
          }
        ],
        "name": "SkyDockLocation"
      },
      {
        "anchorId": "interface_sky-dock-options",
        "children": [
          {
            "description": "The location on the page where the dock component should be rendered.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "location",
            "type": "SkyDockLocation"
          },
          {
            "description": "The reference element used when using the `BeforeElement` or `ElementBottom` locations.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "referenceEl",
            "type": "HTMLElement"
          },
          {
            "description": "The z-index for the dock element",
            "isOptional": true,
            "kind": "interface-property",
            "name": "zIndex",
            "type": "number"
          }
        ],
        "description": "Options for adding a dock component to the page.",
        "filePath": "libs/components/core/src/lib/modules/dock/dock-options.ts",
        "kind": "interface",
        "name": "SkyDockOptions"
      },
      {
        "anchorId": "class_sky-dock-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDockModule"
          }
        ],
        "deprecationReason": "The `SkyDockModule` is no longer needed and can be removed from your application.",
        "filePath": "libs/components/core/src/lib/modules/dock/dock.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyDockModule"
      },
      {
        "anchorId": "class_sky-dock-service",
        "children": [
          {
            "description": "Docks a component to the bottom of the page.",
            "kind": "class-method",
            "name": "insertComponent",
            "parameters": [
              {
                "description": "The component to dock.",
                "name": "component",
                "type": "Type<T>"
              },
              {
                "description": "Options that affect the docking action.",
                "isOptional": true,
                "name": "config",
                "type": "SkyDockInsertComponentConfig"
              }
            ],
            "type": "SkyDockItem<T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Sets options for the positioning and styling of the dock component. Since the dock service is a singleton instance, these options will be applied to all components inserted into the dock. In order to create a separate dock with different options, consumers should provide a different instance of the dock service.",
            "kind": "class-method",
            "name": "setDockOptions",
            "parameters": [
              {
                "description": "The options for positioning and styling",
                "name": "options",
                "type": "SkyDockOptions"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDockService"
          },
          {
            "description": "Returns all docked items.",
            "kind": "class-property",
            "name": "items",
            "type": "SkyDockItem<any>[]"
          },
          {
            "description": "Docks a component to the bottom of the page.",
            "kind": "class-property",
            "name": "insertComponent",
            "type": "SkyDockItem<T>"
          },
          {
            "description": "Sets options for the positioning and styling of the dock component. Since the dock service is a singleton instance, these options will be applied to all components inserted into the dock. In order to create a separate dock with different options, consumers should provide a different instance of the dock service.",
            "kind": "class-property",
            "name": "setDockOptions",
            "type": "void"
          }
        ],
        "description": "This service docks components to specific areas on the page.",
        "filePath": "libs/components/core/src/lib/modules/dock/dock.service.ts",
        "kind": "service",
        "name": "SkyDockService"
      },
      {
        "anchorId": "enum_sky-dynamic-component-location",
        "description": "The location on the page where the dynamic component should be rendered.",
        "filePath": "libs/components/core/src/lib/modules/dynamic-component/dynamic-component-location.ts",
        "kind": "enumeration",
        "children": [
          {
            "description": "Renders the dynamic component before a given element.",
            "kind": "enum-member",
            "name": "BeforeElement",
            "type": "0"
          },
          {
            "description": "Renders the dynamic component as the last element inside the BODY element.",
            "kind": "enum-member",
            "name": "BodyBottom",
            "type": "1"
          },
          {
            "description": "Renders the dynamic component as the first element inside the BODY element.",
            "kind": "enum-member",
            "name": "BodyTop",
            "type": "2"
          },
          {
            "description": "Renders the dynamic component as the last element inside a given element.",
            "kind": "enum-member",
            "name": "ElementBottom",
            "type": "3"
          },
          {
            "description": "Renders the dynamic component as the first element inside a given element.",
            "kind": "enum-member",
            "name": "ElementTop",
            "type": "4"
          }
        ],
        "name": "SkyDynamicComponentLocation"
      },
      {
        "anchorId": "interface_sky-dynamic-component-options",
        "children": [
          {
            "description": "The environment injector to use instead of the dynamic component service's injector.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "environmentInjector",
            "type": "EnvironmentInjector"
          },
          {
            "description": "The location on the page where the dynamic component should be rendered.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "location",
            "type": "SkyDynamicComponentLocation"
          },
          {
            "description": "Providers to inject into the new component.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "providers",
            "type": "StaticProvider[]"
          },
          {
            "description": "The reference element used when using the `ElementTop` or `ElementBottom` locations.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "referenceEl",
            "type": "HTMLElement"
          },
          {
            "description": "The view container reference where the new component should be appended.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "viewContainerRef",
            "type": "ViewContainerRef"
          }
        ],
        "description": "Options for adding a dynamic component to the page.",
        "filePath": "libs/components/core/src/lib/modules/dynamic-component/dynamic-component-options.ts",
        "kind": "interface",
        "name": "SkyDynamicComponentOptions"
      },
      {
        "anchorId": "class_sky-dynamic-component-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDynamicComponentModule"
          }
        ],
        "deprecationReason": "The `SkyDynamicComponentService` no longer needs the `SkyDynamicComponentModule`.\nThe `SkyDynamicComponentModule` can be removed from your project.",
        "description": "Provides services required to create dynamic components on the page.",
        "filePath": "libs/components/core/src/lib/modules/dynamic-component/dynamic-component.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyDynamicComponentModule"
      },
      {
        "anchorId": "class_sky-dynamic-component-legacy-service",
        "children": [
          {
            "description": "Creates an instance of the specified component and adds it to the specified location on the page.",
            "kind": "class-method",
            "name": "createComponent",
            "parameters": [
              { "name": "componentType", "type": "Type<T>" },
              {
                "isOptional": true,
                "name": "options",
                "type": "SkyDynamicComponentOptions"
              }
            ],
            "type": "ComponentRef<T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Removes a component ref from the page",
            "kind": "class-method",
            "name": "removeComponent",
            "parameters": [
              {
                "description": "Component ref for the component being removed",
                "name": "componentRef",
                "type": "undefined | ComponentRef<T>"
              }
            ],
            "type": "void",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDynamicComponentLegacyService"
          },
          {
            "description": "Creates an instance of the specified component and adds it to the specified location on the page.",
            "kind": "class-property",
            "name": "createComponent",
            "type": "ComponentRef<T>"
          },
          {
            "description": "Removes a component ref from the page",
            "kind": "class-property",
            "name": "removeComponent",
            "type": "void"
          }
        ],
        "deprecationReason": "Use `SkyDynamicComponentService` to create a standalone component instead.",
        "description": "Angular service for creating and rendering a dynamic component.",
        "filePath": "libs/components/core/src/lib/modules/dynamic-component/dynamic-component.service.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "SkyDynamicComponentLegacyService"
      },
      {
        "anchorId": "class_sky-dynamic-component-service",
        "children": [
          {
            "description": "Creates an instance of the specified component and adds it to the specified location on the page.",
            "kind": "class-method",
            "name": "createComponent",
            "parameters": [
              { "name": "componentType", "type": "Type<T>" },
              {
                "isOptional": true,
                "name": "options",
                "type": "SkyDynamicComponentOptions"
              }
            ],
            "type": "ComponentRef<T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Removes a component ref from the page",
            "kind": "class-method",
            "name": "removeComponent",
            "parameters": [
              {
                "description": "Component ref for the component being removed",
                "name": "componentRef",
                "type": "undefined | ComponentRef<T>"
              }
            ],
            "type": "void",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyDynamicComponentService"
          },
          {
            "description": "Creates an instance of the specified component and adds it to the specified location on the page.",
            "kind": "class-property",
            "name": "createComponent",
            "type": "ComponentRef<T>"
          },
          {
            "description": "Removes a component ref from the page",
            "kind": "class-property",
            "name": "removeComponent",
            "type": "void"
          }
        ],
        "description": "Angular service for creating and rendering a dynamic component.",
        "filePath": "libs/components/core/src/lib/modules/dynamic-component/dynamic-component.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyDynamicComponentService"
      },
      {
        "anchorId": "class_sky-app-format",
        "children": [
          {
            "kind": "class-method",
            "name": "formatText",
            "parameters": [
              { "name": "format", "type": "string" },
              { "name": "args", "type": "any[]" }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppFormat"
          },
          { "kind": "class-property", "name": "formatText", "type": "string" }
        ],
        "filePath": "libs/components/core/src/lib/modules/format/app-format.ts",
        "kind": "service",
        "name": "SkyAppFormat"
      },
      {
        "anchorId": "variable_sky-help-global-options",
        "description": "Injection token for specifying and retrieving global help options.",
        "filePath": "libs/components/core/src/lib/modules/help/help-global-options-token.ts",
        "kind": "variable",
        "name": "SKY_HELP_GLOBAL_OPTIONS",
        "type": "InjectionToken<SkyHelpGlobalOptions>"
      },
      {
        "anchorId": "interface_sky-help-global-options",
        "children": [
          {
            "description": "The ID of the element that is displayed when the invoking component is clicked.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaControls",
            "type": "string"
          },
          {
            "description": "The type of popup triggered by the invoking component.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "ariaHaspopup",
            "type": "\"dialog\" | \"menu\" | \"listbox\" | \"tree\" | \"grid\""
          }
        ],
        "description": "Options to apply to all components that invoke global help.",
        "filePath": "libs/components/core/src/lib/modules/help/help-global-options.ts",
        "kind": "interface",
        "name": "SkyHelpGlobalOptions"
      },
      {
        "anchorId": "interface_sky-help-open-args",
        "children": [
          {
            "description": "A unique key that identifies the help content to display.",
            "kind": "interface-property",
            "name": "helpKey",
            "type": "string"
          }
        ],
        "description": "Options for displaying a globally accessible help dialog.",
        "filePath": "libs/components/core/src/lib/modules/help/help-open-args.ts",
        "kind": "interface",
        "name": "SkyHelpOpenArgs"
      },
      {
        "anchorId": "interface_sky-help-update-args",
        "children": [
          {
            "description": "A unique key that identifies the current help content to display. If set to `undefined`, the page's default help content will be displayed.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "helpKey",
            "type": "string"
          },
          {
            "description": "A unique key that identifies the page's default help content to display. Set this property to `undefined` to unset the current page default help key.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "pageDefaultHelpKey",
            "type": "string"
          }
        ],
        "description": "Options for updating a globally accessible help dialog.",
        "filePath": "libs/components/core/src/lib/modules/help/help-update-args.ts",
        "kind": "interface",
        "name": "SkyHelpUpdateArgs"
      },
      {
        "anchorId": "class_sky-help-service",
        "children": [
          {
            "description": "Opens a globally accessible help dialog.",
            "kind": "class-method",
            "name": "openHelp",
            "parameters": [
              {
                "description": "The options for opening the help dialog.",
                "isOptional": true,
                "name": "args",
                "type": "SkyHelpOpenArgs"
              }
            ],
            "type": "void"
          },
          {
            "description": "Updates a globally accessible help dialog.",
            "kind": "class-method",
            "name": "updateHelp",
            "parameters": [
              {
                "description": "The options for updating the help dialog.",
                "name": "args",
                "type": "SkyHelpUpdateArgs"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHelpService"
          },
          {
            "description": "Emits when the help widget ready state changes.",
            "kind": "class-property",
            "name": "widgetReadyStateChange",
            "type": "Observable<boolean>"
          },
          {
            "description": "Opens a globally accessible help dialog.",
            "kind": "class-property",
            "name": "openHelp",
            "type": "void"
          },
          {
            "description": "Updates a globally accessible help dialog.",
            "kind": "class-property",
            "name": "updateHelp",
            "type": "void"
          }
        ],
        "description": "Provides methods for opening and updating a globally accessible help dialog.",
        "filePath": "libs/components/core/src/lib/modules/help/help.service.ts",
        "kind": "service",
        "name": "SkyHelpService"
      },
      {
        "anchorId": "class_sky-id-directive",
        "description": "Sets the element's `id` attribute to a unique ID. To reference this unique ID on other elements, such as in a `label` element's `for` attribute, assign this directive to a template reference variable, then use its `id` property.",
        "filePath": "libs/components/core/src/lib/modules/id/id.directive.ts",
        "kind": "directive",
        "name": "SkyIdDirective",
        "selector": "[skyId]"
      },
      {
        "anchorId": "class_sky-id-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIdModule"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/id/id.module.ts",
        "kind": "module",
        "name": "SkyIdModule"
      },
      {
        "anchorId": "class_sky-id-service",
        "children": [
          {
            "kind": "class-method",
            "name": "generateId",
            "parameters": [],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIdService"
          },
          { "kind": "class-property", "name": "generateId", "type": "string" }
        ],
        "description": "Generates unique IDs to be used with HTML elements.",
        "filePath": "libs/components/core/src/lib/modules/id/id.service.ts",
        "kind": "service",
        "name": "SkyIdService"
      },
      {
        "anchorId": "interface_sky-layout-host-for-child-args",
        "children": [
          { "kind": "interface-property", "name": "layout", "type": "string" }
        ],
        "filePath": "libs/components/core/src/lib/modules/layout-host/layout-host-for-child-args.ts",
        "kind": "interface",
        "name": "SkyLayoutHostForChildArgs"
      },
      {
        "anchorId": "class_sky-layout-host-service",
        "children": [
          {
            "kind": "class-method",
            "name": "setHostLayoutForChild",
            "parameters": [
              { "name": "layout", "type": "SkyLayoutHostForChildArgs" }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLayoutHostService"
          },
          {
            "kind": "class-property",
            "name": "hostLayoutForChild",
            "type": "Observable<SkyLayoutHostForChildArgs>"
          },
          {
            "kind": "class-property",
            "name": "setHostLayoutForChild",
            "type": "void"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/layout-host/layout-host.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyLayoutHostService"
      },
      {
        "anchorId": "class_sky-live-announcer-service",
        "children": [
          {
            "description": "Announces a message to screen readers.",
            "kind": "class-method",
            "name": "announce",
            "parameters": [
              {
                "description": "Message to be announced to the screen reader.",
                "name": "message",
                "type": "string"
              },
              {
                "description": "Options for the announcement of the message.",
                "isOptional": true,
                "name": "args",
                "type": "SkyLiveAnnouncerArgs"
              }
            ],
            "type": "void"
          },
          {
            "description": "Clears the current text from the announcer element. Can be used to prevent screen readers from reading the text out again while the user is going through the page landmarks.",
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLiveAnnouncerService"
          },
          {
            "kind": "class-property",
            "name": "announcerElementChanged",
            "type": "ReplaySubject<undefined | HTMLElement>"
          },
          {
            "description": "Announces a message to screen readers.",
            "kind": "class-property",
            "name": "announce",
            "type": "void"
          },
          {
            "description": "Clears the current text from the announcer element. Can be used to prevent screen readers from reading the text out again while the user is going through the page landmarks.",
            "kind": "class-property",
            "name": "clear",
            "type": "void"
          },
          { "kind": "class-property", "name": "ngOnDestroy", "type": "void" }
        ],
        "description": "Allows for announcing messages to screen reader users through the use of a common `aria-live` element.",
        "filePath": "libs/components/core/src/lib/modules/live-announcer/live-announcer.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyLiveAnnouncerService"
      },
      {
        "anchorId": "interface_sky-live-announcer-args",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "politeness",
            "type": "SkyLiveAnnouncerPoliteness"
          }
        ],
        "description": "Options used when announcing messages to screen readers via the `SkyLiveAnnouncerService`",
        "filePath": "libs/components/core/src/lib/modules/live-announcer/types/live-announcer-args.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyLiveAnnouncerArgs"
      },
      {
        "anchorId": "type-alias_sky-live-announcer-politeness",
        "description": "Possible politeness levels for messages announced via the `SkyLiveAnnouncerService`.",
        "filePath": "libs/components/core/src/lib/modules/live-announcer/types/live-announcer-politeness.ts",
        "isInternal": true,
        "kind": "type-alias",
        "name": "SkyLiveAnnouncerPoliteness",
        "type": "\"off\" | \"polite\" | \"assertive\""
      },
      {
        "anchorId": "class_sky-log-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLogModule"
          }
        ],
        "deprecationReason": "The `SkyLogService` no longer needs the `SkyLogModule`.\nThe `SkyLogModule` can be removed from your project.",
        "filePath": "libs/components/core/src/lib/modules/log/log.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyLogModule"
      },
      {
        "anchorId": "class_sky-log-service",
        "children": [
          {
            "description": "Logs a deprecation warning for a class, property, function, etc. This will be logged as a console warning unless a different log level is given in the `args` parameter.",
            "kind": "class-method",
            "name": "deprecated",
            "parameters": [
              {
                "description": "The name of the deprecated class, property, function, etc.",
                "name": "name",
                "type": "string"
              },
              {
                "description": "Information about the deprecation and replacement recommendations.",
                "isOptional": true,
                "name": "args",
                "type": "SkyLogDeprecatedArgs"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Logs a console error if the application's log level is `SkyLogLevel.Error`.",
            "kind": "class-method",
            "name": "error",
            "parameters": [
              {
                "description": "The error message",
                "name": "message",
                "type": "string"
              },
              {
                "description": "Optional parameters for the error message.",
                "isOptional": true,
                "name": "params",
                "type": "unknown[]"
              }
            ],
            "type": "void"
          },
          {
            "description": "Logs console information if the application's log level is `SkyLogLevel.Info` or above.",
            "kind": "class-method",
            "name": "info",
            "parameters": [
              {
                "description": "The informational message",
                "name": "message",
                "type": "string"
              },
              {
                "description": "Optional parameters for the informational message.",
                "isOptional": true,
                "name": "params",
                "type": "unknown[]"
              }
            ],
            "type": "void"
          },
          {
            "description": "Logs a console warning if the application's log level is `SkyLogLevel.Warn` or above.",
            "kind": "class-method",
            "name": "warn",
            "parameters": [
              {
                "description": "The warning message",
                "name": "message",
                "type": "string"
              },
              {
                "description": "Optional parameters for the warning message.",
                "isOptional": true,
                "name": "params",
                "type": "unknown[]"
              }
            ],
            "type": "void"
          },
          {
            "description": "Clears previously-logged messages. Primarily used for unit testing this service.",
            "isStatic": true,
            "kind": "class-method",
            "name": "clearPreviousLogs",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLogService"
          },
          {
            "description": "Logs a deprecation warning for a class, property, function, etc. This will be logged as a console warning unless a different log level is given in the `args` parameter.",
            "kind": "class-property",
            "name": "deprecated",
            "type": "Promise<void>"
          },
          {
            "description": "Logs a console error if the application's log level is `SkyLogLevel.Error`.",
            "kind": "class-property",
            "name": "error",
            "type": "void"
          },
          {
            "description": "Logs console information if the application's log level is `SkyLogLevel.Info` or above.",
            "kind": "class-property",
            "name": "info",
            "type": "void"
          },
          {
            "description": "Logs a console warning if the application's log level is `SkyLogLevel.Warn` or above.",
            "kind": "class-property",
            "name": "warn",
            "type": "void"
          },
          {
            "description": "Clears previously-logged messages. Primarily used for unit testing this service.",
            "isStatic": true,
            "kind": "class-property",
            "name": "clearPreviousLogs",
            "type": "void"
          }
        ],
        "description": "Logs information to the console based on the application's log level as provided by the `SKY_LOG_LEVEL` injection token. If no token is provided, only `error` logs will be shown.",
        "filePath": "libs/components/core/src/lib/modules/log/log.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyLogService"
      },
      {
        "anchorId": "variable_sky-log-level",
        "filePath": "libs/components/core/src/lib/modules/log/types/log-level-token.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "SKY_LOG_LEVEL",
        "type": "InjectionToken<SkyLogLevel>"
      },
      {
        "anchorId": "enum_sky-log-level",
        "filePath": "libs/components/core/src/lib/modules/log/types/log-level.ts",
        "isInternal": true,
        "kind": "enumeration",
        "children": [
          { "kind": "enum-member", "name": "Error", "type": "3" },
          { "kind": "enum-member", "name": "Info", "type": "1" },
          { "kind": "enum-member", "name": "Warn", "type": "2" }
        ],
        "name": "SkyLogLevel"
      },
      {
        "anchorId": "enum_sky-media-breakpoints",
        "deprecationReason": "Use `SkyBreakpoint` instead.",
        "description": "Represents all available media breakpoints.",
        "filePath": "libs/components/core/src/lib/modules/media-query/media-breakpoints.ts",
        "isDeprecated": true,
        "kind": "enumeration",
        "children": [
          {
            "description": "Screen widths of 1200px or greater.",
            "kind": "enum-member",
            "name": "lg",
            "type": "4"
          },
          {
            "description": "Screen widths of 992px to 1199px.",
            "kind": "enum-member",
            "name": "md",
            "type": "3"
          },
          {
            "description": "Screen widths of 768px to 991px.",
            "kind": "enum-member",
            "name": "sm",
            "type": "2"
          },
          {
            "description": "Screen widths of 767px or less.",
            "kind": "enum-member",
            "name": "xs",
            "type": "1"
          }
        ],
        "name": "SkyMediaBreakpoints"
      },
      {
        "anchorId": "type-alias_sky-media-query-listener",
        "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
        "description": "The function that is called when the breakpoints change. It is called with a `SkyMediaBreakpoints` argument, which is an enum that represents the new breakpoint.",
        "filePath": "libs/components/core/src/lib/modules/media-query/media-query-listener.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "SkyMediaQueryListener",
        "type": "Function"
      },
      {
        "anchorId": "class_sky-media-query-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyMediaQueryModule"
          }
        ],
        "deprecationReason": "The `SkyMediaQueryService` no longer needs the `SkyMediaQueryModule`.\nThe `SkyMediaQueryModule` can be removed from your project.",
        "filePath": "libs/components/core/src/lib/modules/media-query/media-query.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyMediaQueryModule"
      },
      {
        "anchorId": "class_sky-media-query-service",
        "children": [
          {
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
            "description": "Subscribes to screen size changes.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "subscribe",
            "parameters": [
              {
                "description": "Specifies a function that is called when breakpoints change.",
                "name": "listener",
                "type": "SkyMediaQueryListener"
              }
            ],
            "type": "Subscription"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyMediaQueryService"
          },
          {
            "description": "The size for the `lg` breakpoint.",
            "defaultValue": "\"(min-width: 1200px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "lg",
            "type": "string"
          },
          {
            "description": "The size for the `md` breakpoint.",
            "defaultValue": "\"(min-width: 992px) and (max-width: 1199px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "md",
            "type": "string"
          },
          {
            "description": "The size for the `sm` breakpoint.",
            "defaultValue": "\"(min-width: 768px) and (max-width: 991px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "sm",
            "type": "string"
          },
          {
            "description": "The size for the `xs` breakpoint.",
            "defaultValue": "\"(max-width: 767px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "xs",
            "type": "string"
          },
          {
            "description": "Emits when the breakpoint changes.",
            "kind": "class-property",
            "name": "breakpointChange",
            "type": "Observable<\"xs\" | \"sm\" | \"md\" | \"lg\">"
          },
          {
            "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
            "description": "Returns the current breakpoint.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "current",
            "type": "SkyMediaBreakpoints"
          },
          { "kind": "class-property", "name": "destroy", "type": "void" },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
            "description": "Subscribes to screen size changes.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "subscribe",
            "type": "Subscription"
          }
        ],
        "description": "Utility used to subscribe to viewport and container breakpoint changes.",
        "filePath": "libs/components/core/src/lib/modules/media-query/media-query.service.ts",
        "kind": "service",
        "name": "SkyMediaQueryService"
      },
      {
        "anchorId": "class_sky-mutation-observer-service",
        "children": [
          {
            "kind": "class-method",
            "name": "create",
            "parameters": [{ "name": "callback", "type": "MutationCallback" }],
            "type": "MutationObserver"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyMutationObserverService"
          },
          {
            "kind": "class-property",
            "name": "create",
            "type": "MutationObserver"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/mutation/mutation-observer-service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyMutationObserverService"
      },
      {
        "anchorId": "interface_sky-numeric-symbol",
        "children": [
          { "kind": "interface-property", "name": "label", "type": "string" },
          { "kind": "interface-property", "name": "value", "type": "number" }
        ],
        "filePath": "libs/components/core/src/lib/modules/numeric/numeric-symbol.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyNumericSymbol"
      },
      {
        "anchorId": "class_sky-numeric-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyNumericModule"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/numeric/numeric.module.ts",
        "kind": "module",
        "name": "SkyNumericModule"
      },
      {
        "anchorId": "class_numeric-options",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "NumericOptions"
          },
          {
            "description": "Specifies the display of the currency. Defaults to 'symbol'.",
            "kind": "class-property",
            "name": "currencyDisplay",
            "type": "\"symbol\" | \"code\" | \"narrowSymbol\" | \"name\""
          },
          {
            "description": "Specifies the format of the currency.",
            "defaultValue": "'standard'",
            "kind": "class-property",
            "name": "currencySign",
            "type": "\"standard\" | \"accounting\""
          },
          {
            "description": "Specifies the maximum number of digits after the decimal separator.",
            "defaultValue": "1",
            "kind": "class-property",
            "name": "digits",
            "type": "number"
          },
          {
            "description": "Specifies how to format the number. Options are `currency` or `number`.",
            "defaultValue": "'number'",
            "kind": "class-property",
            "name": "format",
            "type": "string"
          },
          {
            "description": "Specifies the ISO4217 currency code to use for currency formatting.",
            "defaultValue": "'USD'",
            "kind": "class-property",
            "name": "iso",
            "type": "string"
          },
          {
            "description": "Specifies the locale code to use when formatting.",
            "kind": "class-property",
            "name": "locale",
            "type": "string"
          },
          {
            "description": "Specifies the minimum number of digits after the decimal separator. This property only applies when the `truncate` property is set to `false`. If `digits` specifies a maximum number of digits, then `minDigits` must be less than that value.",
            "kind": "class-property",
            "name": "minDigits",
            "type": "number"
          },
          {
            "description": "Indicates whether to shorten numbers to rounded numbers and abbreviation characters such as K for thousands, M for millions, B for billions, and T for trillions.",
            "defaultValue": "true",
            "kind": "class-property",
            "name": "truncate",
            "type": "boolean"
          },
          {
            "description": "Specifies the minimum value at which numbers are shortened to rounded numbers and abbreviation characters. Values less than `1000` are not truncated.",
            "defaultValue": "1000",
            "kind": "class-property",
            "name": "truncateAfter",
            "type": "number"
          }
        ],
        "deprecationReason": "Use the `SkyNumericOptions` interface instead.",
        "description": "Provides arguments for the number to format.",
        "filePath": "libs/components/core/src/lib/modules/numeric/numeric.options.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "class",
        "name": "NumericOptions"
      },
      {
        "anchorId": "interface_sky-numeric-options",
        "children": [
          {
            "description": "Specifies the display of the currency. Defaults to 'symbol'.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "currencyDisplay",
            "type": "\"symbol\" | \"code\" | \"narrowSymbol\" | \"name\""
          },
          {
            "description": "Specifies the format of the currency.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "currencySign",
            "type": "\"standard\" | \"accounting\""
          },
          {
            "description": "Specifies the maximum number of digits after the decimal separator.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "digits",
            "type": "number"
          },
          {
            "description": "Specifies how to format the number. Options are `currency` or `number`.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "format",
            "type": "string"
          },
          {
            "description": "Specifies the ISO4217 currency code to use for currency formatting.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "iso",
            "type": "string"
          },
          {
            "description": "Specifies the locale code to use when formatting.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "locale",
            "type": "string"
          },
          {
            "description": "Specifies the minimum number of digits after the decimal separator. This property only applies when the `truncate` property is set to `false`. If `digits` specifies a maximum number of digits, then `minDigits` must be less than that value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "minDigits",
            "type": "number"
          },
          {
            "description": "Indicates whether to shorten numbers to rounded numbers and abbreviation characters such as K for thousands, M for millions, B for billions, and T for trillions.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "truncate",
            "type": "boolean"
          },
          {
            "description": "Specifies the minimum value at which numbers are shortened to rounded numbers and abbreviation characters. Values less than `1000` are not truncated.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "truncateAfter",
            "type": "number"
          }
        ],
        "description": "Provides arguments for the number to format.",
        "filePath": "libs/components/core/src/lib/modules/numeric/numeric.options.ts",
        "kind": "interface",
        "name": "SkyNumericOptions"
      },
      {
        "anchorId": "class_sky-numeric-pipe",
        "children": [
          {
            "description": "Formats a number based on the provided options.",
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              { "name": "value", "type": "undefined | null | number" },
              {
                "isOptional": true,
                "name": "config",
                "type": "SkyNumericOptions"
              }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyNumericPipe"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Formats a number based on the provided options.",
            "kind": "class-property",
            "name": "transform",
            "type": "string"
          }
        ],
        "description": "Shortens numbers to rounded numbers and abbreviation characters such as K for thousands, M for millions, B for billions, and T for trillions. The pipe also formats for currency. Be sure you have a space after the two curly brackets opening the pipe and a space before the two curly brackets closing the pipe or it will not work.",
        "filePath": "libs/components/core/src/lib/modules/numeric/numeric.pipe.ts",
        "kind": "pipe",
        "name": "SkyNumericPipe",
        "templateBindingName": "skyNumeric"
      },
      {
        "anchorId": "class_sky-numeric-service",
        "children": [
          {
            "description": "Formats a number based on the provided options.",
            "kind": "class-method",
            "name": "formatNumber",
            "parameters": [
              {
                "description": "The number to format.",
                "name": "value",
                "type": "undefined | null | number"
              },
              {
                "description": "Format options.",
                "name": "options",
                "type": "SkyNumericOptions"
              }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyNumericService"
          },
          {
            "description": "The browser's current locale.",
            "defaultValue": "'en-US'",
            "kind": "class-property",
            "name": "currentLocale",
            "type": "string"
          },
          {
            "defaultValue": "''",
            "kind": "class-property",
            "name": "shortSymbol",
            "type": "string"
          },
          {
            "description": "Formats a number based on the provided options.",
            "kind": "class-property",
            "name": "formatNumber",
            "type": "string"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/numeric/numeric.service.ts",
        "kind": "service",
        "name": "SkyNumericService"
      },
      {
        "anchorId": "interface_sky-overlay-config",
        "children": [
          {
            "description": "Whether the overlay closes after a navigation change.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "closeOnNavigation",
            "type": "boolean"
          },
          {
            "description": "Whether the overlay closes when a user clicks outside the overlay's content.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "enableClose",
            "type": "boolean"
          },
          {
            "description": "Whether mouse interactions are allowed below the backdrop.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "enablePointerEvents",
            "type": "boolean"
          },
          {
            "description": "Whether window scrolling is enabled when the overlay is opened.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "enableScroll",
            "type": "boolean"
          },
          {
            "description": "The environment injector for the overlay component.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "environmentInjector",
            "type": "EnvironmentInjector"
          },
          {
            "description": "Hides the overlay's siblings from screen readers so users can't interact with content behind the overlay with assistive technology.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "hideOthersFromScreenReaders",
            "type": "boolean"
          },
          {
            "description": "The position of the overlay instance.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "position",
            "type": "SkyOverlayPosition"
          },
          {
            "description": "Whether the overlay's backdrop is visible.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "showBackdrop",
            "type": "boolean"
          },
          {
            "description": "Extra CSS classes to add to the overlay's wrapper element.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "wrapperClass",
            "type": "string"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/overlay/overlay-config.ts",
        "kind": "interface",
        "name": "SkyOverlayConfig"
      },
      {
        "anchorId": "class_sky-overlay-instance",
        "children": [
          {
            "description": "Creates and attaches a component to the overlay.",
            "kind": "class-method",
            "name": "attachComponent",
            "parameters": [
              {
                "description": "The component to attach.",
                "name": "component",
                "type": "Type<C>"
              },
              {
                "description": "Custom providers to apply to the component.",
                "isOptional": true,
                "name": "providers",
                "type": "StaticProvider[]"
              }
            ],
            "type": "C",
            "typeParameters": "<C>"
          },
          {
            "description": "Attaches a `TemplateRef` to the overlay.",
            "kind": "class-method",
            "name": "attachTemplate",
            "parameters": [
              {
                "description": "The `TemplateRef` to attach.",
                "name": "templateRef",
                "type": "TemplateRef<T>"
              },
              {
                "description": "The context to provide to the template.",
                "isOptional": true,
                "name": "context",
                "type": "T"
              }
            ],
            "type": "void",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyOverlayInstance"
          },
          {
            "kind": "class-property",
            "name": "componentRef",
            "type": "ComponentRef<SkyOverlayComponent>"
          },
          {
            "description": "The configuration for the overlay.",
            "kind": "class-property",
            "name": "config",
            "type": "SkyOverlayConfig"
          },
          { "kind": "class-property", "name": "id", "type": "string" },
          {
            "description": "Emits when the overlay is clicked (but not its content).",
            "kind": "class-property",
            "name": "backdropClick",
            "type": "Observable<void>"
          },
          {
            "description": "Emits after the overlay is closed.",
            "kind": "class-property",
            "name": "closed",
            "type": "Observable<void>"
          },
          {
            "description": "Creates and attaches a component to the overlay.",
            "kind": "class-property",
            "name": "attachComponent",
            "type": "C"
          },
          {
            "description": "Attaches a `TemplateRef` to the overlay.",
            "kind": "class-property",
            "name": "attachTemplate",
            "type": "void"
          }
        ],
        "description": "Represents a new overlay instance. It is used to manage the \"closed\" state of the overlay, and access any public members on the appended content component instance.",
        "filePath": "libs/components/core/src/lib/modules/overlay/overlay-instance.ts",
        "kind": "class",
        "name": "SkyOverlayInstance"
      },
      {
        "anchorId": "type-alias_sky-overlay-position",
        "filePath": "libs/components/core/src/lib/modules/overlay/overlay-position.ts",
        "kind": "type-alias",
        "name": "SkyOverlayPosition",
        "type": "\"absolute\" | \"fixed\""
      },
      {
        "anchorId": "class_sky-overlay-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyOverlayModule"
          }
        ],
        "deprecationReason": "The `SkyOverlayModule` is no longer needed and can be removed from your application.",
        "filePath": "libs/components/core/src/lib/modules/overlay/overlay.module.ts",
        "isDeprecated": true,
        "kind": "module",
        "name": "SkyOverlayModule"
      },
      {
        "anchorId": "class_sky-overlay-legacy-service",
        "children": [
          {
            "description": "Closes (and destroys) an overlay instance.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              {
                "description": "The instance to close.",
                "name": "instance",
                "type": "SkyOverlayInstance"
              }
            ],
            "type": "void"
          },
          {
            "description": "Closes all overlay instances.",
            "kind": "class-method",
            "name": "closeAll",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Creates an empty overlay. Use the returned `SkyOverlayInstance` to append content.",
            "kind": "class-method",
            "name": "create",
            "parameters": [
              {
                "description": "Configuration for the overlay.",
                "isOptional": true,
                "name": "config",
                "type": "SkyOverlayConfig"
              }
            ],
            "type": "SkyOverlayInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyOverlayLegacyService"
          },
          {
            "description": "Closes (and destroys) an overlay instance.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          },
          {
            "description": "Closes all overlay instances.",
            "kind": "class-property",
            "name": "closeAll",
            "type": "void"
          },
          {
            "description": "Creates an empty overlay. Use the returned `SkyOverlayInstance` to append content.",
            "kind": "class-property",
            "name": "create",
            "type": "SkyOverlayInstance"
          }
        ],
        "deprecationReason": "Use `SkyOverlayService` to open a standalone component instead.",
        "description": "This service is used to create new overlays.",
        "filePath": "libs/components/core/src/lib/modules/overlay/overlay.service.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "SkyOverlayLegacyService"
      },
      {
        "anchorId": "class_sky-overlay-service",
        "children": [
          {
            "description": "Closes (and destroys) an overlay instance.",
            "kind": "class-method",
            "name": "close",
            "parameters": [
              {
                "description": "The instance to close.",
                "name": "instance",
                "type": "SkyOverlayInstance"
              }
            ],
            "type": "void"
          },
          {
            "description": "Closes all overlay instances.",
            "kind": "class-method",
            "name": "closeAll",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Creates an empty overlay. Use the returned `SkyOverlayInstance` to append content.",
            "kind": "class-method",
            "name": "create",
            "parameters": [
              {
                "description": "Configuration for the overlay.",
                "isOptional": true,
                "name": "config",
                "type": "SkyOverlayConfig"
              }
            ],
            "type": "SkyOverlayInstance"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyOverlayService"
          },
          {
            "description": "Closes (and destroys) an overlay instance.",
            "kind": "class-property",
            "name": "close",
            "type": "void"
          },
          {
            "description": "Closes all overlay instances.",
            "kind": "class-property",
            "name": "closeAll",
            "type": "void"
          },
          {
            "description": "Creates an empty overlay. Use the returned `SkyOverlayInstance` to append content.",
            "kind": "class-property",
            "name": "create",
            "type": "SkyOverlayInstance"
          }
        ],
        "description": "This service is used to create new overlays.",
        "filePath": "libs/components/core/src/lib/modules/overlay/overlay.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "SkyOverlayService"
      },
      {
        "anchorId": "class_sky-percent-pipe-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPercentPipeModule"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/percent-pipe/percent-pipe.module.ts",
        "kind": "module",
        "name": "SkyPercentPipeModule"
      },
      {
        "anchorId": "class_sky-percent-pipe",
        "children": [
          {
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              { "name": "value", "type": "string" },
              { "isOptional": true, "name": "format", "type": "string" },
              { "isOptional": true, "name": "locale", "type": "string" }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyPercentPipe"
          },
          {
            "kind": "class-property",
            "name": "defaultLocale",
            "type": "string"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          { "kind": "class-property", "name": "transform", "type": "string" }
        ],
        "filePath": "libs/components/core/src/lib/modules/percent-pipe/percent.pipe.ts",
        "kind": "pipe",
        "name": "SkyPercentPipe",
        "templateBindingName": "skyPercent"
      },
      {
        "anchorId": "class_sky-resize-observer-media-query-service",
        "children": [
          {
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Sets the container element to watch. The `SkyResizeObserverMediaQueryService` will only observe one element at a time. Any previous subscriptions will be unsubscribed when a new element is observed.",
            "kind": "class-method",
            "name": "observe",
            "parameters": [
              { "name": "element", "type": "ElementRef<any>" },
              { "isOptional": true, "name": "options", "type": "Object" }
            ],
            "type": "SkyResizeObserverMediaQueryService"
          },
          {
            "description": "Subscribes to element size changes that cross breakpoints.",
            "kind": "class-method",
            "name": "subscribe",
            "parameters": [
              { "name": "listener", "type": "SkyMediaQueryListener" }
            ],
            "type": "Subscription"
          },
          {
            "description": "Stop watching the container element and remove any added classes.",
            "kind": "class-method",
            "name": "unobserve",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyResizeObserverMediaQueryService"
          },
          {
            "description": "The size for the `lg` breakpoint.",
            "defaultValue": "\"(min-width: 1200px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "lg",
            "type": "string"
          },
          {
            "description": "The size for the `md` breakpoint.",
            "defaultValue": "\"(min-width: 992px) and (max-width: 1199px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "md",
            "type": "string"
          },
          {
            "description": "The size for the `sm` breakpoint.",
            "defaultValue": "\"(min-width: 768px) and (max-width: 991px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "sm",
            "type": "string"
          },
          {
            "description": "The size for the `xs` breakpoint.",
            "defaultValue": "\"(max-width: 767px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "xs",
            "type": "string"
          },
          {
            "description": "Emits when the breakpoint changes.",
            "kind": "class-property",
            "name": "breakpointChange",
            "type": "Observable<\"xs\" | \"sm\" | \"md\" | \"lg\">"
          },
          {
            "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
            "description": "Returns the current breakpoint.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "current",
            "type": "SkyMediaBreakpoints"
          },
          { "kind": "class-property", "name": "destroy", "type": "void" },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Sets the container element to watch. The `SkyResizeObserverMediaQueryService` will only observe one element at a time. Any previous subscriptions will be unsubscribed when a new element is observed.",
            "kind": "class-property",
            "name": "observe",
            "type": "SkyResizeObserverMediaQueryService"
          },
          {
            "description": "Subscribes to element size changes that cross breakpoints.",
            "kind": "class-property",
            "name": "subscribe",
            "type": "Subscription"
          },
          {
            "description": "Stop watching the container element and remove any added classes.",
            "kind": "class-property",
            "name": "unobserve",
            "type": "void"
          }
        ],
        "deprecationReason": "Use the `SkyResponsiveHostDirective` instead.",
        "description": "Acts like `SkyMediaQueryService` for a container element, emitting the same responsive breakpoints.",
        "filePath": "libs/components/core/src/lib/modules/resize-observer/resize-observer-media-query.service.ts",
        "isDeprecated": true,
        "kind": "service",
        "name": "SkyResizeObserverMediaQueryService"
      },
      {
        "anchorId": "class_sky-resize-observer-service",
        "children": [
          {
            "description": "Create rxjs observable to get size changes for an element ref.",
            "kind": "class-method",
            "name": "observe",
            "parameters": [{ "name": "element", "type": "ElementRef<any>" }],
            "type": "Observable<ResizeObserverEntry>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyResizeObserverService"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Create rxjs observable to get size changes for an element ref.",
            "kind": "class-property",
            "name": "observe",
            "type": "Observable<ResizeObserverEntry>"
          }
        ],
        "description": "Service to create rxjs observables for changes to the content box dimensions of elements.",
        "filePath": "libs/components/core/src/lib/modules/resize-observer/resize-observer.service.ts",
        "kind": "service",
        "name": "SkyResizeObserverService"
      },
      {
        "anchorId": "class_sky-screen-reader-label-directive",
        "children": [
          {
            "description": "Indicates if the label should be created in the DOM.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "createLabel",
            "type": "boolean"
          }
        ],
        "description": "Adds the element to a screen reader only section of the body. This prevents components' DOM from including text only intended for screen readers.",
        "filePath": "libs/components/core/src/lib/modules/screen-reader-label/screen-reader-label.directive.ts",
        "isInternal": true,
        "kind": "directive",
        "name": "SkyScreenReaderLabelDirective",
        "selector": "[skyScreenReaderLabel]"
      },
      {
        "anchorId": "interface_sky-scroll-shadow-event-args",
        "children": [
          {
            "kind": "interface-property",
            "name": "bottomShadow",
            "type": "string"
          },
          {
            "kind": "interface-property",
            "name": "topShadow",
            "type": "string"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/scroll-shadow/scroll-shadow-event-args.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyScrollShadowEventArgs"
      },
      {
        "anchorId": "class_sky-scroll-shadow-directive",
        "children": [
          {
            "kind": "directive-input",
            "name": "skyScrollShadowEnabled",
            "type": "boolean"
          },
          {
            "kind": "directive-output",
            "name": "skyScrollShadow",
            "type": "EventEmitter<SkyScrollShadowEventArgs>"
          }
        ],
        "description": "Raises an event when the box shadow for a component's header or footer should be adjusted based on the scroll position of the host element.",
        "filePath": "libs/components/core/src/lib/modules/scroll-shadow/scroll-shadow.directive.ts",
        "isInternal": true,
        "kind": "directive",
        "name": "SkyScrollShadowDirective",
        "selector": "[skyScrollShadow]"
      },
      {
        "anchorId": "class_sky-scrollable-host-service",
        "children": [
          {
            "description": "Returns the given element's current scrollable host",
            "kind": "class-method",
            "name": "getScrollableHost",
            "parameters": [
              {
                "description": "The element whose scrollable host is being requested",
                "name": "elementRef",
                "type": "ElementRef<any>"
              }
            ],
            "type": "HTMLElement | Window"
          },
          {
            "description": "Returns an observable which emits the given element's current scrollable host",
            "kind": "class-method",
            "name": "watchScrollableHost",
            "parameters": [
              {
                "description": "The element whose scrollable host is being requested",
                "name": "elementRef",
                "type": "ElementRef<any>"
              }
            ],
            "type": "Observable<HTMLElement | Window>"
          },
          {
            "kind": "class-method",
            "name": "watchScrollableHostClipPathChanges",
            "parameters": [{ "name": "elementRef", "type": "ElementRef<any>" }],
            "type": "Observable<string>"
          },
          {
            "description": "Returns an observable which emits whenever the element's scrollable host emits a scroll event. The observable will always emit the scroll events from the elements current scrollable host and will update based on any scrollable host changes. The observable will also emit once whenever the scrollable host changes.",
            "kind": "class-method",
            "name": "watchScrollableHostScrollEvents",
            "parameters": [
              {
                "description": "The element whose scrollable host scroll events are being requested",
                "name": "elementRef",
                "type": "ElementRef<any>"
              }
            ],
            "type": "Observable<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyScrollableHostService"
          },
          {
            "description": "Returns the given element's current scrollable host",
            "kind": "class-property",
            "name": "getScrollableHost",
            "type": "HTMLElement | Window"
          },
          {
            "description": "Returns an observable which emits the given element's current scrollable host",
            "kind": "class-property",
            "name": "watchScrollableHost",
            "type": "Observable<HTMLElement | Window>"
          },
          {
            "kind": "class-property",
            "name": "watchScrollableHostClipPathChanges",
            "type": "Observable<string>"
          },
          {
            "description": "Returns an observable which emits whenever the element's scrollable host emits a scroll event. The observable will always emit the scroll events from the elements current scrollable host and will update based on any scrollable host changes. The observable will also emit once whenever the scrollable host changes.",
            "kind": "class-property",
            "name": "watchScrollableHostScrollEvents",
            "type": "Observable<void>"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/scrollable-host/scrollable-host.service.ts",
        "kind": "service",
        "name": "SkyScrollableHostService"
      },
      {
        "anchorId": "variable_sky-stacking-context",
        "filePath": "libs/components/core/src/lib/modules/stacking-context/stacking-context-token.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "SKY_STACKING_CONTEXT",
        "type": "InjectionToken<SkyStackingContext>"
      },
      {
        "anchorId": "interface_sky-stacking-context",
        "children": [
          {
            "kind": "interface-property",
            "name": "zIndex",
            "type": "Observable<number>"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/stacking-context/stacking-context.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyStackingContext"
      },
      {
        "anchorId": "interface_sky-app-set-title-args",
        "children": [
          {
            "kind": "interface-property",
            "name": "titleParts",
            "type": "string[]"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/title/set-title-args.ts",
        "kind": "interface",
        "name": "SkyAppSetTitleArgs"
      },
      {
        "anchorId": "class_sky-app-title-service",
        "children": [
          {
            "description": "Sets the title on the current window.",
            "kind": "class-method",
            "name": "setTitle",
            "parameters": [
              {
                "description": "An array of title parts. The parts will be concatenated with a hyphen between each part.",
                "name": "args",
                "type": "undefined | SkyAppSetTitleArgs"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppTitleService"
          },
          {
            "description": "Sets the title on the current window.",
            "kind": "class-property",
            "name": "setTitle",
            "type": "void"
          }
        ],
        "description": "Provides a method for setting a formatted title on the current window.",
        "filePath": "libs/components/core/src/lib/modules/title/title.service.ts",
        "kind": "service",
        "name": "SkyAppTitleService"
      },
      {
        "anchorId": "class_sky-trim-directive",
        "description": "Trims whitespace in each text node that is a direct descendent of the current element.",
        "filePath": "libs/components/core/src/lib/modules/trim/trim.directive.ts",
        "kind": "directive",
        "name": "SkyTrimDirective",
        "selector": "[skyTrim]"
      },
      {
        "anchorId": "class_sky-trim-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTrimModule"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/trim/trim.module.ts",
        "kind": "module",
        "name": "SkyTrimModule"
      },
      {
        "anchorId": "class_sky-uiconfig-service",
        "children": [
          {
            "kind": "class-method",
            "name": "getConfig",
            "parameters": [
              { "name": "key", "type": "string" },
              { "isOptional": true, "name": "defaultConfig", "type": "any" }
            ],
            "type": "Observable<any>"
          },
          {
            "kind": "class-method",
            "name": "setConfig",
            "parameters": [
              { "name": "key", "type": "string" },
              { "name": "value", "type": "any" }
            ],
            "type": "Observable<any>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyUIConfigService"
          },
          {
            "kind": "class-property",
            "name": "getConfig",
            "type": "Observable<any>"
          },
          {
            "kind": "class-property",
            "name": "setConfig",
            "type": "Observable<any>"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/ui-config/ui-config.service.ts",
        "kind": "service",
        "name": "SkyUIConfigService"
      },
      {
        "anchorId": "class_sky-viewkeeper-host-options",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyViewkeeperHostOptions"
          },
          {
            "description": "The element that defines the bounds in which to keep the element in view. When the boundary element is scrolled out of view, the viewkeeper element will be scrolled out of view.",
            "kind": "class-property",
            "name": "boundaryEl",
            "type": "HTMLElement"
          },
          {
            "description": "The element to keep in view.",
            "kind": "class-property",
            "name": "el",
            "type": "HTMLElement"
          },
          {
            "description": "The scrollable parent where the viewkeeper resides. It should listen to and be positioned within the parent.",
            "kind": "class-property",
            "name": "scrollableHost",
            "type": "HTMLElement"
          },
          {
            "description": "Sets the width of the viewkeeper element to the width of its host element. Otherwise, if the element does not have an explicit width specified, the element would collapse horizontally as a result of fixing the element to the top of the viewport.",
            "kind": "class-property",
            "name": "setWidth",
            "type": "boolean"
          },
          {
            "description": "Reserved space in pixels above the viewkeeper element.",
            "kind": "class-property",
            "name": "verticalOffset",
            "type": "number"
          },
          {
            "description": "The element under which the viewkeeper element should be fixed. Typically this is another viewkeeper element that is above the current viewkeeper element in the same boundary element.",
            "kind": "class-property",
            "name": "verticalOffsetEl",
            "type": "HTMLElement"
          },
          {
            "description": "Reserved space in pixels at the top of the viewport.",
            "kind": "class-property",
            "name": "viewportMarginTop",
            "type": "number"
          }
        ],
        "description": "Options for creating a viewkeeper instance.",
        "filePath": "libs/components/core/src/lib/modules/viewkeeper/viewkeeper-host-options.ts",
        "kind": "service",
        "name": "SkyViewkeeperHostOptions"
      },
      {
        "anchorId": "interface_sky-viewkeeper-options",
        "children": [
          {
            "description": "The element that defines the bounds in which to keep the element in view. When the boundary element is scrolled out of view, the viewkeeper element will be scrolled out of view.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "boundaryEl",
            "type": "HTMLElement"
          },
          {
            "description": "The element to keep in view.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "el",
            "type": "HTMLElement"
          },
          {
            "description": "The scrollable parent where the viewkeeper resides. It should listen to and be positioned within the parent.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "scrollableHost",
            "type": "HTMLElement"
          },
          {
            "description": "Sets the width of the viewkeeper element to the width of its host element. Otherwise, if the element does not have an explicit width specified, the element would collapse horizontally as a result of fixing the element to the top of the viewport.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "setWidth",
            "type": "boolean"
          },
          {
            "description": "Reserved space in pixels above the viewkeeper element.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "verticalOffset",
            "type": "number"
          },
          {
            "description": "The element under which the viewkeeper element should be fixed. Typically this is another viewkeeper element that is above the current viewkeeper element in the same boundary element.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "verticalOffsetEl",
            "type": "HTMLElement"
          },
          {
            "description": "Reserved space in pixels at the top of the viewport.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "viewportMarginTop",
            "type": "number"
          }
        ],
        "description": "Options for creating a viewkeeper instance.",
        "filePath": "libs/components/core/src/lib/modules/viewkeeper/viewkeeper-options.ts",
        "kind": "interface",
        "name": "SkyViewkeeperOptions"
      },
      {
        "anchorId": "class_sky-viewkeeper-directive",
        "children": [
          {
            "kind": "directive-input",
            "name": "skyViewkeeper",
            "type": "undefined | string[]"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/viewkeeper/viewkeeper.directive.ts",
        "kind": "directive",
        "name": "SkyViewkeeperDirective",
        "selector": "[skyViewkeeper]"
      },
      {
        "anchorId": "class_sky-viewkeeper-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyViewkeeperModule"
          }
        ],
        "filePath": "libs/components/core/src/lib/modules/viewkeeper/viewkeeper.module.ts",
        "kind": "module",
        "name": "SkyViewkeeperModule"
      },
      {
        "anchorId": "class_sky-viewkeeper-service",
        "children": [
          {
            "kind": "class-method",
            "name": "create",
            "parameters": [
              {
                "description": "Creates a viewkeeper instance, applying host options where applicable.",
                "name": "options",
                "type": "SkyViewkeeperOptions"
              }
            ],
            "type": "SkyViewkeeper"
          },
          {
            "description": "Destroys a viewkeeper instance.",
            "kind": "class-method",
            "name": "destroy",
            "parameters": [
              {
                "description": "Viewkeeper instance to destroy.",
                "name": "vk",
                "type": "SkyViewkeeper"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyViewkeeperService"
          },
          {
            "kind": "class-property",
            "name": "create",
            "type": "SkyViewkeeper"
          },
          {
            "description": "Destroys a viewkeeper instance.",
            "kind": "class-property",
            "name": "destroy",
            "type": "void"
          }
        ],
        "description": "Provides methods for creating and destroying viewkeeper instances.",
        "filePath": "libs/components/core/src/lib/modules/viewkeeper/viewkeeper.service.ts",
        "kind": "service",
        "name": "SkyViewkeeperService"
      },
      {
        "anchorId": "class_sky-app-window-ref",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppWindowRef"
          },
          {
            "description": "The global `window` variable.",
            "kind": "class-property",
            "name": "nativeWindow",
            "type": "any"
          }
        ],
        "description": "The application window reference service references the global window variable. After users inject SkyAppWindowRef into a component, they can use the service to interact with window properties and event handlers by referencing its nativeWindow property.",
        "filePath": "libs/components/core/src/lib/modules/window/window-ref.ts",
        "kind": "service",
        "name": "SkyAppWindowRef"
      },
      {
        "anchorId": "variable_version",
        "description": "Represents the version of @skyux/core.",
        "filePath": "libs/components/core/src/version.ts",
        "kind": "variable",
        "name": "VERSION",
        "type": "Version"
      }
    ],
    "@skyux/core/testing": [
      {
        "anchorId": "class_sky-core-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyCoreTestingModule"
          }
        ],
        "filePath": "libs/components/core/testing/src/legacy/core-testing.module.ts",
        "isInternal": true,
        "kind": "module",
        "name": "SkyCoreTestingModule"
      },
      {
        "anchorId": "class_mock-sky-media-query-service",
        "children": [
          {
            "kind": "class-method",
            "name": "destroy",
            "parameters": [],
            "type": "void"
          },
          {
            "kind": "class-method",
            "name": "fire",
            "parameters": [{ "name": "args", "type": "SkyMediaBreakpoints" }],
            "type": "void"
          },
          {
            "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
            "description": "Subscribes to screen size changes.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "subscribe",
            "parameters": [
              {
                "description": "Specifies a function that is called when breakpoints change.",
                "name": "listener",
                "type": "SkyMediaQueryListener"
              }
            ],
            "type": "Subscription"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "MockSkyMediaQueryService"
          },
          {
            "kind": "class-property",
            "name": "currentMockSubject",
            "type": "BehaviorSubject<SkyMediaBreakpoints>"
          },
          {
            "description": "The size for the `lg` breakpoint.",
            "defaultValue": "\"(min-width: 1200px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "lg",
            "type": "string"
          },
          {
            "description": "The size for the `md` breakpoint.",
            "defaultValue": "\"(min-width: 992px) and (max-width: 1199px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "md",
            "type": "string"
          },
          {
            "description": "The size for the `sm` breakpoint.",
            "defaultValue": "\"(min-width: 768px) and (max-width: 991px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "sm",
            "type": "string"
          },
          {
            "description": "The size for the `xs` breakpoint.",
            "defaultValue": "\"(max-width: 767px)\"",
            "isStatic": true,
            "kind": "class-property",
            "name": "xs",
            "type": "string"
          },
          {
            "description": "Emits when the breakpoint changes.",
            "kind": "class-property",
            "name": "breakpointChange",
            "type": "Observable<\"xs\" | \"sm\" | \"md\" | \"lg\">"
          },
          {
            "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
            "description": "Returns the current breakpoint.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "current",
            "type": "SkyMediaBreakpoints"
          },
          { "kind": "class-property", "name": "destroy", "type": "void" },
          { "kind": "class-property", "name": "fire", "type": "void" },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "deprecationReason": "Subscribe to the `breakpointChange` observable instead.",
            "description": "Subscribes to screen size changes.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "subscribe",
            "type": "Subscription"
          }
        ],
        "deprecationReason": "Use `provideSkyMediaQueryTesting()` coupled with `SkyMediaQueryTestingController`.",
        "filePath": "libs/components/core/testing/src/legacy/mock-media-query.service.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "service",
        "name": "MockSkyMediaQueryService"
      },
      {
        "anchorId": "class_mock-sky-uiconfig-service",
        "children": [
          {
            "kind": "class-method",
            "name": "getConfig",
            "parameters": [
              { "name": "key", "type": "string" },
              { "isOptional": true, "name": "defaultConfig", "type": "any" }
            ],
            "type": "Observable<any>"
          },
          {
            "kind": "class-method",
            "name": "setConfig",
            "parameters": [
              { "name": "key", "type": "string" },
              { "name": "value", "type": "any" }
            ],
            "type": "Observable<any>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "MockSkyUIConfigService"
          },
          {
            "kind": "class-property",
            "name": "getConfig",
            "type": "Observable<any>"
          },
          {
            "kind": "class-property",
            "name": "setConfig",
            "type": "Observable<any>"
          }
        ],
        "filePath": "libs/components/core/testing/src/legacy/mock-ui-config.service.ts",
        "isInternal": true,
        "kind": "service",
        "name": "MockSkyUIConfigService"
      },
      {
        "anchorId": "variable_mock-resize-observer-entry",
        "filePath": "libs/components/core/testing/src/legacy/resize-observer-mock.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "mockResizeObserverEntry",
        "type": "ResizeObserverEntry"
      },
      {
        "anchorId": "variable_mock-resize-observer-handle",
        "filePath": "libs/components/core/testing/src/legacy/resize-observer-mock.ts",
        "isInternal": true,
        "kind": "variable",
        "name": "mockResizeObserverHandle",
        "type": "Object"
      },
      {
        "anchorId": "function_mock-resize-observer",
        "filePath": "libs/components/core/testing/src/legacy/resize-observer-mock.ts",
        "isInternal": true,
        "kind": "function",
        "name": "mockResizeObserver",
        "parameters": [],
        "type": "void"
      },
      {
        "anchorId": "class_sky-help-testing-controller",
        "children": [
          {
            "description": "Close the current help.",
            "kind": "class-method",
            "name": "closeHelp",
            "parameters": [],
            "type": "void"
          },
          {
            "description": "Validates the current help key and throws an error if the current help key does not match the expected help key.",
            "kind": "class-method",
            "name": "expectCurrentHelpKey",
            "parameters": [
              {
                "description": "The expected help key.",
                "name": "expectedHelpKey",
                "type": "undefined | string"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHelpTestingController"
          },
          {
            "description": "Close the current help.",
            "kind": "class-property",
            "name": "closeHelp",
            "type": "void"
          },
          {
            "description": "Validates the current help key and throws an error if the current help key does not match the expected help key.",
            "kind": "class-property",
            "name": "expectCurrentHelpKey",
            "type": "void"
          }
        ],
        "description": "Provides methods for validating global help in unit tests.",
        "filePath": "libs/components/core/testing/src/modules/help/help-testing-controller.ts",
        "kind": "class",
        "name": "SkyHelpTestingController"
      },
      {
        "anchorId": "class_sky-help-testing-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHelpTestingModule"
          }
        ],
        "description": "Mocks SkyHelpService to enable testing of global help.",
        "filePath": "libs/components/core/testing/src/modules/help/help-testing.module.ts",
        "kind": "module",
        "name": "SkyHelpTestingModule"
      },
      {
        "anchorId": "class_sky-media-query-testing-controller",
        "children": [
          {
            "description": "Emits the provided breakpoint to all subscribers.",
            "kind": "class-method",
            "name": "setBreakpoint",
            "parameters": [
              {
                "name": "breakpoint",
                "type": "\"xs\" | \"sm\" | \"md\" | \"lg\""
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyMediaQueryTestingController"
          },
          {
            "description": "Emits the provided breakpoint to all subscribers.",
            "kind": "class-property",
            "name": "setBreakpoint",
            "type": "void"
          }
        ],
        "description": "A controller to be injected into tests, which mocks the `SkyMediaQueryService` and handles interactions with breakpoints.",
        "filePath": "libs/components/core/testing/src/modules/media-query/media-query-testing-controller.ts",
        "kind": "service",
        "name": "SkyMediaQueryTestingController"
      },
      {
        "anchorId": "function_provide-sky-media-query-testing",
        "description": "Adds mocks to allow interactions with breakpoints in tests.",
        "filePath": "libs/components/core/testing/src/modules/media-query/provide-media-query-testing.ts",
        "kind": "function",
        "name": "provideSkyMediaQueryTesting",
        "parameters": [],
        "type": "Provider[]"
      },
      {
        "anchorId": "interface_sky-overlay-harness-filters",
        "children": [
          {
            "description": "Only find instances whose `data-sky-id` attribute matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "dataSkyId",
            "type": "string | RegExp"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of SkyOverlayHarness instances.",
        "filePath": "libs/components/core/testing/src/modules/overlay/overlay-harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyOverlayHarnessFilters"
      },
      {
        "anchorId": "class_sky-overlay-harness",
        "children": [
          {
            "description": "Returns a child harness or throws an error if not found.",
            "kind": "class-method",
            "name": "queryHarness",
            "parameters": [{ "name": "query", "type": "HarnessQuery<T>" }],
            "type": "Promise<T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Returns child harnesses.",
            "kind": "class-method",
            "name": "queryHarnesses",
            "parameters": [{ "name": "harness", "type": "HarnessQuery<T>" }],
            "type": "Promise<T[]>",
            "typeParameters": "<T>"
          },
          {
            "description": "Returns a child harness or null if not found.",
            "kind": "class-method",
            "name": "queryHarnessOrNull",
            "parameters": [{ "name": "query", "type": "HarnessQuery<T>" }],
            "type": "Promise<null | T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Returns a child test element or throws an error if not found.",
            "kind": "class-method",
            "name": "querySelector",
            "parameters": [{ "name": "selector", "type": "string" }],
            "type": "Promise<null | TestElement>"
          },
          {
            "description": "Returns child test elements.",
            "kind": "class-method",
            "name": "querySelectorAll",
            "parameters": [{ "name": "selector", "type": "string" }],
            "type": "Promise<TestElement[]>"
          },
          {
            "description": "Returns a child test element or null if not found.",
            "kind": "class-method",
            "name": "querySelectorOrNull",
            "parameters": [{ "name": "selector", "type": "string" }],
            "type": "Promise<null | TestElement>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyOverlayHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyOverlayHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyOverlayHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyOverlayHarness"
          },
          {
            "defaultValue": "'sky-overlay'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Returns a child harness or throws an error if not found.",
            "kind": "class-property",
            "name": "queryHarness",
            "type": "Promise<T>"
          },
          {
            "description": "Returns child harnesses.",
            "kind": "class-property",
            "name": "queryHarnesses",
            "type": "Promise<T[]>"
          },
          {
            "description": "Returns a child harness or null if not found.",
            "kind": "class-property",
            "name": "queryHarnessOrNull",
            "type": "Promise<null | T>"
          },
          {
            "description": "Returns a child test element or throws an error if not found.",
            "kind": "class-property",
            "name": "querySelector",
            "type": "Promise<null | TestElement>"
          },
          {
            "description": "Returns child test elements.",
            "kind": "class-property",
            "name": "querySelectorAll",
            "type": "Promise<TestElement[]>"
          },
          {
            "description": "Returns a child test element or null if not found.",
            "kind": "class-property",
            "name": "querySelectorOrNull",
            "type": "Promise<null | TestElement>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyOverlayHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyOverlayHarness>"
          }
        ],
        "description": "Harness for interacting with an overlay component in tests.",
        "filePath": "libs/components/core/testing/src/modules/overlay/overlay-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyOverlayHarness"
      },
      {
        "anchorId": "class_sky-component-harness",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyComponentHarness"
          }
        ],
        "filePath": "libs/components/core/testing/src/shared/component-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyComponentHarness"
      },
      {
        "anchorId": "interface_sky-harness-filters",
        "children": [
          {
            "description": "Only find instances whose `data-sky-id` attribute matches the given value.",
            "isOptional": true,
            "kind": "interface-property",
            "name": "dataSkyId",
            "type": "string | RegExp"
          }
        ],
        "description": "A set of criteria that can be used to filter a list of `SkyComponentHarness` instances.",
        "filePath": "libs/components/core/testing/src/shared/harness-filters.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyHarnessFilters"
      },
      {
        "anchorId": "class_sky-harness-utility",
        "children": [
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "getBackgroundImageUrl",
            "parameters": [{ "name": "el", "type": "TestElement" }],
            "type": "Promise<undefined | string>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyHarnessUtility"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "getBackgroundImageUrl",
            "type": "Promise<undefined | string>"
          }
        ],
        "filePath": "libs/components/core/testing/src/shared/harness-utility.ts",
        "kind": "class",
        "name": "SkyHarnessUtility"
      },
      {
        "anchorId": "class_sky-input-harness",
        "children": [
          {
            "description": "Blurs the input.",
            "kind": "class-method",
            "name": "blur",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clears the input value.",
            "kind": "class-method",
            "name": "clear",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the input.",
            "kind": "class-method",
            "name": "focus",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Gets the value of the input.",
            "kind": "class-method",
            "name": "getValue",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Whether the input is disabled.",
            "kind": "class-method",
            "name": "isDisabled",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the input is focused.",
            "kind": "class-method",
            "name": "isFocused",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Sets the value of the input. The value will be set by simulating key presses that correspond to the given value.",
            "kind": "class-method",
            "name": "setValue",
            "parameters": [{ "name": "value", "type": "string" }],
            "type": "Promise<void>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyInputHarness"
          },
          {
            "description": "Blurs the input.",
            "kind": "class-property",
            "name": "blur",
            "type": "Promise<void>"
          },
          {
            "description": "Clears the input value.",
            "kind": "class-property",
            "name": "clear",
            "type": "Promise<void>"
          },
          {
            "description": "Focuses the input.",
            "kind": "class-property",
            "name": "focus",
            "type": "Promise<void>"
          },
          {
            "description": "Gets the value of the input.",
            "kind": "class-property",
            "name": "getValue",
            "type": "Promise<string>"
          },
          {
            "description": "Whether the input is disabled.",
            "kind": "class-property",
            "name": "isDisabled",
            "type": "Promise<boolean>"
          },
          {
            "description": "Whether the input is focused.",
            "kind": "class-property",
            "name": "isFocused",
            "type": "Promise<boolean>"
          },
          {
            "description": "Sets the value of the input. The value will be set by simulating key presses that correspond to the given value.",
            "kind": "class-property",
            "name": "setValue",
            "type": "Promise<void>"
          }
        ],
        "description": "Harness used to interact with native input elements in tests.",
        "filePath": "libs/components/core/testing/src/shared/input-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyInputHarness"
      },
      {
        "anchorId": "class_sky-queryable-component-harness",
        "children": [
          {
            "description": "Returns a child harness or throws an error if not found.",
            "kind": "class-method",
            "name": "queryHarness",
            "parameters": [{ "name": "query", "type": "HarnessQuery<T>" }],
            "type": "Promise<T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Returns child harnesses.",
            "kind": "class-method",
            "name": "queryHarnesses",
            "parameters": [{ "name": "harness", "type": "HarnessQuery<T>" }],
            "type": "Promise<T[]>",
            "typeParameters": "<T>"
          },
          {
            "description": "Returns a child harness or null if not found.",
            "kind": "class-method",
            "name": "queryHarnessOrNull",
            "parameters": [{ "name": "query", "type": "HarnessQuery<T>" }],
            "type": "Promise<null | T>",
            "typeParameters": "<T>"
          },
          {
            "description": "Returns a child test element or throws an error if not found.",
            "kind": "class-method",
            "name": "querySelector",
            "parameters": [{ "name": "selector", "type": "string" }],
            "type": "Promise<null | TestElement>"
          },
          {
            "description": "Returns child test elements.",
            "kind": "class-method",
            "name": "querySelectorAll",
            "parameters": [{ "name": "selector", "type": "string" }],
            "type": "Promise<TestElement[]>"
          },
          {
            "description": "Returns a child test element or null if not found.",
            "kind": "class-method",
            "name": "querySelectorOrNull",
            "parameters": [{ "name": "selector", "type": "string" }],
            "type": "Promise<null | TestElement>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyQueryableComponentHarness"
          },
          {
            "description": "Returns a child harness or throws an error if not found.",
            "kind": "class-property",
            "name": "queryHarness",
            "type": "Promise<T>"
          },
          {
            "description": "Returns child harnesses.",
            "kind": "class-property",
            "name": "queryHarnesses",
            "type": "Promise<T[]>"
          },
          {
            "description": "Returns a child harness or null if not found.",
            "kind": "class-property",
            "name": "queryHarnessOrNull",
            "type": "Promise<null | T>"
          },
          {
            "description": "Returns a child test element or throws an error if not found.",
            "kind": "class-property",
            "name": "querySelector",
            "type": "Promise<null | TestElement>"
          },
          {
            "description": "Returns child test elements.",
            "kind": "class-property",
            "name": "querySelectorAll",
            "type": "Promise<TestElement[]>"
          },
          {
            "description": "Returns a child test element or null if not found.",
            "kind": "class-property",
            "name": "querySelectorOrNull",
            "type": "Promise<null | TestElement>"
          }
        ],
        "filePath": "libs/components/core/testing/src/shared/queryable-component-harness.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyQueryableComponentHarness"
      }
    ],
    "@skyux/i18n": [
      {
        "anchorId": "class_sky-i18n-currency-format-service",
        "children": [
          {
            "description": "Gets a currency's format.",
            "kind": "class-method",
            "name": "getCurrencyFormat",
            "parameters": [
              {
                "defaultValue": "DEFAULT_CURRENCY_CODE",
                "description": "the ISO 4217 Currency Code. Defaults to 'USD'.",
                "name": "isoCurrencyCode",
                "type": "string"
              },
              {
                "defaultValue": "DEFAULT_LOCALE",
                "description": "the locale. Defaults to 'en-US'. Examples: 'en-US', 'en-GB', 'fr-FR'.",
                "name": "locale",
                "type": "string"
              }
            ],
            "type": "SkyI18nCurrencyFormat"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyI18nCurrencyFormatService"
          },
          {
            "description": "Gets a currency's format.",
            "kind": "class-property",
            "name": "getCurrencyFormat",
            "type": "SkyI18nCurrencyFormat"
          }
        ],
        "description": "Used to format a currency within a given locale.",
        "filePath": "lib/modules/i18n/currency/currency-format.service.ts",
        "kind": "service",
        "name": "SkyI18nCurrencyFormatService"
      },
      {
        "anchorId": "interface_sky-i18n-currency-format",
        "children": [
          {
            "description": "The fractional decimal character.",
            "kind": "interface-property",
            "name": "decimalCharacter",
            "type": "string"
          },
          {
            "description": "The grouping character, e.g. '(1,000)'.",
            "kind": "interface-property",
            "name": "groupCharacter",
            "type": "string"
          },
          {
            "description": "The ISO 4217 currency code.",
            "kind": "interface-property",
            "name": "isoCurrencyCode",
            "type": "string"
          },
          {
            "description": "The locale.",
            "kind": "interface-property",
            "name": "locale",
            "type": "string"
          },
          {
            "description": "The numeric precision (i.e., decimal places).",
            "kind": "interface-property",
            "name": "precision",
            "type": "number"
          },
          {
            "description": "The currency symbol (e.g., '$').",
            "kind": "interface-property",
            "name": "symbol",
            "type": "string"
          },
          {
            "description": "The symbol's location relative to the number.",
            "kind": "interface-property",
            "name": "symbolLocation",
            "type": "SkyI18nCurrencySymbolLocation"
          }
        ],
        "description": "Used to describe a locale-specific currency format.",
        "filePath": "lib/modules/i18n/currency/currency-format.ts",
        "kind": "interface",
        "name": "SkyI18nCurrencyFormat"
      },
      {
        "anchorId": "type-alias_sky-i18n-currency-symbol-location",
        "description": "The currency symbol's location.",
        "filePath": "lib/modules/i18n/currency/currency-symbol-location.ts",
        "kind": "type-alias",
        "name": "SkyI18nCurrencySymbolLocation",
        "type": "\"prefix\" | \"suffix\""
      },
      {
        "anchorId": "function_get-lib-string-for-locale",
        "filePath": "lib/modules/i18n/get-lib-string-for-locale.ts",
        "isInternal": true,
        "kind": "function",
        "name": "getLibStringForLocale",
        "parameters": [
          { "name": "resources", "type": "Record<string, SkyLibResources>" },
          { "name": "preferredLocale", "type": "string" },
          { "name": "name", "type": "string" }
        ],
        "type": "string | undefined"
      },
      {
        "anchorId": "function_get-string-for-locale",
        "deprecationReason": "Use `getLibStringForLocale` instead.",
        "filePath": "lib/modules/i18n/get-string-for-locale.ts",
        "isDeprecated": true,
        "isInternal": true,
        "kind": "function",
        "name": "getStringForLocale",
        "parameters": [
          {
            "name": "resources",
            "type": "Record<string, Record<string, string>>"
          },
          { "name": "preferredLocale", "type": "string" },
          { "name": "name", "type": "string" }
        ],
        "type": "string | undefined"
      },
      {
        "anchorId": "class_sky-i18n-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyI18nModule"
          }
        ],
        "filePath": "lib/modules/i18n/i18n.module.ts",
        "kind": "module",
        "name": "SkyI18nModule"
      },
      {
        "anchorId": "class_sky-intl-date-formatter",
        "children": [
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "format",
            "parameters": [
              { "name": "date", "type": "Date" },
              { "name": "locale", "type": "string" },
              { "name": "pattern", "type": "string" }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIntlDateFormatter"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "format",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/i18n/intl-date-formatter.ts",
        "kind": "class",
        "name": "SkyIntlDateFormatter"
      },
      {
        "anchorId": "enum_sky-intl-number-format-style",
        "filePath": "lib/modules/i18n/intl-number-format-style.ts",
        "kind": "enumeration",
        "children": [
          { "kind": "enum-member", "name": "Currency", "type": "2" },
          { "kind": "enum-member", "name": "Decimal", "type": "0" },
          { "kind": "enum-member", "name": "Percent", "type": "1" }
        ],
        "name": "SkyIntlNumberFormatStyle"
      },
      {
        "anchorId": "class_sky-intl-number-formatter",
        "children": [
          {
            "isStatic": true,
            "kind": "class-method",
            "name": "format",
            "parameters": [
              { "name": "num", "type": "number" },
              { "name": "locale", "type": "string" },
              { "name": "style", "type": "SkyIntlNumberFormatStyle" },
              {
                "defaultValue": "{}",
                "name": "opts",
                "type": "SkyIntlNumberFormatterOptions"
              }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIntlNumberFormatter"
          },
          {
            "isStatic": true,
            "kind": "class-property",
            "name": "format",
            "type": "string"
          }
        ],
        "filePath": "lib/modules/i18n/intl-number-formatter.ts",
        "kind": "class",
        "name": "SkyIntlNumberFormatter"
      },
      {
        "anchorId": "class_sky-lib-resources-provider",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLibResourcesProvider"
          },
          { "kind": "class-property", "name": "getString", "type": "Function" }
        ],
        "deprecationReason": "`SkyLibResourcesProvider` is no longer needed and will be removed in a future major version of SKY UX.",
        "filePath": "lib/modules/i18n/lib-resources-provider.ts",
        "isDeprecated": true,
        "kind": "class",
        "name": "SkyLibResourcesProvider"
      },
      {
        "anchorId": "variable_sky-lib-resources-providers",
        "deprecationReason": "`SKY_LIB_RESOURCES_PROVIDERS` is no longer needed and will be removed in a future major version of SKY UX.",
        "filePath": "lib/modules/i18n/lib-resources-providers-token.ts",
        "isDeprecated": true,
        "kind": "variable",
        "name": "SKY_LIB_RESOURCES_PROVIDERS",
        "type": "InjectionToken<SkyLibResourcesProvider[]>"
      },
      {
        "anchorId": "class_sky-lib-resources-pipe",
        "children": [
          {
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              { "name": "name", "type": "string" },
              { "name": "args", "type": "any[]" }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLibResourcesPipe"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          { "kind": "class-property", "name": "transform", "type": "string" }
        ],
        "filePath": "lib/modules/i18n/lib-resources.pipe.ts",
        "kind": "pipe",
        "name": "SkyLibResourcesPipe",
        "templateBindingName": "skyLibResources"
      },
      {
        "anchorId": "class_sky-lib-resources-service",
        "children": [
          {
            "description": "Gets a resource string based on its name.",
            "kind": "class-method",
            "name": "getString",
            "parameters": [
              {
                "description": "The name of the resource string.",
                "name": "name",
                "type": "string"
              },
              {
                "description": "Any templated args.",
                "name": "args",
                "type": "any[]"
              }
            ],
            "type": "Observable<string>"
          },
          {
            "kind": "class-method",
            "name": "getStringForLocale",
            "parameters": [
              { "name": "info", "type": "SkyAppLocaleInfo" },
              { "name": "name", "type": "string" },
              { "name": "args", "type": "any[]" }
            ],
            "type": "string"
          },
          {
            "codeExample": "service.getStrings({",
            "codeExampleLanguage": "typescript",
            "description": "Gets a Resource String Dictionary.  This is similar to forkJoin's dictionary syntax.",
            "kind": "class-method",
            "name": "getStrings",
            "parameters": [
              {
                "description": "a Record of **SomeObjectKey** to a Value that is either   - (1) **ResourceKey**   - (2) or an **Array** where the first item is the **ResourceKey** and the other items are template args.",
                "name": "dictionary",
                "type": "T"
              }
            ],
            "type": "Observable<{ [K in string | number | symbol]: string }>",
            "typeParameters": "<T>"
          },
          {
            "description": "Adds locale resources to be used by library components.",
            "isStatic": true,
            "kind": "class-method",
            "name": "addResources",
            "parameters": [
              {
                "name": "localeResources",
                "type": "Record<string, SkyLibResources>"
              }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyLibResourcesService"
          },
          {
            "description": "Gets a resource string based on its name.",
            "kind": "class-property",
            "name": "getString",
            "type": "Observable<string>"
          },
          {
            "kind": "class-property",
            "name": "getStringForLocale",
            "type": "string"
          },
          {
            "codeExample": "service.getStrings({",
            "codeExampleLanguage": "typescript",
            "description": "Gets a Resource String Dictionary.  This is similar to forkJoin's dictionary syntax.",
            "kind": "class-property",
            "name": "getStrings",
            "type": "Observable<{ [K in string | number | symbol]: string }>"
          },
          {
            "description": "Adds locale resources to be used by library components.",
            "isStatic": true,
            "kind": "class-property",
            "name": "addResources",
            "type": "void"
          }
        ],
        "filePath": "lib/modules/i18n/lib-resources.service.ts",
        "kind": "service",
        "name": "SkyLibResourcesService"
      },
      {
        "anchorId": "type-alias_sky-lib-resources",
        "filePath": "lib/modules/i18n/lib-resources.ts",
        "kind": "type-alias",
        "name": "SkyLibResources",
        "type": "Record<string, Object>"
      },
      {
        "anchorId": "interface_sky-app-locale-info",
        "children": [
          { "kind": "interface-property", "name": "locale", "type": "string" }
        ],
        "filePath": "lib/modules/i18n/locale-info.ts",
        "kind": "interface",
        "name": "SkyAppLocaleInfo"
      },
      {
        "anchorId": "class_sky-app-locale-provider",
        "children": [
          {
            "kind": "class-method",
            "name": "getLocaleInfo",
            "parameters": [],
            "type": "Observable<SkyAppLocaleInfo>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppLocaleProvider"
          },
          {
            "kind": "class-property",
            "name": "defaultLocale",
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "getLocaleInfo",
            "type": "Observable<SkyAppLocaleInfo>"
          }
        ],
        "filePath": "lib/modules/i18n/locale-provider.ts",
        "kind": "service",
        "name": "SkyAppLocaleProvider"
      },
      {
        "anchorId": "class_sky-app-resource-name-provider",
        "children": [
          {
            "kind": "class-method",
            "name": "getResourceName",
            "parameters": [{ "name": "name", "type": "string" }],
            "type": "Observable<string>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppResourceNameProvider"
          },
          {
            "kind": "class-property",
            "name": "getResourceName",
            "type": "Observable<string>"
          }
        ],
        "filePath": "lib/modules/i18n/resource-name-provider.ts",
        "kind": "service",
        "name": "SkyAppResourceNameProvider"
      },
      {
        "anchorId": "class_sky-app-resources-pipe",
        "children": [
          {
            "description": "Transforms a named resource string into its value.",
            "kind": "class-method",
            "name": "transform",
            "parameters": [
              {
                "description": "The name of the resource string.",
                "name": "name",
                "type": "string"
              },
              { "name": "args", "type": "any[]" }
            ],
            "type": "string"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppResourcesPipe"
          },
          {
            "description": "A callback method that performs custom clean-up, invoked immediately before a directive, pipe, or service instance is destroyed.",
            "kind": "class-property",
            "name": "ngOnDestroy",
            "type": "void"
          },
          {
            "description": "Transforms a named resource string into its value.",
            "kind": "class-property",
            "name": "transform",
            "type": "string"
          }
        ],
        "description": "An Angular pipe for displaying a resource string.",
        "filePath": "lib/modules/i18n/resources.pipe.ts",
        "kind": "pipe",
        "name": "SkyAppResourcesPipe",
        "templateBindingName": "skyAppResources"
      },
      {
        "anchorId": "class_sky-app-resources-service",
        "children": [
          {
            "description": "Gets a resource string based on its name.",
            "kind": "class-method",
            "name": "getString",
            "parameters": [
              {
                "description": "The name of the resource string.",
                "name": "name",
                "type": "string"
              },
              {
                "description": "Any templated args.",
                "name": "args",
                "type": "any[]"
              }
            ],
            "type": "Observable<string>"
          },
          {
            "description": "Gets a resource string for a specific locale based on its name.",
            "kind": "class-method",
            "name": "getStringForLocale",
            "parameters": [
              {
                "description": "The locale to use.",
                "name": "localeInfo",
                "type": "SkyAppLocaleInfo"
              },
              {
                "description": "The name of the resource string.",
                "name": "name",
                "type": "string"
              },
              {
                "description": "Any templated args.",
                "name": "args",
                "type": "any[]"
              }
            ],
            "type": "Observable<string>"
          },
          {
            "codeExample": "service.getStrings({",
            "codeExampleLanguage": "typescript",
            "description": "Gets a Resource String Dictionary.  This is similar to forkJoin's dictionary syntax.",
            "kind": "class-method",
            "name": "getStrings",
            "parameters": [
              {
                "description": "a Record of **SomeObjectKey** to a Value that is either   - (1) **ResourceKey**   - (2) or an **Array** where the first item is the **ResourceKey** and the other items are template args.",
                "name": "dictionary",
                "type": "T"
              }
            ],
            "type": "Observable<{ [K in string | number | symbol]: string }>",
            "typeParameters": "<T>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyAppResourcesService"
          },
          {
            "description": "Gets a resource string based on its name.",
            "kind": "class-property",
            "name": "getString",
            "type": "Observable<string>"
          },
          {
            "description": "Gets a resource string for a specific locale based on its name.",
            "kind": "class-property",
            "name": "getStringForLocale",
            "type": "Observable<string>"
          },
          {
            "codeExample": "service.getStrings({",
            "codeExampleLanguage": "typescript",
            "description": "Gets a Resource String Dictionary.  This is similar to forkJoin's dictionary syntax.",
            "kind": "class-property",
            "name": "getStrings",
            "type": "Observable<{ [K in string | number | symbol]: string }>"
          }
        ],
        "description": "An Angular service for interacting with resource strings.",
        "filePath": "lib/modules/i18n/resources.service.ts",
        "kind": "service",
        "name": "SkyAppResourcesService"
      },
      {
        "anchorId": "type-alias_sky-app-resources",
        "filePath": "lib/modules/i18n/resources.ts",
        "kind": "type-alias",
        "name": "SkyAppResources",
        "type": "Record<string, Object>"
      }
    ],
    "@skyux/icon": [
      {
        "anchorId": "interface_sky-icon-stack-item",
        "children": [
          {
            "description": "The name of [the Font Awesome 4.7 icon](https://fontawesome.com/v4.7/icons/) to display. Do not specify the `fa fa-` classes.",
            "kind": "interface-property",
            "name": "icon",
            "type": "string"
          },
          {
            "description": "The type of icon to display. Specifying `fa` displays a Font Awesome icon, while specifying `skyux` displays an icon from the custom SKY UX icon font. Note that the custom SKY UX icon font is currently in beta.",
            "isDeprecated": true,
            "isOptional": true,
            "kind": "interface-property",
            "name": "iconType",
            "type": "SkyIconType"
          }
        ],
        "filePath": "libs/components/icon/src/lib/modules/icon/icon-stack-item.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyIconStackItem"
      },
      {
        "anchorId": "class_sky-icon-stack-component",
        "children": [
          {
            "description": "The icon to display at the bottom of the stack.",
            "kind": "directive-input",
            "name": "baseIcon",
            "type": "undefined | SkyIconStackItem"
          },
          {
            "description": "The size of the icon using [Font Awesome sizes](https://fontawesome.com/v4/examples/).",
            "kind": "directive-input",
            "name": "size",
            "type": "undefined | string"
          },
          {
            "description": "The icon to display at the top of the stack.",
            "kind": "directive-input",
            "name": "topIcon",
            "type": "undefined | SkyIconStackItem"
          }
        ],
        "filePath": "libs/components/icon/src/lib/modules/icon/icon-stack.component.ts",
        "isInternal": true,
        "kind": "component",
        "name": "SkyIconStackComponent",
        "selector": "sky-icon-stack"
      },
      {
        "anchorId": "class_sky-icon-component",
        "children": [
          {
            "description": "Whether to enforce a fixed width based on icon size. By default, icons of a specified size share a consistent height, but their widths vary and can throw off vertical alignment. Use a fixed width when you stack icons vertically, such as in lists.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "fixedWidth",
            "type": "undefined | boolean"
          },
          {
            "description": "The name of [the Font Awesome 4.7 icon](https://fontawesome.com/v4.7/icons/) or the SKY UX icon to display. When specifying a Font Awesome icon, do not prefix the name with `fa-`.",
            "kind": "directive-input",
            "name": "icon",
            "type": "undefined | string",
            "isRequired": true
          },
          {
            "description": "The name of the Blackbaud SVG icon to display. For internal use only.",
            "kind": "directive-input",
            "name": "iconName",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "The icon component now automatically infers which type of icon to use based on the current theme. This input will be removed in a future version.",
            "description": "The type of icon to display. Specifying `\"fa\"` displays a Font Awesome icon, while specifying `\"skyux\"` displays an icon from the custom SKY UX icon font. Note that the custom SKY UX icon font is currently in beta.",
            "defaultValue": "\"fa\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "iconType",
            "type": "undefined | SkyIconType"
          },
          {
            "description": "The size of the icon using [Font Awesome sizes](https://fontawesome.com/v4/examples/). Do not prefix the size with `fa-`.",
            "kind": "directive-input",
            "name": "size",
            "type": "undefined | string"
          },
          {
            "description": "The icon variant. If the variant doesn't exist for the specified icon, the normal icon is displayed. This property only applies when using SKY UX icons.",
            "kind": "directive-input",
            "name": "variant",
            "type": "undefined | SkyIconVariantType"
          }
        ],
        "filePath": "libs/components/icon/src/lib/modules/icon/icon.component.ts",
        "kind": "component",
        "name": "SkyIconComponent",
        "selector": "sky-icon"
      },
      {
        "anchorId": "class_sky-icon-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIconModule"
          }
        ],
        "filePath": "libs/components/icon/src/lib/modules/icon/icon.module.ts",
        "kind": "module",
        "name": "SkyIconModule"
      },
      {
        "anchorId": "type-alias_sky-icon-type",
        "filePath": "libs/components/icon/src/lib/modules/icon/types/icon-type.ts",
        "isDeprecated": true,
        "kind": "type-alias",
        "name": "SkyIconType",
        "type": "\"fa\" | \"skyux\""
      },
      {
        "anchorId": "type-alias_sky-icon-variant-type",
        "filePath": "libs/components/icon/src/lib/modules/icon/types/icon-variant-type.ts",
        "kind": "type-alias",
        "name": "SkyIconVariantType",
        "type": "\"line\" | \"solid\""
      }
    ],
    "@skyux/icon/testing": [
      {
        "anchorId": "interface_sky-icon-harness-filters",
        "description": "A set of criteria that can be used to filter a list of SkyIconHarness instances.",
        "filePath": "libs/components/icon/testing/src/modules/icon/icon-harness-filters.ts",
        "kind": "interface",
        "name": "SkyIconHarnessFilters"
      },
      {
        "anchorId": "class_sky-icon-harness",
        "children": [
          {
            "description": "Gets the icon name.",
            "kind": "class-method",
            "name": "getIconName",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the icon size.",
            "kind": "class-method",
            "name": "getIconSize",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "deprecationReason": "The `iconType` input is no longer used. This method will be removed in a future version.",
            "description": "Gets the icon type.",
            "isDeprecated": true,
            "kind": "class-method",
            "name": "getIconType",
            "parameters": [],
            "type": "Promise<string>"
          },
          {
            "description": "Gets if the icon is a variant.",
            "kind": "class-method",
            "name": "getVariant",
            "parameters": [],
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Whether the icon has fixed width.",
            "kind": "class-method",
            "name": "isFixedWidth",
            "parameters": [],
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyIconHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-method",
            "name": "with",
            "parameters": [
              { "name": "filters", "type": "SkyIconHarnessFilters" }
            ],
            "type": "HarnessPredicate<SkyIconHarness>"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyIconHarness"
          },
          {
            "defaultValue": "'sky-icon'",
            "isStatic": true,
            "kind": "class-property",
            "name": "hostSelector",
            "type": "string"
          },
          {
            "description": "Gets the icon name.",
            "kind": "class-property",
            "name": "getIconName",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Gets the icon size.",
            "kind": "class-property",
            "name": "getIconSize",
            "type": "Promise<undefined | string>"
          },
          {
            "deprecationReason": "The `iconType` input is no longer used. This method will be removed in a future version.",
            "description": "Gets the icon type.",
            "isDeprecated": true,
            "kind": "class-property",
            "name": "getIconType",
            "type": "Promise<string>"
          },
          {
            "description": "Gets if the icon is a variant.",
            "kind": "class-property",
            "name": "getVariant",
            "type": "Promise<undefined | string>"
          },
          {
            "description": "Whether the icon has fixed width.",
            "kind": "class-property",
            "name": "isFixedWidth",
            "type": "Promise<boolean>"
          },
          {
            "description": "Gets a `HarnessPredicate` that can be used to search for a `SkyIconHarness` that meets certain criteria.",
            "isStatic": true,
            "kind": "class-property",
            "name": "with",
            "type": "HarnessPredicate<SkyIconHarness>"
          }
        ],
        "description": "Harness for interacting with an icon component in tests.",
        "filePath": "libs/components/icon/testing/src/modules/icon/icon-harness.ts",
        "kind": "class",
        "name": "SkyIconHarness"
      }
    ],
    "@skyux/tabs": [
      {
        "anchorId": "class_sky-sectioned-form-section-component",
        "children": [
          {
            "description": "Whether the section is active when the form loads.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "active",
            "type": "undefined | boolean"
          },
          {
            "description": "The section header.",
            "kind": "directive-input",
            "name": "heading",
            "type": "undefined | string",
            "isRequired": true
          },
          {
            "description": "The number of items within the section. A counter appears beside the section header.",
            "kind": "directive-input",
            "name": "itemCount",
            "type": "undefined | number"
          }
        ],
        "description": "Creates an individual form to display as a section within the sectioned form.",
        "filePath": "src/lib/modules/sectioned-form/sectioned-form-section.component.ts",
        "kind": "component",
        "name": "SkySectionedFormSectionComponent",
        "selector": "sky-sectioned-form-section"
      },
      {
        "anchorId": "class_sky-sectioned-form-component",
        "children": [
          {
            "description": "Whether the sectioned form loads section content during initialization so that it displays content without moving around elements in the content container.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "maintainSectionContent",
            "type": "undefined | boolean"
          },
          {
            "kind": "directive-input",
            "name": "messageStream",
            "type": "Subject<SkySectionedFormMessage>"
          },
          {
            "description": "Fires when the active tab changes and emits the index of the active section. The index is based on the section's position when the form loads.",
            "kind": "directive-output",
            "name": "indexChanged",
            "type": "EventEmitter<number>"
          },
          {
            "description": "Fires when the sectioned form tabs are shown or hidden.",
            "kind": "directive-output",
            "name": "tabsVisibleChanged",
            "type": "EventEmitter<boolean>"
          }
        ],
        "description": "Creates a container for the sectioned forms.",
        "filePath": "src/lib/modules/sectioned-form/sectioned-form.component.ts",
        "kind": "component",
        "name": "SkySectionedFormComponent",
        "selector": "sky-sectioned-form"
      },
      {
        "anchorId": "class_sky-sectioned-form-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySectionedFormModule"
          }
        ],
        "filePath": "src/lib/modules/sectioned-form/sectioned-form.module.ts",
        "kind": "module",
        "name": "SkySectionedFormModule"
      },
      {
        "anchorId": "class_sky-sectioned-form-service",
        "children": [
          {
            "description": "Sets the current section's invalid state based on the `isInvalid` parameter. This method is used within a `sky-sectioned-form-section` element.",
            "kind": "class-method",
            "name": "invalidFieldChanged",
            "parameters": [
              { "name": "isInvalid", "type": "undefined | boolean" }
            ],
            "type": "void"
          },
          {
            "description": "Sets the current section's required state based on the `isRequired` parameter. This method is used within a `sky-sectioned-form-section` element.",
            "kind": "class-method",
            "name": "requiredFieldChanged",
            "parameters": [
              { "name": "isRequired", "type": "undefined | boolean" }
            ],
            "type": "void"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkySectionedFormService"
          },
          {
            "kind": "class-property",
            "name": "invalidChange",
            "type": "BehaviorSubject<undefined | boolean>"
          },
          {
            "kind": "class-property",
            "name": "requiredChange",
            "type": "BehaviorSubject<undefined | boolean>"
          },
          {
            "description": "Sets the current section's invalid state based on the `isInvalid` parameter. This method is used within a `sky-sectioned-form-section` element.",
            "kind": "class-property",
            "name": "invalidFieldChanged",
            "type": "void"
          },
          {
            "description": "Sets the current section's required state based on the `isRequired` parameter. This method is used within a `sky-sectioned-form-section` element.",
            "kind": "class-property",
            "name": "requiredFieldChanged",
            "type": "void"
          }
        ],
        "filePath": "src/lib/modules/sectioned-form/sectioned-form.service.ts",
        "kind": "service",
        "name": "SkySectionedFormService"
      },
      {
        "anchorId": "enum_sky-sectioned-form-message-type",
        "filePath": "src/lib/modules/sectioned-form/types/sectioned-form-message-type.ts",
        "kind": "enumeration",
        "children": [
          { "kind": "enum-member", "name": "ShowTabs", "type": "1" }
        ],
        "name": "SkySectionedFormMessageType"
      },
      {
        "anchorId": "interface_sky-sectioned-form-message",
        "children": [
          { "kind": "interface-property", "name": "type", "type": "ShowTabs" }
        ],
        "filePath": "src/lib/modules/sectioned-form/types/sectioned-form-message.ts",
        "kind": "interface",
        "name": "SkySectionedFormMessage"
      },
      {
        "anchorId": "type-alias_sky-tab-index",
        "filePath": "src/lib/modules/tabs/tab-index.ts",
        "kind": "type-alias",
        "name": "SkyTabIndex",
        "type": "string | number"
      },
      {
        "anchorId": "type-alias_sky-tab-layout-type",
        "filePath": "src/lib/modules/tabs/tab-layout-type.ts",
        "kind": "type-alias",
        "name": "SkyTabLayoutType",
        "type": "\"none\" | \"blocks\" | \"fit\" | \"list\""
      },
      {
        "anchorId": "class_sky-tab-component",
        "children": [
          {
            "description": "Whether to disable the tab.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "deprecationReason": "SKY UX no longer recommends adding counts to tabs.",
            "description": "Displays a counter beside the tab header. This input only applies when the tabset's `tabStyle` is `\"tabs\"`.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "tabHeaderCount",
            "type": "undefined | string"
          },
          {
            "description": "Whether the tab is active when the tabset loads. After initialization, the `active` property on the tabset component should be used to set the active tab.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "The tab layout that applies spacing to the tab container element. Use the layout that corresponds with the top-level component type used within the tab, or use `fit` to constrain the tab contents to the available viewport. Use `none` for custom content that does not adhere to predefined spacing or constraints.",
            "defaultValue": "\"none\"",
            "kind": "directive-input",
            "name": "layout",
            "type": "SkyTabLayoutType"
          },
          {
            "description": "The custom query parameter value for the tab. This works in conjunction with the tabset's `permalinkId` to distinguish the tab's unique state in the URL by generating a query parameter that is written as `?<queryParam>-active-tab=<sanitized-tab-heading`. By default, the query parameter's value is parsed automatically from the tab's heading text. This input only applies when the tabset's `tabStyle` is `\"tabs\"`.",
            "kind": "directive-input",
            "name": "permalinkValue",
            "type": "undefined | string"
          },
          {
            "description": "The tab header. When using tabs as the main navigation on a page, use [the Angular `Title` service](https://angular.io/docs/ts/latest/cookbook/set-document-title.html) and [the SKY UX `title` configuration property](https://developer.blackbaud.com/skyux/learn/reference/configuration#app) to reflect the tab header in the page title.",
            "kind": "directive-input",
            "name": "tabHeading",
            "type": "undefined | string",
            "isRequired": true
          },
          {
            "description": "The unique identifier for the tab. If not defined, the identifier is set to the position of the tab on load, starting with `0`.",
            "kind": "directive-input",
            "name": "tabIndexValue",
            "type": "undefined | SkyTabIndex"
          },
          {
            "description": "Fires when users click the button to close the tab. The close button is added to the tab when you specify a listener for this event. This event only applies when the tabset's `tabStyle` is `\"tabs\"`.",
            "kind": "directive-output",
            "name": "close",
            "type": "EventEmitter<void>"
          }
        ],
        "filePath": "src/lib/modules/tabs/tab.component.ts",
        "kind": "component",
        "name": "SkyTabComponent",
        "selector": "sky-tab"
      },
      {
        "anchorId": "class_sky-tabs-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTabsModule"
          }
        ],
        "filePath": "src/lib/modules/tabs/tabs.module.ts",
        "kind": "module",
        "name": "SkyTabsModule"
      },
      {
        "anchorId": "type-alias_sky-tabset-buttons-display-mode",
        "filePath": "src/lib/modules/tabs/tabset-buttons-display-mode.ts",
        "kind": "type-alias",
        "name": "SkyTabsetButtonsDisplayMode",
        "type": "\"dropdown\" | \"tabs\""
      },
      {
        "anchorId": "class_sky-tabset-nav-button-component",
        "children": [
          {
            "description": "The label to display on the nav button. The following are the defaults for each `buttonType`: `next` = \"Next\", `previous` = \"Previous\", `finish` = \"Finish\"",
            "kind": "directive-input",
            "name": "buttonText",
            "type": "string"
          },
          {
            "description": "The type of nav button to include.",
            "kind": "directive-input",
            "name": "buttonType",
            "type": "undefined | SkyTabsetNavButtonType",
            "isRequired": true
          },
          {
            "description": "Whether to disable the nav button. Defaults to the disabled state of the next tab for `next`, the existence of a previous tab for `previous`, and false for `finish`.",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "The tabset wizard component to associate with the nav button.",
            "kind": "directive-input",
            "name": "tabset",
            "type": "undefined | λ2",
            "isRequired": true
          }
        ],
        "filePath": "src/lib/modules/tabs/tabset-nav-button.component.ts",
        "kind": "component",
        "name": "SkyTabsetNavButtonComponent",
        "selector": "sky-tabset-nav-button"
      },
      {
        "anchorId": "type-alias_sky-tabset-style",
        "filePath": "src/lib/modules/tabs/tabset-style.ts",
        "kind": "type-alias",
        "name": "SkyTabsetStyle",
        "type": "\"tabs\" | \"wizard\""
      },
      {
        "anchorId": "interface_sky-tabset-tab-indexes-change",
        "children": [
          {
            "isOptional": true,
            "kind": "interface-property",
            "name": "tabs",
            "type": "Object[]"
          }
        ],
        "filePath": "src/lib/modules/tabs/tabset-tab-indexes-change.ts",
        "kind": "interface",
        "name": "SkyTabsetTabIndexesChange"
      },
      {
        "anchorId": "class_sky-tabset-component",
        "children": [
          {
            "description": "The ARIA label for the tabset. This sets the tabset's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the tabset includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "The HTML element ID of the element that labels the tabset. This sets the tabset's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the tabset does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "Activates a tab by its `tabIndex` property.",
            "kind": "directive-input",
            "name": "active",
            "type": "undefined | SkyTabIndex"
          },
          {
            "description": "Distinguishes a tabset's unique state in the URL by generating a query parameter that is written as `?<queryParam>-active-tab=<sanitized-tab-heading>`. The query parameter's value is parsed automatically from the selected tab's heading text, but you can supply a custom query parameter value for each tab with its `permalinkValue`. This input only applies when `tabStyle` is `\"tabs\"`",
            "kind": "directive-input",
            "name": "permalinkId",
            "type": "string"
          },
          {
            "description": "The behavior for a series of tabs.",
            "defaultValue": "\"tabs\"",
            "kind": "directive-input",
            "name": "tabStyle",
            "type": "SkyTabsetStyle"
          },
          {
            "description": "Fires when the active tab changes. This event emits the index of the active tab.",
            "kind": "directive-output",
            "name": "activeChange",
            "type": "EventEmitter<SkyTabIndex>"
          },
          {
            "description": "Fires when users click the button to add a new tab. The new tab button is added to the tab area when you specify a listener for this event. This event only applies when `tabStyle` is `\"tabs\"`.",
            "kind": "directive-output",
            "name": "newTab",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when users click the button to open a tab. The open tab button is added to the tab area when you specify a listener for this event. This event only applies when `tabStyle` is `\"tabs\"`.",
            "kind": "directive-output",
            "name": "openTab",
            "type": "EventEmitter<void>"
          },
          {
            "description": "Fires when any tab's `tabIndex` value changes. This event only applies when `tabStyle` is `\"tabs\"`.",
            "kind": "directive-output",
            "name": "tabIndexesChange",
            "type": "EventEmitter<SkyTabsetTabIndexesChange>"
          }
        ],
        "filePath": "src/lib/modules/tabs/tabset.component.ts",
        "kind": "component",
        "name": "SkyTabsetComponent",
        "selector": "sky-tabset"
      },
      {
        "anchorId": "class_sky-vertical-tab-component",
        "children": [
          {
            "deprecationReason": "Now that the vertical tabs provide aria labels automatically, this input is no longer necessary.",
            "description": "The HTML element ID of the element that contains the content that the vertical tab displays, which corresponds to the `tabId`. This property [supports accessibility rules for disclosures](https://www.w3.org/TR/wai-aria-practices-1.1/#disclosure). For more information about the `aria-controls` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-controls).",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaControls",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the tab.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to indicate that the tab has an error.  This is used for sectioned forms and is not currently a supported design for pure vertical tabs.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "errorIndicator",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether to display a chevron-right icon on the right hand side of the tab.",
            "kind": "directive-input",
            "name": "showTabRightArrow",
            "type": "undefined | boolean"
          },
          {
            "description": "Displays an item count alongside the tab header to indicate how many list items the tab contains.",
            "kind": "directive-input",
            "name": "tabHeaderCount",
            "type": "undefined | number"
          },
          {
            "description": "The tab header.",
            "kind": "directive-input",
            "name": "tabHeading",
            "type": "undefined | string",
            "isRequired": true
          },
          {
            "description": "Whether the tab is active when the tabset loads.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "active",
            "type": "boolean"
          },
          {
            "deprecationReason": "Any other value than `tab` could lead to a poor user experience for users with assistive technology.\nIn the next major version, this property will be automatically set to `tab`.",
            "description": "The ARIA role for the vertical tab [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) by indicating how the tab functions and what it controls. For information about how an ARIA role indicates what an item represents on a web page, see the [WAI-ARIA roles model](https://www.w3.org/WAI/PF/aria/#roles).",
            "defaultValue": "\"tab\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaRole",
            "type": "string"
          },
          {
            "deprecationReason": "Now that the vertical tabs provide aria labels automatically, this input is no longer necessary.",
            "description": "The ID for the tab.",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "tabId",
            "type": "string"
          }
        ],
        "filePath": "src/lib/modules/vertical-tabset/vertical-tab.component.ts",
        "kind": "component",
        "name": "SkyVerticalTabComponent",
        "selector": "sky-vertical-tab"
      },
      {
        "anchorId": "class_sky-vertical-tabset-group-component",
        "children": [
          {
            "description": "The header for the collapsible group of tabs.",
            "kind": "directive-input",
            "name": "groupHeading",
            "type": "undefined | string"
          },
          {
            "description": "Whether to disable the ability to expand and collapse the group.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "disabled",
            "type": "undefined | boolean"
          },
          {
            "description": "Whether the collapsible group is expanded.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "open",
            "type": "undefined | boolean"
          }
        ],
        "filePath": "src/lib/modules/vertical-tabset/vertical-tabset-group.component.ts",
        "kind": "component",
        "name": "SkyVerticalTabsetGroupComponent",
        "selector": "sky-vertical-tabset-group"
      },
      {
        "anchorId": "class_sky-vertical-tabset-component",
        "children": [
          {
            "description": "The ARIA label for the tabset. This sets the tabset's `aria-label` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the tabset includes a visible label, use `ariaLabelledBy` instead. For more information about the `aria-label` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-label).",
            "kind": "directive-input",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "The HTML element ID of the element that labels the tabset. This sets the tabset's `aria-labelledby` attribute to provide a text equivalent for screen readers [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility). If the tabset does not include a visible label, use `ariaLabel` instead. For more information about the `aria-labelledby` attribute, see the [WAI-ARIA definition](https://www.w3.org/TR/wai-aria/#aria-labelledby).",
            "kind": "directive-input",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "Whether the vertical tabset loads tab content during initialization so that it displays content without moving around elements in the content container.",
            "defaultValue": "false",
            "kind": "directive-input",
            "name": "maintainTabContent",
            "type": "undefined | boolean"
          },
          {
            "description": "The text to display on the show tabs button on mobile devices.",
            "kind": "directive-input",
            "name": "showTabsText",
            "type": "undefined | string"
          },
          {
            "deprecationReason": "Any other value than `tablist` could lead to a poor user experience for users with assistive technology.\nIn the next major version, this property will be automatically set to `tablist`.",
            "description": "The ARIA role for the vertical tabset [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility) by indicating how the tabset functions and what it controls. For information about how an ARIA role indicates what an item represents on a web page, see the [WAI-ARIA roles model](https://www.w3.org/WAI/PF/aria/#roles).",
            "defaultValue": "\"tablist\"",
            "isDeprecated": true,
            "kind": "directive-input",
            "name": "ariaRole",
            "type": "string"
          },
          {
            "description": "Fires when the active tab changes. Emits the index of the active tab. The index is based on the tab's position when it loads.",
            "kind": "directive-output",
            "name": "activeChange",
            "type": "EventEmitter<number>"
          }
        ],
        "filePath": "src/lib/modules/vertical-tabset/vertical-tabset.component.ts",
        "kind": "component",
        "name": "SkyVerticalTabsetComponent",
        "selector": "sky-vertical-tabset"
      },
      {
        "anchorId": "class_sky-vertical-tabset-module",
        "children": [
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyVerticalTabsetModule"
          }
        ],
        "filePath": "src/lib/modules/vertical-tabset/vertical-tabset.module.ts",
        "kind": "module",
        "name": "SkyVerticalTabsetModule"
      }
    ],
    "@skyux/tabs/testing": [
      {
        "anchorId": "interface_sky-tabset-fixture-tab",
        "children": [
          {
            "description": "Whether the tab is selected.",
            "kind": "interface-property",
            "name": "active",
            "type": "boolean"
          },
          {
            "description": "Whether the tab is disabled.",
            "kind": "interface-property",
            "name": "disabled",
            "type": "boolean"
          },
          {
            "description": "The permalink value specified for the tab.",
            "kind": "interface-property",
            "name": "permalinkValue",
            "type": "undefined | string"
          },
          {
            "description": "The count displayed in the tab header.",
            "kind": "interface-property",
            "name": "tabHeaderCount",
            "type": "undefined | string"
          },
          {
            "description": "The text displayed in the tab header.",
            "kind": "interface-property",
            "name": "tabHeading",
            "type": "undefined | string"
          }
        ],
        "description": "Properties of a SKY UX tab.",
        "filePath": "testing/src/legacy/tabs/tab-fixture-tab.ts",
        "isInternal": true,
        "kind": "interface",
        "name": "SkyTabsetFixtureTab"
      },
      {
        "anchorId": "class_sky-tabset-fixture",
        "children": [
          {
            "description": "Clicks the tabset's \"new\" button.",
            "kind": "class-method",
            "name": "clickNewButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the tabset's \"open\" button.",
            "kind": "class-method",
            "name": "clickOpenButton",
            "parameters": [],
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the tab button at the specified index.",
            "kind": "class-method",
            "name": "clickTab",
            "parameters": [
              {
                "description": "The index of the tab.",
                "name": "tabIndex",
                "type": "number"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Click's the tab's close button at the specified index.",
            "kind": "class-method",
            "name": "clickTabClose",
            "parameters": [
              {
                "description": "The index of the tab.",
                "name": "tabIndex",
                "type": "number"
              }
            ],
            "type": "Promise<void>"
          },
          {
            "description": "Retrieves information about the tab at the specified index.",
            "kind": "class-method",
            "name": "getTab",
            "parameters": [
              {
                "description": "The index of the tab.",
                "name": "tabIndex",
                "type": "number"
              }
            ],
            "type": "SkyTabsetFixtureTab"
          },
          {
            "kind": "class-property",
            "name": "constructor",
            "type": "SkyTabsetFixture"
          },
          {
            "description": "The index of the currently selected tab.",
            "kind": "class-property",
            "name": "activeTabIndex",
            "type": "number"
          },
          {
            "description": "The tabset component's ARIA label.",
            "kind": "class-property",
            "name": "ariaLabel",
            "type": "undefined | string"
          },
          {
            "description": "The tabset component's ARIA labelled by attribute.",
            "kind": "class-property",
            "name": "ariaLabelledBy",
            "type": "undefined | string"
          },
          {
            "description": "Clicks the tabset's \"new\" button.",
            "kind": "class-property",
            "name": "clickNewButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the tabset's \"open\" button.",
            "kind": "class-property",
            "name": "clickOpenButton",
            "type": "Promise<void>"
          },
          {
            "description": "Clicks the tab button at the specified index.",
            "kind": "class-property",
            "name": "clickTab",
            "type": "Promise<void>"
          },
          {
            "description": "Click's the tab's close button at the specified index.",
            "kind": "class-property",
            "name": "clickTabClose",
            "type": "Promise<void>"
          },
          {
            "description": "Retrieves information about the tab at the specified index.",
            "kind": "class-property",
            "name": "getTab",
            "type": "SkyTabsetFixtureTab"
          }
        ],
        "description": "Allows interaction with a SKY UX tabset component.",
        "filePath": "testing/src/legacy/tabs/tabset-fixture.ts",
        "isInternal": true,
        "kind": "class",
        "name": "SkyTabsetFixture"
      }
    ]
  }
}
