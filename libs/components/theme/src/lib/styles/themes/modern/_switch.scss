@use '../../variables' as *;
@use '../../mixins' as mixins;
@use '../../compat-tokens-mixins' as compatMixins;

@include mixins.sky-component('modern', '.sky-switch', false) {
  cursor: pointer;
  display: inline-flex;
  position: relative;

  &:has(~ .sky-control-help-container) .sky-switch-label {
    margin-right: 0;
  }

  &.sky-switch-disabled {
    cursor: not-allowed;

    .sky-switch-label {
      color: var(--sky-color-text-deemphasized);
    }
  }

  &.sky-control-label-required {
    .sky-switch-label {
      margin-right: 0;
    }
  }

  .sky-switch-input {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    outline: 0;
    -webkit-appearance: none;

    &.sky-switch-invalid + .sky-switch-control {
      border-width: var(--sky-border-width-input-error);
      border-color: var(--sky-color-border-switch-error);
    }

    &:checked:not(:disabled),
    &[type='checkbox']:indeterminate:not(:disabled) {
      & + .sky-switch-control {
        &:not(.sky-switch-control-icon) {
          color: var(--sky-color-icon-inverse);
        }

        &.sky-switch-control-icon {
          background: var(--sky-color-background-selected-soft);
          color: var(--sky-color-icon-selected);
          border-color: var(--sky-color-border-selected);
        }

        background: var(--sky-color-background-selected-switch-base);
        border-width: var(--sky-border-width-selected-s);
        border-color: var(--sky-color-border-switch-selected-base);

        &:is(
          .sky-switch-control-success,
          .sky-switch-control-warning,
          .sky-switch-control-danger
        ) {
          color: var(--sky-color-icon-default);
        }

        &.sky-switch-control-success {
          background-color: var(--sky-color-background-selected-success);
        }

        &.sky-switch-control-warning {
          background-color: var(--sky-color-background-selected-warning);
        }

        &.sky-switch-control-danger {
          background-color: var(--sky-color-background-selected-danger);
        }
      }

      &:active + .sky-switch-control {
        border-color: var(--sky-color-border-switch-selected-active);
      }

      &:focus-visible:not(:active) + .sky-switch-control {
        border-color: var(--sky-color-border-switch-selected-focus);
      }

      &:hover + .sky-switch-control {
        border-color: var(--sky-color-border-switch-selected-hover);
      }

      &:disabled + .sky-switch-control {
        border-color: var(--sky-color-border-switch-selected-disabled);
      }
    }

    &:disabled + .sky-switch-control {
      background-color: var(--sky-color-background-selected-switch-disabled);
      border-width: var(--sky-border-width-input-disabled);
      border-color: var(--sky-color-border-switch-disabled);
      box-shadow: var(--sky-elevation-input-disabled);
      color: var(--sky-color-text-deemphasized);
    }

    &:not(:disabled) {
      + .sky-switch-control {
        box-shadow: var(--sky-elevation-input-base);
      }

      &:hover + .sky-switch-control {
        border-width: var(--sky-border-width-input-hover);
        border-color: var(--sky-color-border-switch-hover);
      }

      &:active + .sky-switch-control {
        border-width: var(--sky-border-width-input-active);
        border-color: var(--sky-color-border-switch-active);
      }

      &:focus-visible + .sky-switch-control {
        border-width: var(--sky-border-width-input-focus);
        border-color: var(--sky-color-border-switch-focus);
      }

      &:focus-visible:not(:active) + .sky-switch-control {
        box-shadow: var(--sky-elevation-input-base);
        outline: none;
      }

      &:not(:hover):not(:active):not(:focus-visible) {
        &:checked + .sky-switch-control,
        &[type='checkbox']:indeterminate + .sky-switch-control {
          &.sky-switch-control-success {
            border-color: var(--sky-color-border-success);
          }

          &.sky-switch-control-warning {
            border-color: var(--sky-color-border-warning);
          }

          &.sky-switch-control-danger {
            border-color: var(--sky-color-border-danger);
          }
        }
      }
    }
  }

  .sky-switch-control {
    width: var(--sky-size-switch);
    max-width: var(--sky-size-switch);
    height: var(--sky-size-switch);
    flex: 1 0 var(--sky-size-switch);
    margin: 0
      var(
        --sky-comp-override-switch-label-margin-right,
        var(--sky-space-gap-label-s)
      )
      auto auto;
    display: inline-flex;
    position: relative;
    border: var(--sky-border-width-input-base) solid
      var(--sky-color-border-switch-base);
    background-color: var(--sky-color-background-input-base);
    color: var(--sky-color-icon-default);
    text-align: center;
    line-height: 1;
    align-items: center;
    justify-content: center;
    transition: $sky-form-border-and-color-transitions;

    &.sky-switch-control-icon {
      max-width: none;
      width: calc(
        var(--sky-size-icon-m) +
          calc(
            var(--sky-comp-button-icon-space-inset-left) +
              var(--sky-comp-button-icon-space-inset-right)
          )
      );
      height: calc(
        var(--sky-size-icon-m) +
          calc(
            var(--sky-comp-button-icon-space-inset-top) +
              var(--sky-comp-button-icon-space-inset-bottom)
          )
      );
      flex: 1 0
        calc(
          var(--sky-size-icon-m) +
            calc(
              var(--sky-comp-button-icon-space-inset-left) +
                var(--sky-comp-button-icon-space-inset-right)
            )
        );
      font-size: var(--sky-size-icon-m);

      i {
        justify-content: center;
      }
    }

    &::before {
      content: '';
    }
  }

  .sky-switch-label {
    line-height: var(--sky-size-switch);
    flex: 1 1 auto;
    width: 100%;
    margin-right: var(--sky-switch-label-margin-right, 0);

    // Prevent truncated text from spilling out of bounds.
    // See: https://css-tricks.com/flexbox-truncated-text/
    min-width: 0;
  }
}

@include mixins.sky-component('modern', '.sky-switch-icon-group', false) {
  .sky-switch-control-icon {
    margin-left: 0;
    margin-right: 0;
    border-radius: 0;
  }

  .sky-switch-control {
    background-color: var(--sky-color-background-action-tertiary-base);
    border-width: var(--sky-border-width-action-base);
    border-color: var(--sky-color-border-action-tertiary-base);
  }

  .sky-switch-input {
    &:checked:not(:disabled) + .sky-switch-control.sky-switch-control-icon,
    &[type='checkbox']:indeterminate:not(:disabled)
      + .sky-switch-control.sky-switch-control-icon {
      border-width: var(--sky-border-width-selected-s);
      color: var(--sky-color-icon-action);
    }

    &:disabled + .sky-switch-control.sky-switch-control-icon {
      border-color: var(--sky-color-border-action-tertiary-disabled);
      border-width: var(--sky-border-width-action-disabled);
    }

    &:checked:disabled + .sky-switch-control.sky-switch-control-icon,
    &[type='checkbox']:indeterminate:disabled
      + .sky-switch-control.sky-switch-control-icon {
      color: var(--sky-color-icon-action);
    }

    &:not(:disabled) {
      &:not(:checked):not(:hover):not(:active):not(:focus-visible) {
        + .sky-switch-control.sky-switch-control-icon {
          box-shadow: none;
        }
      }

      &:hover + .sky-switch-control {
        border-width: var(--sky-border-width-action-hover);
        border-color: var(--sky-color-border-action-tertiary-hover);
      }

      &:active + .sky-switch-control {
        border-width: var(--sky-border-width-action-active);
        border-color: var(--sky-color-border-action-tertiary-active);
      }

      &:focus-visible + .sky-switch-control {
        border-width: var(--sky-border-width-action-focus);
        border-color: var(--sky-color-border-action-tertiary-focus);
      }
    }
  }

  .sky-switch-control {
    &.sky-switch-control-icon {
      width: calc(
        var(--sky-size-icon-m) +
          calc(
            var(--sky-comp-button-icon-space-inset-left) +
              var(--sky-comp-button-icon-space-inset-right)
          )
      );
      height: calc(
        var(--sky-size-icon-m) +
          calc(
            var(--sky-comp-button-icon-space-inset-top) +
              var(--sky-comp-button-icon-space-inset-bottom)
          )
      );
      font-size: var(--sky-size-icon-m);
    }
  }

  sky-checkbox .sky-switch-control-icon {
    margin-right: var(--sky-space-gap-action_group-m);
  }

  sky-checkbox:last-of-type .sky-switch-control-icon {
    margin-right: 0;
  }

  sky-radio .sky-switch-control-icon {
    border-radius: var(--sky-border-radius-s);
  }
}
