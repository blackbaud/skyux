// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate-manifest should generate manifest 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "/dist/public-api.json",
      "{
  \\"packages\\": {
    \\"@skyux/foo\\": [
      {
        \\"anchorId\\": \\"class_----\\",
        \\"description\\": \\"This describes a class with a name not including letters or numbers.\\",
        \\"filePath\\": \\"src/lib/anchor-id.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"____\\"
      },
      {
        \\"anchorId\\": \\"class_foo1\\",
        \\"description\\": \\"This describes a class with a name comprising of letters and numbers.\\",
        \\"filePath\\": \\"src/lib/anchor-id.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"Foo1\\"
      },
      {
        \\"anchorId\\": \\"class_foo-with-only-letters\\",
        \\"description\\": \\"This describes a class with a name comprising only of letters.\\",
        \\"filePath\\": \\"src/lib/anchor-id.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"FooWithOnlyLetters\\"
      },
      {
        \\"anchorId\\": \\"variable_should-have-code-example-default-language-comment\\",
        \\"codeExample\\": \\"<h1></h1>\\",
        \\"codeExampleLanguage\\": \\"markup\\",
        \\"filePath\\": \\"src/lib/comments.ts\\",
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"shouldHaveCodeExampleDefaultLanguageComment\\",
        \\"type\\": \\"true\\"
      },
      {
        \\"anchorId\\": \\"variable_should-have-code-example-markup-language-comment\\",
        \\"codeExample\\": \\"<br />\\",
        \\"codeExampleLanguage\\": \\"markup\\",
        \\"filePath\\": \\"src/lib/comments.ts\\",
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"shouldHaveCodeExampleMarkupLanguageComment\\",
        \\"type\\": \\"true\\"
      },
      {
        \\"anchorId\\": \\"variable_should-have-code-example-unknown-language-comment\\",
        \\"codeExample\\": \\"const app = express();\\",
        \\"codeExampleLanguage\\": \\"markup\\",
        \\"filePath\\": \\"src/lib/comments.ts\\",
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"shouldHaveCodeExampleUnknownLanguageComment\\",
        \\"type\\": \\"true\\"
      },
      {
        \\"anchorId\\": \\"variable_should-have-deprecated-comment\\",
        \\"filePath\\": \\"src/lib/comments.ts\\",
        \\"isDeprecated\\": true,
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"shouldHaveDeprecatedComment\\",
        \\"type\\": \\"true\\"
      },
      {
        \\"anchorId\\": \\"variable_should-have-deprecated-reason-comment\\",
        \\"deprecationReason\\": \\"Do something else instead\\",
        \\"filePath\\": \\"src/lib/comments.ts\\",
        \\"isDeprecated\\": true,
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"shouldHaveDeprecatedReasonComment\\",
        \\"type\\": \\"true\\"
      },
      {
        \\"anchorId\\": \\"variable_should-have-internal-comment\\",
        \\"filePath\\": \\"src/lib/comments.ts\\",
        \\"isInternal\\": true,
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"shouldHaveInternalComment\\",
        \\"type\\": \\"true\\"
      },
      {
        \\"anchorId\\": \\"variable_should-have-preview-comment\\",
        \\"filePath\\": \\"src/lib/comments.ts\\",
        \\"isPreview\\": true,
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"shouldHavePreviewComment\\",
        \\"type\\": \\"true\\"
      },
      {
        \\"anchorId\\": \\"class_foo-base-class\\",
        \\"filePath\\": \\"src/lib/foo.class.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"FooBaseClass\\"
      },
      {
        \\"anchorId\\": \\"class_foo-basic-type-param-class\\",
        \\"children\\": [
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"ref\\",
            \\"type\\": \\"T\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"refOrUndefined\\",
            \\"type\\": \\"undefined | T\\"
          }
        ],
        \\"filePath\\": \\"src/lib/foo.class.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"FooBasicTypeParamClass\\",
        \\"typeParameters\\": \\"<T extends unknown>\\"
      },
      {
        \\"anchorId\\": \\"class_foo-basic-type-param-default-value-class\\",
        \\"children\\": [
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"ref\\",
            \\"type\\": \\"undefined | T\\"
          }
        ],
        \\"filePath\\": \\"src/lib/foo.class.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"FooBasicTypeParamDefaultValueClass\\",
        \\"typeParameters\\": \\"<T = boolean>\\"
      },
      {
        \\"anchorId\\": \\"class_foo-class\\",
        \\"children\\": [
          {
            \\"description\\": \\"Describes a method which returns a MappedType (e.g. \`{ [K in keyof T]: string }\`).\\",
            \\"kind\\": \\"class-method\\",
            \\"name\\": \\"getStrings\\",
            \\"parameters\\": [
              {
                \\"name\\": \\"dictionary\\",
                \\"type\\": \\"TResource\\"
              }
            ],
            \\"type\\": \\"Observable<{ [K in string | number | symbol]: string }>\\",
            \\"typeParameters\\": \\"<TResource extends ResourceDictionary>\\"
          },
          {
            \\"description\\": \\"Describes a method without any parameters.\\",
            \\"kind\\": \\"class-method\\",
            \\"name\\": \\"methodWithoutParameters\\",
            \\"type\\": \\"void\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"arrayOfFunctionTypes\\",
            \\"type\\": \\"((a: boolean, b?: string) => void)[]\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"arrayOfFunctionTypesOrUndefined\\",
            \\"type\\": \\"undefined | ((a: boolean, b?: string) => void)[]\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"arrayOfIntrinsicTypes\\",
            \\"type\\": \\"undefined | string[]\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"arrayOfReflectionTypes\\",
            \\"type\\": \\"undefined | { a: boolean; b: string; }[]\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"closureType\\",
            \\"type\\": \\"() => void\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"closureTypeOrUndefined\\",
            \\"type\\": \\"undefined | (() => void)\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"intrinsicType\\",
            \\"type\\": \\"undefined | string\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"lambdaRef\\",
            \\"type\\": \\"Î»2\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"literalType\\",
            \\"type\\": \\"undefined | 0 | 1\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"mapType\\",
            \\"type\\": \\"undefined | Map<string, number>\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"referenceType\\",
            \\"type\\": \\"undefined | TClass\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"reflectionIndexSignatureType\\",
            \\"type\\": \\"undefined | { [key: string]: boolean; }\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"reflectionType\\",
            \\"type\\": \\"{ a: boolean; b?: string; }\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"reflectionTypeOrUndefined\\",
            \\"type\\": \\"undefined | { a: boolean; b?: string; }\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"unionType\\",
            \\"type\\": \\"undefined | null | true | \\\\\\"a\\\\\\" | \\\\\\"b\\\\\\"\\"
          },
          {
            \\"description\\": \\"Describes a method which returns a MappedType (e.g. \`{ [K in keyof T]: string }\`).\\",
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"getStrings\\",
            \\"type\\": \\"Observable<{ [K in string | number | symbol]: string }>\\"
          },
          {
            \\"description\\": \\"Describes a method without any parameters.\\",
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"methodWithoutParameters\\",
            \\"type\\": \\"void\\"
          }
        ],
        \\"description\\": \\"This is the foo class.\\",
        \\"filePath\\": \\"src/lib/foo.class.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"FooClass\\",
        \\"typeParameters\\": \\"<TClass extends FooBaseClass>\\"
      },
      {
        \\"anchorId\\": \\"class_foo-with-static-properties-class\\",
        \\"children\\": [
          {
            \\"description\\": \\"This describes the abstract method.\\",
            \\"kind\\": \\"class-method\\",
            \\"name\\": \\"someAbstractMethod\\",
            \\"type\\": \\"void\\"
          },
          {
            \\"description\\": \\"This describes the static method.\\",
            \\"isStatic\\": true,
            \\"kind\\": \\"class-method\\",
            \\"name\\": \\"someStaticMethod\\",
            \\"type\\": \\"boolean\\"
          },
          {
            \\"description\\": \\"This describes the static property.\\",
            \\"defaultValue\\": \\"false\\",
            \\"isStatic\\": true,
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"someStaticProperty\\",
            \\"type\\": \\"boolean\\"
          },
          {
            \\"description\\": \\"This describes the abstract method.\\",
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"someAbstractMethod\\",
            \\"type\\": \\"void\\"
          },
          {
            \\"description\\": \\"This describes the static method.\\",
            \\"isStatic\\": true,
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"someStaticMethod\\",
            \\"type\\": \\"boolean\\"
          }
        ],
        \\"description\\": \\"This describes the foo abstract class.\\",
        \\"filePath\\": \\"src/lib/foo.class.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"FooWithStaticPropertiesClass\\"
      },
      {
        \\"anchorId\\": \\"class_foo-component\\",
        \\"children\\": [
          {
            \\"description\\": \\"This describes the bar input.\\",
            \\"defaultValue\\": \\"'baz'\\",
            \\"kind\\": \\"directive-input\\",
            \\"name\\": \\"bar\\",
            \\"type\\": \\"undefined | string\\",
            \\"isRequired\\": true
          },
          {
            \\"description\\": \\"This describes the foo input.\\",
            \\"kind\\": \\"directive-input\\",
            \\"name\\": \\"foo\\",
            \\"type\\": \\"InputSignal<undefined | string>\\"
          },
          {
            \\"description\\": \\"This describes the fooRequired input.\\",
            \\"kind\\": \\"directive-input\\",
            \\"name\\": \\"fooRequired\\",
            \\"type\\": \\"InputSignal<string>\\"
          },
          {
            \\"description\\": \\"This describes the onClick output.\\",
            \\"kind\\": \\"directive-output\\",
            \\"name\\": \\"onClick\\",
            \\"type\\": \\"OutputEmitterRef<void>\\"
          },
          {
            \\"description\\": \\"This describes the onTouch output.\\",
            \\"kind\\": \\"directive-output\\",
            \\"name\\": \\"onTouch\\",
            \\"type\\": \\"EventEmitter<void>\\"
          }
        ],
        \\"filePath\\": \\"src/lib/foo.component.ts\\",
        \\"kind\\": \\"component\\",
        \\"name\\": \\"FooComponent\\",
        \\"selector\\": \\"lib-foo\\"
      },
      {
        \\"anchorId\\": \\"type-alias_foo-breakpoint\\",
        \\"description\\": \\"The name of a viewport or container breakpoint.\\",
        \\"filePath\\": \\"src/lib/foo.const-assertion.ts\\",
        \\"kind\\": \\"type-alias\\",
        \\"name\\": \\"FooBreakpoint\\",
        \\"type\\": \\"readonly [\\\\\\"xs\\\\\\", \\\\\\"sm\\\\\\", \\\\\\"md\\\\\\", \\\\\\"lg\\\\\\"]\\"
      },
      {
        \\"anchorId\\": \\"variable_foo-breakpoints\\",
        \\"description\\": \\"A list of all breakpoints.\\",
        \\"filePath\\": \\"src/lib/foo.const-assertion.ts\\",
        \\"isInternal\\": true,
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"FOO_BREAKPOINTS\\",
        \\"type\\": \\"readonly [\\\\\\"xs\\\\\\", \\\\\\"sm\\\\\\", \\\\\\"md\\\\\\", \\\\\\"lg\\\\\\"]\\"
      },
      {
        \\"anchorId\\": \\"class_foo-directive\\",
        \\"description\\": \\"This is a directive without any inputs/outputs.\\",
        \\"filePath\\": \\"src/lib/foo.directive.ts\\",
        \\"kind\\": \\"directive\\",
        \\"name\\": \\"FooDirective\\",
        \\"selector\\": \\"[foo]\\"
      },
      {
        \\"anchorId\\": \\"class_foo-with-inputs-outputs-directive\\",
        \\"children\\": [
          {
            \\"description\\": \\"This describes a decorated input.\\",
            \\"defaultValue\\": \\"true\\",
            \\"kind\\": \\"directive-input\\",
            \\"name\\": \\"inputA\\",
            \\"type\\": \\"boolean\\",
            \\"isRequired\\": true
          },
          {
            \\"description\\": \\"This describes a signal input.\\",
            \\"defaultValue\\": \\"true\\",
            \\"kind\\": \\"directive-input\\",
            \\"name\\": \\"inputB\\",
            \\"type\\": \\"InputSignal<boolean>\\"
          },
          {
            \\"description\\": \\"This describes an input with a setter.\\",
            \\"defaultValue\\": \\"true\\",
            \\"kind\\": \\"directive-input\\",
            \\"name\\": \\"inputC\\",
            \\"type\\": \\"boolean\\",
            \\"isRequired\\": true
          },
          {
            \\"description\\": \\"This describes an input with a getter.\\",
            \\"defaultValue\\": \\"false\\",
            \\"kind\\": \\"directive-input\\",
            \\"name\\": \\"inputD\\",
            \\"type\\": \\"boolean\\",
            \\"isRequired\\": true
          },
          {
            \\"description\\": \\"This describes a decorated output.\\",
            \\"kind\\": \\"directive-output\\",
            \\"name\\": \\"outputA\\",
            \\"type\\": \\"EventEmitter<void>\\"
          },
          {
            \\"description\\": \\"This describes a signal output.\\",
            \\"kind\\": \\"directive-output\\",
            \\"name\\": \\"outputB\\",
            \\"type\\": \\"OutputEmitterRef<void>\\"
          }
        ],
        \\"filePath\\": \\"src/lib/foo.directive.ts\\",
        \\"kind\\": \\"directive\\",
        \\"name\\": \\"FooWithInputsOutputsDirective\\",
        \\"selector\\": \\"[foo]\\"
      },
      {
        \\"anchorId\\": \\"class_Î»2\\",
        \\"description\\": \\"This is a directive with a lambda name.\\",
        \\"filePath\\": \\"src/lib/foo.directive.ts\\",
        \\"kind\\": \\"directive\\",
        \\"name\\": \\"Î»2\\",
        \\"selector\\": \\"[fooLambda]\\"
      },
      {
        \\"anchorId\\": \\"enum_foo-enum\\",
        \\"description\\": \\"This describes the Foo enum.\\",
        \\"filePath\\": \\"src/lib/foo.enum.ts\\",
        \\"kind\\": \\"enumeration\\",
        \\"children\\": [
          {
            \\"description\\": \\"This is the Bar value.\\",
            \\"kind\\": \\"enum-member\\",
            \\"name\\": \\"Bar\\",
            \\"type\\": \\"0\\"
          },
          {
            \\"description\\": \\"This is the Baz value.\\",
            \\"kind\\": \\"enum-member\\",
            \\"name\\": \\"Baz\\",
            \\"type\\": \\"1\\"
          }
        ],
        \\"name\\": \\"FooEnum\\"
      },
      {
        \\"anchorId\\": \\"function_create-foo\\",
        \\"description\\": \\"This describes the createFoo function.\\",
        \\"filePath\\": \\"src/lib/foo.function.ts\\",
        \\"kind\\": \\"function\\",
        \\"name\\": \\"createFoo\\",
        \\"parameters\\": [
          {
            \\"description\\": \\"This describes param1.\\",
            \\"name\\": \\"param1\\",
            \\"type\\": \\"T\\"
          },
          {
            \\"defaultValue\\": \\"false\\",
            \\"description\\": \\"This describes param2.\\",
            \\"name\\": \\"param2\\",
            \\"type\\": \\"boolean\\"
          },
          {
            \\"description\\": \\"This describes param3.\\",
            \\"isOptional\\": true,
            \\"name\\": \\"param3\\",
            \\"type\\": \\"number\\"
          }
        ],
        \\"type\\": \\"FooClass<T>\\",
        \\"typeParameters\\": \\"<T extends string>\\"
      },
      {
        \\"anchorId\\": \\"interface_foo-empty-interface\\",
        \\"filePath\\": \\"src/lib/foo.interface.ts\\",
        \\"kind\\": \\"interface\\",
        \\"name\\": \\"FooEmptyInterface\\"
      },
      {
        \\"anchorId\\": \\"interface_foo-interface\\",
        \\"children\\": [
          {
            \\"isOptional\\": true,
            \\"kind\\": \\"interface-property\\",
            \\"name\\": \\"bar\\",
            \\"type\\": \\"A\\"
          },
          {
            \\"description\\": \\"This describes baz.\\",
            \\"kind\\": \\"interface-property\\",
            \\"name\\": \\"baz\\",
            \\"type\\": \\"B\\"
          }
        ],
        \\"description\\": \\"This is the Foo interface.\\",
        \\"filePath\\": \\"src/lib/foo.interface.ts\\",
        \\"indexSignatures\\": [
          {
            \\"description\\": \\"This describes the index signature.\\",
            \\"name\\": \\"[_: string]\\",
            \\"type\\": \\"unknown\\",
            \\"parameters\\": [
              {
                \\"description\\": \\"The name of the thing.\\",
                \\"name\\": \\"_\\",
                \\"type\\": \\"string\\"
              }
            ]
          }
        ],
        \\"kind\\": \\"interface\\",
        \\"name\\": \\"FooInterface\\"
      },
      {
        \\"anchorId\\": \\"class_foo-module\\",
        \\"children\\": [
          {
            \\"kind\\": \\"class-method\\",
            \\"name\\": \\"forRoot\\",
            \\"type\\": \\"ModuleWithProviders<FooModule>\\"
          },
          {
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"forRoot\\",
            \\"type\\": \\"ModuleWithProviders<FooModule>\\"
          }
        ],
        \\"filePath\\": \\"src/lib/foo.module.ts\\",
        \\"kind\\": \\"module\\",
        \\"name\\": \\"FooModule\\"
      },
      {
        \\"anchorId\\": \\"class_foo-pipe\\",
        \\"children\\": [
          {
            \\"description\\": \\"This describes the transform method.\\",
            \\"kind\\": \\"class-method\\",
            \\"name\\": \\"transform\\",
            \\"parameters\\": [
              {
                \\"name\\": \\"value\\",
                \\"type\\": \\"undefined | string\\"
              },
              {
                \\"defaultValue\\": \\"false\\",
                \\"name\\": \\"isThing\\",
                \\"type\\": \\"boolean\\"
              },
              {
                \\"name\\": \\"bar\\",
                \\"type\\": \\"boolean\\"
              },
              {
                \\"isOptional\\": true,
                \\"name\\": \\"foo\\",
                \\"type\\": \\"string\\"
              }
            ],
            \\"type\\": \\"string\\"
          },
          {
            \\"description\\": \\"This describes the transform method.\\",
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"transform\\",
            \\"type\\": \\"string\\"
          }
        ],
        \\"description\\": \\"This describes the Foo pipe.\\",
        \\"filePath\\": \\"src/lib/foo.pipe.ts\\",
        \\"kind\\": \\"pipe\\",
        \\"name\\": \\"FooPipe\\",
        \\"templateBindingName\\": \\"foo\\"
      },
      {
        \\"anchorId\\": \\"class_foo-service\\",
        \\"children\\": [
          {
            \\"defaultValue\\": \\"''\\",
            \\"kind\\": \\"class-property\\",
            \\"name\\": \\"foo\\",
            \\"type\\": \\"string\\"
          }
        ],
        \\"description\\": \\"This describes the foo service and everything it does.\\",
        \\"filePath\\": \\"src/lib/foo.service.ts\\",
        \\"kind\\": \\"service\\",
        \\"name\\": \\"FooService\\"
      },
      {
        \\"anchorId\\": \\"type-alias_foo-alias\\",
        \\"description\\": \\"This is the Foo type alias.\\",
        \\"filePath\\": \\"src/lib/foo.type-alias.ts\\",
        \\"kind\\": \\"type-alias\\",
        \\"name\\": \\"FooAlias\\",
        \\"type\\": \\"\\\\\\"foo\\\\\\" | true | 0 | undefined | null\\"
      },
      {
        \\"anchorId\\": \\"type-alias_foo-reference-type-alias\\",
        \\"description\\": \\"This type references a type from another package (i.e., ReferenceType).\\",
        \\"filePath\\": \\"src/lib/foo.type-alias.ts\\",
        \\"kind\\": \\"type-alias\\",
        \\"name\\": \\"FooReferenceTypeAlias\\",
        \\"type\\": \\"string | keyof Component\\"
      },
      {
        \\"anchorId\\": \\"variable_foo-variable\\",
        \\"description\\": \\"This is a variable.\\",
        \\"filePath\\": \\"src/lib/foo.variable.ts\\",
        \\"kind\\": \\"variable\\",
        \\"name\\": \\"FOO_VARIABLE\\",
        \\"type\\": \\"InjectionToken<unknown>\\"
      }
    ],
    \\"@skyux/foo/testing\\": [
      {
        \\"anchorId\\": \\"class_sky-foo-harness\\",
        \\"description\\": \\"Harness for interacting with a foo component in tests.\\",
        \\"filePath\\": \\"testing/src/foo-harness.ts\\",
        \\"kind\\": \\"class\\",
        \\"name\\": \\"SkyFooHarness\\"
      }
    ]
  }
}",
    ],
  ],
  "results": Array [
    Object {
      "type": "return",
      "value": undefined,
    },
  ],
}
`;
